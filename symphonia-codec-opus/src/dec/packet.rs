use anyhow::{bail, Result};
use combine::parser::range::take;
use combine::parser::repeat::count;
use combine::Parser;

use crate::{FrameNum, SampleRate, Toc};

pub fn get_nb_samples(data: &[u8], fs: SampleRate) -> Result<usize> {
    let (toc, data) = take(1).map(|toc: &[u8]| Toc(toc[0])).parse(data)?;
    let nof = match toc.num_of_frame() {
        FrameNum::One => 1,
        FrameNum::Two | FrameNum::TwoDiff => 2,
        FrameNum::Arbitrary => take(1).map(|l: &[u8]| l[0]).parse(data)?.0 & 0x3f,
    };
    let num = (nof as usize) * toc.samples_per_frame(fs);
    Ok(num)
}

pub fn parse_opus_pkt(data: &[u8], self_delimited: bool) -> Result<(Toc, Vec<&[u8]>)> {
    let (toc, data) = take(1).map(|toc: &[u8]| Toc(toc[0])).parse(data)?;

    let frames = match toc.num_of_frame() {
        FrameNum::One => parse_one_frame(data),
        FrameNum::Two => parse_two_frame(data),
        FrameNum::TwoDiff => parse_two_diff_frame(data),
        FrameNum::Arbitrary => parse_arbitrary_frame(data),
    }?;
    Ok((toc, frames))
}

fn parse_one_frame(data: &[u8]) -> Result<Vec<&[u8]>> {
    Ok(vec![data])
}

fn parse_two_frame(data: &[u8]) -> Result<Vec<&[u8]>> {
    let frame_len = data.len() / 2;
    let (frames, rem) = count::<Vec<_>, _, _>(2, take(frame_len)).parse(data)?;
    if !rem.is_empty() {
        bail!("Have tailing bytes");
    }

    Ok(frames)
}

fn get_frame_len(data: &[u8]) -> Result<(usize, &[u8])> {
    let (len1, mut data) = take(1).map(|len: &[u8]| len[0] as usize).parse(data)?;
    let frame_len = match len1 {
        0 => 0,
        l if (1..252).contains(&l) => l,
        _ => {
            let (len2, rem) = take(1).map(|len: &[u8]| len[0] as usize).parse(data)?;
            data = rem;
            len2 * 4 + len1
        }
    } as usize;
    Ok((frame_len, data))
}

fn parse_two_diff_frame(data: &[u8]) -> Result<Vec<&[u8]>> {
    let (frame_len, data) = get_frame_len(data)?;
    let frames = take(frame_len).parse(data).map(|(f1, f2)| vec![f1, f2])?;

    Ok(frames)
}

fn parse_arbitrary_frame(data: &[u8]) -> Result<Vec<&[u8]>> {
    let (vpm, mut data) = take(1).map(|vpm: &[u8]| vpm[0]).parse(data)?;
    let padding = (vpm >> 6 & 0b1) == 1;
    let variable = (vpm >> 7 & 0b1) == 1;
    let mut padding_len = 0usize;
    // num of frames
    let nof = (vpm & 0b0011_1111) as usize;

    if nof == 0 {
        bail!("OPUS code 3 packet must contains at least one packet");
    }

    // TODO: check frame size is >= 5760

    if padding {
        let (l, rem) = take(1).map(|pl: &[u8]| pl[0]).parse(data)?;
        data = rem;
        padding_len = l as usize;
    }

    if padding_len >= data.len() {
        bail!("Not enough bytes for code 3 OPUS packet");
    }

    if variable {
        parse_vbr_frame(data, nof, padding_len)
    } else {
        parse_cbr_frame(data, nof, padding_len)
    }
}

fn parse_cbr_frame(data: &[u8], nof: usize, padding_len: usize) -> Result<Vec<&[u8]>> {
    let frame_len = (data.len() - padding_len) / nof;
    // According to RFC 6716, OPUS decoder MUST accept any value for the padding bytes, so we do nothing here
    let (frames, rem) = count::<Vec<_>, _, _>(nof, take(frame_len))
        // .map(|fs| fs.into_iter().map(Frame::Octect).collect())
        .skip(take(padding_len))
        .parse(data)?;

    if !rem.is_empty() {
        bail!("Have tailing bytes");
    }

    Ok(frames)
}

fn parse_vbr_frame(mut data: &[u8], nof: usize, padding_len: usize) -> Result<Vec<&[u8]>> {
    // max nof is 63(6 bits)
    let mut frame_lens = [0; 64];
    for len in frame_lens.iter_mut().take(nof) {
        let (frame_len, rem) = get_frame_len(data)?;
        data = rem;
        *len = frame_len;
    }

    let mut frames = vec![];
    for len in frame_lens.iter().take(nof) {
        let (frame, rem) = take(*len).parse(data)?;
        data = rem;
        frames.push(frame);
    }

    // According to RFC 6716, OPUS decoder MUST accept any value for the padding bytes, so we do nothing here
    let (_, data) = take(padding_len).parse(data)?;

    if !data.is_empty() {
        bail!("Have tailing bytes");
    }

    Ok(frames)
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_parse_opus_one_frame() {
        let data: &[u8] = &[
            0x78, 0x00, 0xb2, 0x67, 0xa8, 0x1f, 0x40, 0x4e, 0xf7, 0x78, 0x60, 0x9a, 0x40, 0x72, 0x32, 0xaf, 0x14, 0xdf,
            0x21, 0x8c, 0x2d, 0xb4, 0x55, 0xce, 0x6b, 0xc6, 0x5c, 0x70, 0x5b, 0xc2, 0xcf, 0x0b, 0x8e, 0xa9, 0x18, 0xb1,
            0x2e, 0x56, 0xe2, 0x6c, 0xbe, 0x1c, 0x13, 0x1b, 0x52, 0xb7, 0x1d, 0x54, 0xf2, 0x80, 0x8c, 0x53, 0x98, 0x72,
            0x21, 0xec, 0x13, 0xc4, 0xbd, 0x11, 0x6c, 0x86, 0xd7, 0x80, 0x3c, 0x8d, 0x4f, 0x8e, 0xd3, 0xb6, 0x9e, 0x2d,
            0x36, 0xa2, 0x03, 0x3b, 0xeb, 0xa3, 0x45, 0x06, 0x55, 0x69,
        ];

        let (toc, frames) = parse_opus_pkt(data, false).unwrap();
        assert_eq!(frames.len(), 1);
        assert_eq!(frames[0].len(), 81);
    }

    #[test]
    fn test_parse_opus_two_frame() {
        let data: &[u8] = &[
            0x79, 0xe3, 0x60, 0xcf, 0xf3, 0x9d, 0xf3, 0xd0, 0x23, 0x4d, 0xf0, 0x1d, 0x40, 0xe8, 0x37, 0x4c, 0x90, 0x06,
            0x3a, 0xfc, 0xc8, 0x7f, 0x8b, 0x7e, 0x9f, 0x80, 0xe8, 0x96, 0x31, 0x61, 0x76, 0x32, 0x69, 0x77, 0x2d, 0xca,
            0xc1, 0x5d, 0x27, 0x70, 0x2e, 0x73, 0xaf, 0xbc, 0x52, 0x5a, 0x62, 0x8e, 0x34, 0x9e, 0x4a, 0xe4, 0x45, 0xbf,
            0xf9, 0xd7, 0xc7, 0xdc, 0x54, 0x03, 0x0f, 0x8c, 0x8b, 0x37, 0xb5, 0x0e, 0x76, 0x70, 0x71, 0x15, 0xcf, 0xa1,
            0xf9, 0x2c, 0x92, 0x0c, 0xf9, 0xdf, 0x40, 0x0c, 0x42, 0x93, 0x76, 0xce, 0xa1, 0xa8, 0x06, 0x13, 0xbb, 0x6f,
            0xd8, 0xb7, 0x2c, 0x9e, 0x05, 0x4b, 0x37, 0x39, 0xc6, 0x68, 0x5c, 0xda, 0x80, 0x86, 0x2a, 0x9b, 0x6e, 0xa2,
            0xd8, 0x24, 0x85, 0xb3, 0xd3, 0x73, 0x45, 0xcb, 0xc8, 0xa1, 0xb2, 0x85, 0x70, 0x9c, 0x60, 0x9f, 0xa2, 0xfb,
            0x96, 0xeb, 0x46, 0x0d, 0x7c, 0x1c, 0x47, 0x36, 0xa2, 0xa0, 0x82, 0x54, 0x76, 0x16, 0x30, 0x50, 0x77, 0xd7,
            0x6f, 0xe2, 0x0d, 0x56, 0x3b,
        ];

        let (toc, frames) = parse_opus_pkt(data, false).unwrap();
        assert_eq!(frames.len(), 2);
        assert_eq!(frames[0].len(), 74);
        assert_eq!(frames[1].len(), 74);
    }

    #[test]
    fn test_get_frame_len() {
        let data: &[u8] = &[0x0];
        let (len, _) = get_frame_len(data).unwrap();
        assert_eq!(len, 0);

        let data: &[u8] = &[0x1];
        let (len, _) = get_frame_len(data).unwrap();
        assert_eq!(len, 1);

        let data: &[u8] = &[251];
        let (len, _) = get_frame_len(data).unwrap();
        assert_eq!(len, 251);

        let data: &[u8] = &[252, 1];
        let (len, _) = get_frame_len(data).unwrap();
        assert_eq!(len, 252 + 4);

        let data: &[u8] = &[252, 100];
        let (len, _) = get_frame_len(data).unwrap();
        assert_eq!(len, 252 + 100 * 4);
    }

    #[test]
    fn test_parse_opus_two_diff_frame() {
        let data: &[u8] = &[
            0x7a, 0x64, 0x97, 0xde, 0xaf, 0x2d, 0xae, 0x5c, 0xd8, 0xe3, 0x94, 0x10, 0x05, 0xab, 0x31, 0x09, 0x91, 0xec,
            0xd8, 0x32, 0x28, 0x8d, 0xe1, 0xa1, 0xcb, 0xa8, 0x6f, 0x73, 0xdf, 0xc6, 0x8c, 0xff, 0xd9, 0xdb, 0x94, 0x60,
            0xd7, 0xb8, 0xc8, 0x4c, 0x95, 0x2e, 0x61, 0x66, 0x0b, 0xde, 0xe9, 0xfa, 0xb4, 0xe4, 0xc5, 0x00, 0xd3, 0x64,
            0x01, 0xe8, 0x19, 0xf2, 0xb6, 0xcb, 0x77, 0x17, 0xd1, 0xf4, 0x58, 0xe2, 0xdb, 0xc9, 0xad, 0xd2, 0x26, 0xd2,
            0x1f, 0xaa, 0xaa, 0x4a, 0xe9, 0x84, 0x59, 0x16, 0x0b, 0x0f, 0xf8, 0xfe, 0x34, 0x17, 0x12, 0x16, 0x84, 0x40,
            0xe4, 0x64, 0xbe, 0x21, 0x72, 0x6e, 0x14, 0x9f, 0x28, 0x89, 0xdd, 0xdf, 0xfb, 0x51, 0x27, 0x20, 0x2e, 0x39,
            0x48, 0x2d, 0x94, 0x9b, 0xf0, 0x86, 0xdb, 0x4b, 0xf1, 0xc4, 0x6f, 0x3d, 0xb6, 0xdc, 0xa5, 0xed, 0xe5, 0xb6,
            0x86, 0x73, 0x29, 0x7b, 0x3c, 0xfb, 0xf4, 0x8c, 0x76, 0x1a, 0x12, 0xf6, 0x00, 0x28, 0xf9, 0x6e, 0xaf, 0x98,
            0x6c, 0x4f, 0x25, 0x91, 0x5a, 0xa5, 0x9a, 0x2d, 0x11, 0x6e,
        ];

        let (toc, frames) = parse_opus_pkt(data, false).unwrap();
        assert_eq!(frames[0].len(), 100);
        assert_eq!(frames[1].len(), 52);

        // Empty packet
        let data: &[u8] = &[0x7a, 0x00];
        let (toc, frames) = parse_opus_pkt(data, false).unwrap();
        assert!(matches!(frames[0], f if f.is_empty()));
        assert!(matches!(frames[1], f if f.is_empty()));
    }

    #[test]
    fn test_parse_opus_arbitrary_frame_cbr() {
        let data: &[u8] = &[
            0x7b, 0x42, 0x08, 0xb7, 0xc2, 0x92, 0x6c, 0x3c, 0xa8, 0x73, 0xde, 0x2d, 0x20, 0x2c, 0x63, 0x07, 0xe1, 0x0b,
            0x37, 0xa3, 0xc3, 0xd6, 0xc3, 0xce, 0x8d, 0x41, 0xce, 0xb6, 0xc9, 0x85, 0xb3, 0x59, 0xbe, 0x51, 0x69, 0xff,
            0x8f, 0xd0, 0x21, 0xf1, 0x27, 0xb6, 0x62, 0x56, 0xa2, 0x80, 0xb2, 0xe7, 0x8f, 0x62, 0x73, 0x57, 0xc3, 0x18,
            0x66, 0xbf, 0x5f, 0x75, 0x38, 0x7a, 0xbc, 0xf8, 0xca, 0x70, 0x4d, 0x08, 0xed, 0xa8, 0x2e, 0x33, 0x13, 0x98,
            0xb9, 0x76, 0xd2, 0x33, 0xc7, 0x18, 0x8e, 0x59, 0x10, 0xfc, 0x1c, 0x98, 0xb1, 0xbf, 0x61, 0x6a, 0xbf, 0x02,
            0xdb, 0x7f, 0xc4, 0x6a, 0x85, 0x63, 0xdd, 0x7a, 0x8d, 0xd6, 0x76, 0x6b, 0x60, 0x15, 0x14, 0x98, 0xcc, 0x81,
            0x89, 0x13, 0x10, 0x34, 0x00, 0x3a, 0x6c, 0x96, 0xa3, 0xb6, 0xe5, 0xad, 0xd1, 0x23, 0xd8, 0x04, 0x69, 0x99,
            0x03, 0xe6, 0x30, 0xe1, 0x8f, 0x28, 0x0d, 0x90, 0x89, 0x7b, 0x9f, 0xf3, 0x16, 0x9c, 0x77, 0xc1, 0x9e, 0xb8,
            0xeb, 0xb4, 0x26, 0x65, 0x55, 0xdd, 0x36, 0xcd, 0xca,
        ];

        let (toc, frames) = parse_opus_pkt(data, false).unwrap();
        assert_eq!(frames.len(), 2);
        assert_eq!(frames[0].len(), 71);
        assert_eq!(frames[1].len(), 71);
    }
}
