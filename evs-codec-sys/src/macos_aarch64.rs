/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const MODE1: i32 = 1;
pub const MODE2: i32 = 2;
pub const EVS_PI: f64 = 3.141592653589793;
pub const PI2: f64 = 6.283185307179586;
pub const RANDOM_INITSEED: i32 = 21845;
pub const TRUE: i32 = 1;
pub const FALSE: i32 = 0;
pub const MAX_FRAME_COUNTER: i32 = 200;
pub const MAX_BITS_PER_FRAME: i32 = 2560;
pub const ENC: i32 = 0;
pub const DEC: i32 = 1;
pub const NB: i32 = 0;
pub const WB: i32 = 1;
pub const SWB: i32 = 2;
pub const FB: i32 = 3;
pub const L_FRAME48k: i32 = 960;
pub const L_FRAME32k: i32 = 640;
pub const L_FRAME16k: i32 = 320;
pub const L_FRAME8k: i32 = 160;
pub const ACTIVE_FRAME: i32 = 255;
pub const SID_FRAME: i32 = 250;
pub const ZERO_FRAME: i32 = 240;
pub const FRAME_SIZE_NB: i32 = 13;
pub const RATE_MODE_MAX: i32 = 2;
pub const BANDWIDTH_MODE_MAX: i32 = 2;
pub const MIN_LOG_60dB: f64 = 0.000001;
pub const MIN_LOG_VAL_60dB: f64 = -60.0;
pub const INV_LOG_2: f64 = 1.442695040888963;
pub const ACELP_CORE: i32 = 0;
pub const TCX_20_CORE: i32 = 1;
pub const TCX_10_CORE: i32 = 2;
pub const HQ_CORE: i32 = 3;
pub const AMR_WB_CORE: i32 = 4;
pub const WB_TBE: i32 = 5;
pub const WB_BWE: i32 = 6;
pub const SWB_CNG: i32 = 7;
pub const SWB_TBE: i32 = 8;
pub const SWB_BWE: i32 = 9;
pub const SWB_BWE_HIGHRATE: i32 = 10;
pub const FB_TBE: i32 = 11;
pub const FB_BWE: i32 = 12;
pub const FB_BWE_HIGHRATE: i32 = 13;
pub const IGF_BWE: i32 = 14;
pub const LP_CNG: i32 = 0;
pub const FD_CNG: i32 = 1;
pub const FRAME_NO_DATA: i32 = 0;
pub const SID_1k75: i32 = 1750;
pub const SID_2k40: i32 = 2400;
pub const PPP_NELP_2k80: i32 = 2800;
pub const ACELP_5k90: i32 = 5900;
pub const ACELP_6k60: i32 = 6600;
pub const ACELP_7k20: i32 = 7200;
pub const ACELP_8k00: i32 = 8000;
pub const ACELP_8k85: i32 = 8850;
pub const ACELP_9k60: i32 = 9600;
pub const ACELP_11k60: i32 = 11600;
pub const ACELP_12k15: i32 = 12150;
pub const ACELP_12k65: i32 = 12650;
pub const ACELP_12k85: i32 = 12850;
pub const ACELP_13k20: i32 = 13200;
pub const ACELP_14k25: i32 = 14250;
pub const ACELP_14k80: i32 = 14800;
pub const ACELP_15k85: i32 = 15850;
pub const ACELP_16k40: i32 = 16400;
pub const ACELP_18k25: i32 = 18250;
pub const ACELP_19k85: i32 = 19850;
pub const ACELP_22k60: i32 = 22600;
pub const ACELP_23k05: i32 = 23050;
pub const ACELP_23k85: i32 = 23850;
pub const ACELP_24k40: i32 = 24400;
pub const ACELP_29k00: i32 = 29000;
pub const ACELP_29k20: i32 = 29200;
pub const ACELP_30k20: i32 = 30200;
pub const ACELP_30k40: i32 = 30400;
pub const ACELP_32k: i32 = 32000;
pub const ACELP_48k: i32 = 48000;
pub const ACELP_64k: i32 = 64000;
pub const HQ_16k40: i32 = 16400;
pub const HQ_13k20: i32 = 13200;
pub const HQ_24k40: i32 = 24400;
pub const HQ_32k: i32 = 32000;
pub const HQ_48k: i32 = 48000;
pub const HQ_64k: i32 = 64000;
pub const HQ_96k: i32 = 96000;
pub const HQ_128k: i32 = 128000;
pub const WB_TBE_0k35: i32 = 350;
pub const WB_BWE_0k35: i32 = 350;
pub const WB_TBE_1k05: i32 = 1050;
pub const SWB_TBE_1k6: i32 = 1600;
pub const SWB_BWE_1k6: i32 = 1600;
pub const FB_TBE_1k8: i32 = 1800;
pub const FB_BWE_1k8: i32 = 1800;
pub const SWB_TBE_2k8: i32 = 2800;
pub const FB_TBE_3k0: i32 = 3000;
pub const SWB_BWE_16k: i32 = 16000;
pub const SIZE_BRATE_TBL: i32 = 11;
pub const MAX_ACELP_SIG: i32 = 100;
pub const MAX_PVQ_PUSH_IND: i32 = 320;
pub const FRAME_SIZE_NS: i32 = 20000000;
pub const ACELP_LOOK_NS: i32 = 8750000;
pub const DELAY_FIR_RESAMPL_NS: i32 = 937500;
pub const DELAY_CLDFB_NS: i32 = 1250000;
pub const DELAY_SWB_TBE_12k8_NS: i32 = 1250000;
pub const DELAY_SWB_TBE_16k_NS: i32 = 1125000;
pub const MAX_DELAY_TBE_NS: i32 = 1312500;
pub const DELAY_BWE_TOTAL_NS: i32 = 2312500;
pub const DELAY_FD_BWE_ENC_12k8_NS: i32 = 2250000;
pub const DELAY_FD_BWE_ENC_16k_NS: i32 = 2125000;
pub const DELAY_FD_BWE_ENC_NS: i32 = 2250000;
pub const SWITCH_GAP_LENGTH_NS: i32 = 6250000;
pub const HQ_DELTA_MAX: i32 = 6;
pub const N_ZERO_MDCT_NS: i32 = 5625000;
pub const NL_BUFF_OFFSET: i32 = 12;
pub const N_WS2N_FRAMES: i32 = 40;
pub const N_NS2W_FRAMES: i32 = 20;
pub const INACTIVE: i32 = 0;
pub const UNVOICED: i32 = 1;
pub const VOICED: i32 = 2;
pub const GENERIC: i32 = 3;
pub const TRANSITION: i32 = 4;
pub const AUDIO: i32 = 5;
pub const LR_MDCT: i32 = 6;
pub const ACELP_MODE_MAX: i32 = 4;
pub const RF_MODE_MAX: i32 = 4;
pub const RF_NO_DATA: i32 = 0;
pub const RF_TCXFD: i32 = 1;
pub const RF_TCXTD1: i32 = 2;
pub const RF_TCXTD2: i32 = 3;
pub const RF_ALLPRED: i32 = 4;
pub const RF_NOPRED: i32 = 5;
pub const RF_GENPRED: i32 = 6;
pub const RF_NELP: i32 = 7;
pub const ACELP_TCX_TRANS_NS: i32 = 1250000;
pub const L_FRAME_MAX: i32 = 960;
pub const L_FRAME_PLUS: i32 = 1200;
pub const N_TCX10_MAX: i32 = 480;
pub const BITS_TEC: i32 = 1;
pub const BITS_TFA: i32 = 1;
pub const N_TEC_TFA_SUBFR: i32 = 16;
pub const L_TEC_TFA_SUBFR16k: i32 = 20;
pub const MAX_TEC_SMOOTHING_DEG: i32 = 6;
pub const N_MAX: i32 = 1200;
pub const N_MAX_TCX: i32 = 1000;
pub const IGF_START_MN: i32 = 164;
pub const IGF_START_MX: i32 = 800;
pub const NUM_DCT_LENGTH: i32 = 24;
pub const NB_DIV: i32 = 2;
pub const L_MDCT_MIN_OVLP_MAX: i32 = 60;
pub const L_PAST_MAX_32k: i32 = 360;
pub const SAFETY_NET: i32 = 0;
pub const MOVING_AVERAGE: i32 = 1;
pub const AUTO_REGRESSIVE: i32 = 2;
pub const INT_FS_12k8: i32 = 12800;
pub const M: i32 = 16;
pub const L_FRAME: i32 = 256;
pub const NB_SUBFR: i32 = 4;
pub const L_SUBFR: i32 = 64;
pub const L_EXC_MEM: i32 = 320;
pub const L_EXC_MEM_DEC: i32 = 480;
pub const L_EXC: i32 = 641;
pub const L_EXC_DEC: i32 = 865;
pub const OLD_SYNTH_SIZE_DEC: i32 = 1920;
pub const OLD_SYNTH_INTERNAL_DEC: i32 = 1280;
pub const OLD_SYNTH_SIZE_ENC: i32 = 800;
pub const TILT_CODE: f64 = 0.3;
pub const L_SUBFR16k: i32 = 80;
pub const L_HALFR16k: i32 = 160;
pub const L_INTERPOL2: i32 = 16;
pub const L_INTERPOL: i32 = 17;
pub const TILT_FAC: f64 = 0.68;
pub const M16k: i32 = 20;
pub const PIT_SHARP: f64 = 0.85;
pub const PIT_UP_SAMP: i32 = 4;
pub const PIT_L_INTERPOL2: i32 = 16;
pub const PIT_FIR_SIZE2: i32 = 65;
pub const PIT_UP_SAMP6: i32 = 6;
pub const PIT_L_INTERPOL6_2: i32 = 17;
pub const PIT_FIR_SIZE6_2: i32 = 103;
pub const E_MIN: f64 = 0.0035;
pub const STEP_DELTA: f64 = 0.0625;
pub const GAMMA_EV: f64 = 0.92;
pub const FORMANT_SHARPENING_NOISE_THRESHOLD: f64 = 21.0;
pub const BWD_N_BINS_MAX: i32 = 13;
pub const LP_NOISE_THRESH: f64 = 20.0;
pub const L_FILT_UP8k: i32 = 24;
pub const LEN_WIN_SSS: i32 = 120;
pub const L_FILT: i32 = 12;
pub const L_FILT16k: i32 = 15;
pub const L_FILT32k: i32 = 30;
pub const L_FILT48k: i32 = 45;
pub const L_FILT_UP16k: i32 = 12;
pub const L_FILT_UP32k: i32 = 12;
pub const L_FILT_UP48k: i32 = 12;
pub const L_FILT_MAX: i32 = 45;
pub const RS_INV_FAC: i32 = 32768;
pub const CLDFB_NO_CHANNELS_MAX: i32 = 60;
pub const CLDFB_NO_COL_MAX: i32 = 16;
pub const CLDFB_NO_COL_MAX_SWITCH: i32 = 6;
pub const CLDFB_NO_COL_MAX_SWITCH_BFI: i32 = 8;
pub const INV_CLDFB_BANDWIDTH: f64 = 0.00125;
pub const L_FFT: i32 = 256;
pub const LOG2_L_FFT: i32 = 8;
pub const BIN: i32 = 50;
pub const NB_BANDS: i32 = 20;
pub const VOIC_BINS: i32 = 74;
pub const VOIC_BAND: i32 = 17;
pub const VOIC_BINS_8k: i32 = 115;
pub const VOIC_BAND_8k: i32 = 17;
pub const M_ALPHA: f64 = 0.9;
pub const M_GAMMA: f64 = 0.99;
pub const THR_CORR: i32 = 56;
pub const L_LP: i32 = 320;
pub const L_LP_16k: i32 = 400;
pub const L_LP_AMR_WB: i32 = 384;
pub const GRID50_POINTS: i32 = 51;
pub const GRID40_POINTS: i32 = 41;
pub const GRID100_POINTS: i32 = 100;
pub const PIT_MIN: i32 = 34;
pub const PIT_MAX: i32 = 231;
pub const PIT_MIN_EXTEND: i32 = 20;
pub const PIT_MIN_DOUBLEEXTEND: i32 = 17;
pub const OPL_DECIM: i32 = 2;
pub const L_INTERPOL1: i32 = 4;
pub const FIR_SIZE1: i32 = 17;
pub const PIT_MIN_SHORTER: i32 = 29;
pub const PIT_MIN_12k8: i32 = 29;
pub const PIT_FR2_12k8: i32 = 121;
pub const PIT_FR1_12k8: i32 = 154;
pub const PIT_MAX_12k8: i32 = 231;
pub const PIT_FR1_8b_12k8: i32 = 82;
pub const PIT_MIN_16k: i32 = 36;
pub const PIT_FR2_16k: i32 = 36;
pub const PIT_FR1_16k: i32 = 165;
pub const PIT_FR1_8b_16k: i32 = 165;
pub const PIT_MIN_25k6: i32 = 58;
pub const PIT_FR2_25k6: i32 = 58;
pub const PIT_FR1_25k6: i32 = 164;
pub const PIT_MAX_25k6: i32 = 463;
pub const PIT_FR1_8b_25k6: i32 = 164;
pub const PIT_MIN_32k: i32 = 72;
pub const PIT_FR2_32k: i32 = 72;
pub const PIT_FR1_32k: i32 = 75;
pub const PIT_MAX_32k: i32 = 577;
pub const PIT_FR1_8b_32k: i32 = 75;
pub const PIT_MAX_MAX: i32 = 577;
pub const PIT_FR1_8b: i32 = 92;
pub const PIT_FR2_9b: i32 = 128;
pub const PIT_FR1_9b: i32 = 160;
pub const PIT_FR1_EXTEND_8b: i32 = 64;
pub const PIT_FR2_EXTEND_9b: i32 = 116;
pub const PIT_FR1_EXTEND_9b: i32 = 128;
pub const PIT_FR1_DOUBLEEXTEND_8b: i32 = 58;
pub const PIT_FR2_DOUBLEEXTEND_9b: i32 = 112;
pub const PIT_FR1_DOUBLEEXTEND_9b: i32 = 124;
pub const LOW_PASS: i32 = 0;
pub const FULL_BAND: i32 = 1;
pub const NORMAL_OPERATION: i32 = 2;
pub const NB_TRACK_FCB_2T: i32 = 2;
pub const NB_POS_FCB_2T: i32 = 32;
pub const NB_TRACK_FCB_4T: i32 = 4;
pub const NB_POS_FCB_4T: i32 = 16;
pub const NB_PULSE_MAX: i32 = 36;
pub const NPMAXPT: i32 = 9;
pub const MAX_IDX_LEN: i32 = 9;
pub const GAIN_PRED_ORDER: i32 = 4;
pub const MEAN_ENER: i32 = 30;
pub const DTX_HIST_SIZE: i32 = 8;
pub const CNG_ISF_FACT: f64 = 0.9;
pub const STEP_AMR_WB_SID: f64 = 2.625;
pub const HO_HIST_SIZE: i32 = 8;
pub const NUM_ENV_CNG: i32 = 20;
pub const BUF_L_NRG: f64 = 0.7;
pub const BUF_H_NRG: f64 = 1.03;
pub const BUF_DEC_RATE: i32 = 25;
pub const STEP_SID: f64 = 5.25;
pub const MIN_ACT_CNG_UPD: i32 = 20;
pub const FIXED_SID_RATE: i32 = 8;
pub const TOTALNOISE_HIST_SIZE: i32 = 4;
pub const UNKNOWN_NOISE: i32 = 0;
pub const SILENCE: i32 = 1;
pub const CLDFBVAD_NB_ID: i32 = 1;
pub const CLDFBVAD_WB_ID: i32 = 2;
pub const CLDFBVAD_SWB_ID: i32 = 3;
pub const CLDFBVAD_FB_ID: i32 = 4;
pub const SP_CENTER_NUM: i32 = 4;
pub const TONA_NUM: i32 = 3;
pub const PRE_SNR_NUM: i32 = 32;
pub const POWER_NUM: i32 = 56;
pub const PRE_SPEC_DIF_NUM: i32 = 56;
pub const MAX_SUBBAND_NUM: i32 = 12;
pub const BG_ENG_NUM: i32 = 12;
pub const MIN_AMP_ID: i32 = 5;
pub const MAX_AMP_ID: i32 = 64;
pub const SPEC_AMP_NUM: i32 = 60;
pub const STABLE_NUM: i32 = 4;
pub const SFM_NUM: i32 = 3;
pub const START_NG: i32 = 5;
pub const FULL_NG: i32 = 10;
pub const ISP_SMOOTHING_QUANT_A1: f64 = 0.9;
pub const FFT_15PONIT_WNK1: f64 = 0.55901699;
pub const FFT_15PONIT_WNK2: f64 = 0.95105652;
pub const FFT_15PONIT_WNK3: f64 = 0.58778525;
pub const FFT_15PONIT_WNK4: f64 = 0.8660254;
pub const FFT_15PONIT_WNK5: f64 = 0.25;
pub const FEC_BITS_CLS: i32 = 2;
pub const FEC_BITS_ENR: i32 = 5;
pub const FEC_ENR_STEP: f64 = 3.0;
pub const FEC_ENR_QLIMIT: i32 = 31;
pub const FEC_BITS_POS: i32 = 8;
pub const FRAME_COUNT_HF_SYNTH: i32 = 100;
pub const AUDIO_COUNTER_INI: i32 = 200;
pub const AUDIO_COUNTER_STEP: i32 = 10;
pub const AUDIO_COUNTER_MAX: i32 = 1000;
pub const BWD_TOTAL_WIDTH: i32 = 320;
pub const BWD_COUNT_MAX: i32 = 100;
pub const PREEMPH_FAC: f64 = 0.68;
pub const PREEMPH_FAC_16k: f64 = 0.72;
pub const PREEMPH_FAC_SWB: f64 = 0.9;
pub const GAMMA1: f64 = 0.92;
pub const GAMMA16k: f64 = 0.94;
pub const FORMANT_SHARPENING_G1: f64 = 0.75;
pub const FORMANT_SHARPENING_G2: f64 = 0.9;
pub const FORMANT_SHARPENING_G1_16k: f64 = 0.8;
pub const FORMANT_SHARPENING_G2_16k: f64 = 0.92;
pub const FSCALE_DENOM: i32 = 512;
pub const ACELP_FIXED_CDK_NB: i32 = 41;
pub const L_FIR: i32 = 31;
pub const NB_SUBFR16k: i32 = 5;
pub const INT_FS_16k: i32 = 16000;
pub const PIT16k_MIN: i32 = 42;
pub const PIT16k_MAX: i32 = 289;
pub const PIT16k_FR2_TC0_2SUBFR: i32 = 83;
pub const PIT16k_MIN_EXTEND: i32 = 21;
pub const PIT16k_FR2_EXTEND_9b: i32 = 88;
pub const PIT16k_FR1_EXTEND_9b: i32 = 130;
pub const PIT16k_FR2_EXTEND_10b: i32 = 264;
pub const WIDTH_BAND: i32 = 8;
pub const G_AVQ_MIN: f64 = 0.8;
pub const G_AVQ_MAX: f64 = 96.0;
pub const FAC_PRE_AVQ: f64 = 0.3;
pub const G_AVQ_MIN_INACT: f64 = 0.7;
pub const G_AVQ_MAX_INACT: f64 = 4.1;
pub const G_AVQ_MIN_INACT_48k: f64 = 0.35;
pub const G_AVQ_MAX_INACT_48k: f64 = 2.8;
pub const G_AVQ_MIN_INACT_64k: f64 = 0.25;
pub const G_AVQ_MAX_INACT_64k: f64 = 1.5;
pub const G_AVQ_BITS: i32 = 6;
pub const G_AVQ_DELTA: f64 = 1.511111111111111;
pub const G_AVQ_DELTA_INACT: f64 = 0.05396825396825396;
pub const G_PITCH_MIN: f64 = 0.0;
pub const G_PITCH_MAX: f64 = 1.22;
pub const G_CODE_MIN: f64 = 0.02;
pub const G_CODE_MAX: f64 = 5.0;
pub const G_PITCH_MIN_TC192: f64 = 0.1;
pub const G_PITCH_MAX_TC192: f64 = 0.95;
pub const G_CODE_MIN_TC192: f64 = 0.6;
pub const G_CODE_MAX_TC192: f64 = 41.0;
pub const NOISE_FILL_RANGES: i32 = 1;
pub const NBITS_NOISE_FILL_LEVEL: i32 = 3;
pub const MIN_NOISE_FILLING_HOLE: i32 = 8;
pub const FDNS_NPTS: i32 = 64;
pub const AVG_TCX20_LSF_BITS: i32 = 40;
pub const AVG_TCX10_LSF_BITS: i32 = 59;
pub const LTPSIZE: i32 = 3;
pub const TCXLTP_DELAY_NS: i32 = 250000;
pub const TCXLTP_LTP_ORDER: i32 = 24;
pub const TCX_RES_Q_BITS_GAIN: i32 = 3;
pub const LPC_SHAPED_ARI_MAX_RATE: i32 = 9600;
pub const N_MAX_ARI: i32 = 800;
pub const R1_48: i32 = 690;
pub const R2_48: i32 = 420;
pub const R1_16: i32 = 230;
pub const R2_16: i32 = 140;
pub const R1_25: i32 = 368;
pub const R2_25: i32 = 224;
pub const TNS_MAX_NUM_OF_FILTERS: i32 = 2;
pub const TNS_MAX_FILTER_ORDER: i32 = 8;
pub const ITF_MAX_FILTER_ORDER: i32 = 16;
pub const NPRM_TNS: i32 = 24;
pub const NPRM_RESQ: i32 = 100;
pub const NPRM_CTX_HM: i32 = 3;
pub const NPRM_DIV: i32 = 729;
pub const DEC_NPRM_DIV: i32 = 729;
pub const BITBUFSIZE: i32 = 2560;
pub const TNS_COEF_RES: i32 = 4;
pub const INDEX_SHIFT: i32 = 8;
pub const GENERIC_MA_LIMIT: i32 = 9600;
pub const NC16k: i32 = 10;
pub const NO_ITER: i32 = 4;
pub const SPC: f64 = 0.0234952;
pub const SPC_plus: f64 = 0.0235186952;
pub const ALPHA_SQ: f64 = 0.006332573977646112;
pub const NC: i32 = 8;
pub const LSF_GAP: f64 = 50.0;
pub const LSF_BITS_CNG: i32 = 29;
pub const MU_MA: f64 = 0.3333333333333333;
pub const ISF_GAP: i32 = 50;
pub const LSF_GAP_MID: f64 = 80.0;
pub const MODE1_LSF_GAP: f64 = 70.0;
pub const PREFERSFNET: f64 = 1.05;
pub const SFNETLOWLIMIT_WB: i32 = 35000;
pub const SFNETLOWLIMIT_NB: i32 = 38000;
pub const LSFMBEST: i32 = 2;
pub const STREAKLEN: i32 = 3;
pub const STREAKMULT: f64 = 0.8;
pub const LSFMBEST_MAX: i32 = 16;
pub const TCXLPC_NUMSTAGES: i32 = 3;
pub const TCXLPC_NUMBITS: i32 = 13;
pub const TCXLPC_IND_NUMSTAGES: i32 = 1;
pub const TCXLPC_IND_NUMBITS: i32 = 2;
pub const TCXLPC_LSF_GAP: f64 = 80.0;
pub const MAX_VQ_STAGES: i32 = 4;
pub const MAX_VQ_STAGES_USED: i32 = 9;
pub const MIDLSF_NBITS: i32 = 5;
pub const ENDLSF_NBITS: i32 = 31;
pub const LEN_INDICE: i32 = 15;
pub const LATTICE_DIM: i32 = 8;
pub const NO_LEADERS: i32 = 49;
pub const MAX_NO_BR_LVQ: i32 = 28;
pub const MAX_NO_SCALES: i32 = 3;
pub const MAX_NO_VALS: i32 = 4;
pub const WB_LIMIT_LSF: i32 = 6350;
pub const CNG_LVQ_MODES: i32 = 16;
pub const MAX_NO_MODES: i32 = 128;
pub const START_CNG: i32 = 112;
pub const MAX_NO_MODES_p: i32 = 145;
pub const NO_CODING_MODES: i32 = 6;
pub const LVQ_COD_MODES: i32 = 18;
pub const N_STAGE_VQ: i32 = 8;
pub const N_DIM: i32 = 2;
pub const NUM_SUBSET: i32 = 8;
pub const OP_LOOP_THR_HVO: f64 = 3784536.3;
pub const NUM_STATE: i32 = 16;
pub const N_STAGE: i32 = 16;
pub const SIZE_BK1: i32 = 256;
pub const SIZE_BK2: i32 = 256;
pub const SIZE_BK21: i32 = 64;
pub const SIZE_BK22: i32 = 128;
pub const SIZE_BK23: i32 = 128;
pub const SIZE_BK24: i32 = 32;
pub const SIZE_BK25: i32 = 32;
pub const SIZE_BK21_36b: i32 = 128;
pub const SIZE_BK22_36b: i32 = 128;
pub const SIZE_BK23_36b: i32 = 64;
pub const NB_QUA_GAIN5B: i32 = 32;
pub const NB_QUA_GAIN6B: i32 = 64;
pub const NB_QUA_GAIN7B: i32 = 128;
pub const NSUBBLOCKS: i32 = 8;
pub const MAX_TD_DELAY: i32 = 16;
pub const NO_TCX: i32 = 0;
pub const TCX_20: i32 = 1;
pub const TCX_10: i32 = 2;
pub const TCX_5: i32 = 3;
pub const TRANSITION_OVERLAP: i32 = -2;
pub const RECTANGULAR_OVERLAP: i32 = -1;
pub const FULL_OVERLAP: i32 = 0;
pub const NOT_SUPPORTED: i32 = 1;
pub const MIN_OVERLAP: i32 = 2;
pub const HALF_OVERLAP: i32 = 3;
pub const ALDO_WINDOW: i32 = 4;
pub const SWITCH_OVERLAP_8k: i32 = 15;
pub const SWITCH_GAP_LENGTH_8k: i32 = 50;
pub const UNVOICED_CLAS: i32 = 0;
pub const UNVOICED_TRANSITION: i32 = 1;
pub const VOICED_TRANSITION: i32 = 2;
pub const VOICED_CLAS: i32 = 3;
pub const ONSET: i32 = 4;
pub const SIN_ONSET: i32 = 5;
pub const INACTIVE_CLAS: i32 = 6;
pub const AUDIO_CLAS: i32 = 7;
pub const BETA_FEC: f64 = 0.75;
pub const STAB_FAC_LIMIT: f64 = 0.25;
pub const MODE1_L_FIR_FER: i32 = 5;
pub const L_FIR_FER: i32 = 3;
pub const L_FIR_FER2: i32 = 11;
pub const MAX_UPD_CNT: i32 = 5;
pub const ALPHA_S: f64 = 0.6;
pub const ALPHA_V: f64 = 1.0;
pub const ALPHA_VT: f64 = 0.4;
pub const ALPHA_UT: f64 = 0.8;
pub const ALPHA_U: f64 = 0.4;
pub const ALPHA_UU: f64 = 1.0;
pub const AGC: f64 = 0.98;
pub const PLC_MIN_CNG_LEV: f64 = 0.01;
pub const PLC_MIN_STAT_BUFF_SIZE: i32 = 50;
pub const G_LPC_RECOVERY_BITS: i32 = 1;
pub const L_IMPULSE: i32 = 17;
pub const L_IMPULSE2: i32 = 8;
pub const NUM_IMPULSE: i32 = 8;
pub const N_GAIN_CODE_TC: i32 = 8;
pub const N_GAIN_TC: i32 = 8;
pub const TC_0_0: i32 = 1;
pub const TC_0_64: i32 = 2;
pub const TC_0_128: i32 = 3;
pub const TC_0_192: i32 = 4;
pub const NB_LDQ3: i32 = 9;
pub const NB_SPHERE: i32 = 32;
pub const NB_LEADER: i32 = 36;
pub const NB_LDQ4: i32 = 27;
pub const FAC_LOG2: f64 = 3.321928095;
pub const NSV_MAX: i32 = 34;
pub const A_THRES_SHIFT: i32 = 2;
pub const A_THRES: i32 = 4;
pub const VAL_ESC: i32 = 16;
pub const NBITS_CONTEXT: i32 = 8;
pub const NBITS_RATEQ: i32 = 2;
pub const cbitsnew: i32 = 16;
pub const stat_bitsnew: i32 = 14;
pub const kLtpHmFractionalResolution: i32 = 7;
pub const kLtpHmFlag: i32 = 256;
pub const MAX_LENGTH: i32 = 960;
pub const MAX_PULSES: i32 = 560;
pub const NORMAL_HQ_CORE: i32 = 0;
pub const LOW_RATE_HQ_CORE: i32 = 1;
pub const LOW_RATE_HQ_CORE_TRAN: i32 = 2;
pub const NORM_MDCT_FACTOR: i32 = 160;
pub const BANDS_MAX: i32 = 32;
pub const MAX_GQLEVS: i32 = 32;
pub const BITS_DE_CMODE: i32 = 1;
pub const BITS_DE_HMODE: i32 = 1;
pub const BITS_DE_8SMODE: i32 = 1;
pub const MAXIMUM_ENERGY_LOWBRATE: i32 = 255;
pub const MINIMUM_ENERGY_LOWBRATE: i32 = -256;
pub const BITS_ABS_ENG: i32 = 7;
pub const ABS_ENG_OFFSET: i32 = 64;
pub const BITS_MAX_DEPTH: i32 = 3;
pub const BITS_DE_8SMODE_N0: i32 = 1;
pub const BITS_DE_8SMODE_N1: i32 = 1;
pub const BITS_DE_8SPOS: i32 = 5;
pub const BITS_DE_FCOMP: i32 = 5;
pub const BITS_DE_LSB: i32 = 1;
pub const DE_OFFSET0: i32 = 46;
pub const DE_OFFSET1: i32 = 32;
pub const DE_LIMIT: i32 = 64;
pub const LRMDCT_BE_OFFSET: i32 = 15;
pub const LRMDCT_BE_LIMIT: i32 = 31;
pub const HQCORE_NB_MIN_RATE: i32 = 7200;
pub const HQCORE_WB_MIN_RATE: i32 = 13200;
pub const HQCORE_SWB_MIN_RATE: i32 = 13200;
pub const LRMDCT_CROSSOVER_POINT: i32 = 16400;
pub const HTH_NORM: i32 = 17;
pub const LTH_NORM: i32 = 13;
pub const OFFSET_NORM: i32 = 3;
pub const STEPSNUM: i32 = 4;
pub const ALLPASSSECTIONS_STEEP: i32 = 3;
pub const INTERP_3_1_MEM_LEN: i32 = 13;
pub const INTERP_3_2_MEM_LEN: i32 = 15;
pub const L_SHB_LAHEAD: i32 = 20;
pub const NUM_SHB_SUBFR: i32 = 16;
pub const LPC_SHB_ORDER: i32 = 10;
pub const LPC_WHTN_ORDER: i32 = 4;
pub const SHB_OVERLAP_LEN: i32 = 20;
pub const QUANT_DIST_INIT: f64 = 10000000000.0;
pub const HIBND_ACB_L_FAC: i32 = 2;
pub const NUM_HILBERTS: i32 = 2;
pub const HILBERT_ORDER1: i32 = 5;
pub const HILBERT_ORDER2: i32 = 4;
pub const HILBERT_MEM_SIZE: i32 = 21;
pub const NUM_BITS_SHB_SubGain: i32 = 6;
pub const NUM_BITS_SHB_FrameGain: i32 = 6;
pub const NUM_BITS_SHB_FrameGain_LBR_WB: i32 = 4;
pub const RECIP_ROOT_EIGHT: f64 = 0.3535534;
pub const LPC_SHB_ORDER_WB: i32 = 6;
pub const LPC_WHTN_ORDER_WB: i32 = 2;
pub const NUM_BITS_WB_LSF: i32 = 8;
pub const LPC_SHB_ORDER_LBR_WB: i32 = 4;
pub const NUM_BITS_LBR_WB_LSF: i32 = 2;
pub const COMP_FIL_ORDER: i32 = 19;
pub const MAX_BIQ_N: i32 = 640;
pub const NUM_SHB_SUBGAINS: i32 = 4;
pub const NUM_BITS_SHB_SUBGAINS: i32 = 5;
pub const NUM_BITS_SHB_FRAMEGAIN: i32 = 5;
pub const NUM_BITS_SHB_ENER_SF: i32 = 6;
pub const NUM_BITS_SHB_RES_GS: i32 = 3;
pub const NUM_BITS_SHB_VF: i32 = 3;
pub const NUM_BITS_SHB_SUBGAINS_RF: i32 = 5;
pub const SHB_GAIN_QLOW: f64 = -1.0;
pub const SHB_GAIN_QDELTA: f64 = 0.15;
pub const NUM_Q_LSF: i32 = 5;
pub const MIRROR_POINT_BITS: i32 = 2;
pub const MIRROR_POINT_Q_CB_SIZE: i32 = 4;
pub const MAX_LSF: f64 = 0.5;
pub const NUM_MAP_LSF: i32 = 5;
pub const NUM_LSF_GRIDS: i32 = 4;
pub const NUM_LSF_GRID_BITS: i32 = 2;
pub const VF_0th_PARAM: f64 = 0.34;
pub const VF_1st_PARAM: f64 = 0.5;
pub const VF_2nd_PARAM: f64 = 0.15999999999999998;
pub const GAMMA0: f64 = 0.65;
pub const GAMMA_SHARP: f64 = 0.15;
pub const SWB_NOISE_MIX_FAC: f64 = 0.15;
pub const SWB_TILT_LOW: f64 = 1.0;
pub const SWB_TILT_HIGH: f64 = 2.0;
pub const SWB_TILT_DELTA: f64 = 1.0;
pub const GAMMA3_PLUS_WB: f64 = 0.65;
pub const GAMMA3_MINUS_WB: f64 = 0.85;
pub const AGC_FAC_WB: f64 = 0.85;
pub const AGC_FAC1_WB: f64 = 0.15000000000000002;
pub const INV_L_SUBFR16k: f64 = 0.0125;
pub const SWB_L_SUBFR: i32 = 160;
pub const FB_L_SUBFR: i32 = 240;
pub const SWB_FENV: i32 = 14;
pub const FB_GAIN_QLOW: f64 = 0.0;
pub const FB_GAIN_QDELTA: f64 = 0.03125;
pub const FB_MAX_GAIN_VAR: f64 = 0.5;
pub const NUM_BITS_FB_FRAMEGAIN: i32 = 4;
pub const FB_BAND_BEGIN: i32 = 620;
pub const FB_BAND_END: i32 = 800;
pub const FB_BAND_WIDTH: i32 = 180;
pub const N_CAND: i32 = 2;
pub const N_CB11: i32 = 32;
pub const N_CB1ST: i32 = 128;
pub const N_CB2ND: i32 = 64;
pub const N_CB3RD: i32 = 32;
pub const N_CB4TH: i32 = 64;
pub const DIM1ST: i32 = 3;
pub const DIM2ND: i32 = 4;
pub const DIM3RD: i32 = 3;
pub const DIM4TH: i32 = 4;
pub const DIM11: i32 = 7;
pub const DIM12: i32 = 7;
pub const N_CAND_TR: i32 = 3;
pub const N_CB_TR1: i32 = 128;
pub const N_CB_TR2: i32 = 64;
pub const DIM_TR1: i32 = 2;
pub const DIM_TR2: i32 = 2;
pub const SWB_FENV_TRANS: i32 = 4;
pub const SWB_TENV: i32 = 4;
pub const NUM_SHARP: i32 = 9;
pub const SHARP_WIDTH: i32 = 32;
pub const HARMONIC: i32 = 3;
pub const NORMAL: i32 = 2;
pub const TRANSIENT: i32 = 1;
pub const NOISE: i32 = 0;
pub const NSV_OVERLAP: i32 = 2;
pub const N_BANDS_BWE_HR: i32 = 4;
pub const N_BANDS_TRANS_BWE_HR: i32 = 2;
pub const END_FREQ_BWE: i32 = 14400;
pub const END_FREQ_BWE_FULL: i32 = 16000;
pub const END_FREQ_BWE_FULL_FB: i32 = 20000;
pub const NBITS_GLOB_GAIN_BWE_HR: i32 = 5;
pub const MIN_GLOB_GAIN_BWE_HR: i32 = 3;
pub const MAX_GLOB_GAIN_BWE_HR: i32 = 500;
pub const NBITS_ENVELOPE_BWE_HR1: i32 = 6;
pub const NBITS_ENVELOPE_BWE_HR2: i32 = 5;
pub const NBITS_ENVELOPE_BWE_HR_TR: i32 = 4;
pub const NUM_ENVLOPE_CODE_HR1: i32 = 64;
pub const NUM_ENVLOPE_CODE_HR2: i32 = 32;
pub const NUM_ENVLOPE_CODE_HR_TR: i32 = 16;
pub const NUM_ENVLOPE_CODE_HR_TR2: i32 = 8;
pub const NUM_NONTRANS_START_FREQ_COEF: i32 = 304;
pub const NUM_NONTRANS_END_FREQ_COEF: i32 = 576;
pub const NUM_TRANS_END_FREQ_COEF_EFF: i32 = 140;
pub const WIDTH_NONTRANS_FREQ_COEF: i32 = 68;
pub const NBITS_THRESH_BWE_HR: i32 = 400;
pub const NBITS_HF_GAIN_BWE_HR: i32 = 2;
pub const BWE_HR_TRANS_EN_LIMIT1: f64 = 0.1;
pub const BWE_HR_TRANS_EN_LIMIT2: f64 = 0.3;
pub const BWE_HR_TRANS_EN_LIMIT3: f64 = 0.5;
pub const BWE_HR_NONTRANS_EN_LIMIT1: f64 = 0.5;
pub const BWE_HR_NONTRANS_EN_LIMIT2: f64 = 1.2;
pub const BWE_HR_NONTRANS_EN_LIMIT3: f64 = 0.8;
pub const OUTMAX_INV: f64 = 0.000030517578125;
pub const OUTMAX_SQ: f64 = 1073741824.0;
pub const OUTMAX_SQ_INV: f64 = 0.0000000009313225746154785;
pub const DELTA: f64 = 0.00000000000000000001;
pub const CLDFB_SCALING: f64 = 1.5;
pub const FFTLEN: i32 = 640;
pub const FFTLEN2: i32 = 320;
pub const CORECLDFBLEN: i32 = 20;
pub const TOTCLDFBLEN: i32 = 40;
pub const FFTCLDFBLEN: i32 = 340;
pub const PERIODOGLEN: i32 = 318;
pub const NPART: i32 = 24;
pub const NPARTCLDFB: i32 = 10;
pub const NPART_SHAPING: i32 = 62;
pub const MSSUBFRLEN: i32 = 12;
pub const MSNUMSUBFR: i32 = 6;
pub const MSBUFLEN: i32 = 5;
pub const MSALPHACORALPHA: f64 = 0.7;
pub const MSALPHACORMAX: f64 = 0.3;
pub const MSALPHAMAX: f64 = 0.96;
pub const MSALPHAHATMIN: f64 = 0.05;
pub const MSQEQINVMAX: f64 = 0.2;
pub const MSAV: f64 = 2.12;
pub const MSBETAMAX: f64 = 0.8;
pub const MSSNREXP: f64 = -0.3125;
pub const NB_LAST_BAND_SCALE: f64 = 0.8;
pub const SWB_13k2_LAST_BAND_SCALE: f64 = 0.8;
pub const CNG_LOG_SCALING: f64 = 512.0;
pub const M_MAX: i32 = 32;
pub const N_GAIN_MIN: i32 = 4;
pub const N_GAIN_MAX: i32 = 17;
pub const CHEAP_NORM_SIZE: i32 = 161;
pub const CNA_MAX_BRATE: i32 = 13200;
pub const NBPSF_PIT_MAX: i32 = 290;
pub const L_TRACK_HIST: i32 = 10;
pub const THRESCRIT: f64 = 0.5;
pub const AGC_FAC: f64 = 0.9875;
pub const AGC_FAC1: f64 = 0.012499999999999956;
pub const LONG_H_ST: i32 = 20;
pub const POST_G1: f64 = 0.75;
pub const POST_G2: f64 = 0.7;
pub const GAMMA1_PST: f64 = 0.7;
pub const GAMMA2_PST: f64 = 0.55;
pub const GAMMA3_PLUS: f64 = 0.2;
pub const GAMMA3_MINUS: f64 = 0.9;
pub const F_UP_PST: i32 = 8;
pub const LH2_S: i32 = 4;
pub const LH2_L: i32 = 16;
pub const MIN_GPLT: f64 = 0.6666666666666666;
pub const LH_UP_S: i32 = 2;
pub const LH_UP_L: i32 = 8;
pub const LH2_L_P1: i32 = 17;
pub const DECMEM_RES2: i32 = 299;
pub const SIZ_RES2: i32 = 363;
pub const SIZ_Y_UP: i32 = 455;
pub const SIZ_TAB_HUP_L: i32 = 112;
pub const SIZ_TAB_HUP_S: i32 = 28;
pub const POST_G1_MIN: f64 = 0.65;
pub const POST_G2_MIN: f64 = 0.55;
pub const POST_G1_NOIS: f64 = 0.15;
pub const POST_G2_NOIS: f64 = 0.1;
pub const BG1: f64 = -0.01;
pub const BG2: f64 = -0.05;
pub const CG1: f64 = 0.9;
pub const CG2: f64 = 1.45;
pub const C_LP_NOISE: f64 = 0.025;
pub const K_LP_NOISE: f64 = 15.0;
pub const LP_NOISE_THR: f64 = 25.0;
pub const NB_BFI_THR: i32 = 2;
pub const MAX_LT: i32 = 40;
pub const INV_MAX_LT: f64 = 0.025;
pub const TH_0_MIN: f64 = 2.5;
pub const TH_1_MIN: f64 = 1.875;
pub const TH_2_MIN: f64 = 1.5625;
pub const TH_3_MIN: f64 = 1.3125;
pub const N_FEATURES: i32 = 12;
pub const N_MIXTURES: i32 = 6;
pub const M_LSP_SPMUS: i32 = 6;
pub const NB_BANDS_SPMUS: i32 = 15;
pub const START_BAND_SPMUS: i32 = 2;
pub const N_OLD_BIN_E: i32 = 42;
pub const LOWEST_FBIN: i32 = 3;
pub const HIGHEST_FBIN: i32 = 70;
pub const HANG_LEN_INIT: i32 = 8;
pub const HANG_LEN: i32 = 8;
pub const BUF_LEN: i32 = 60;
pub const L_OVR: i32 = 8;
pub const TH_0_MIN2: f64 = 1.875;
pub const TH_1_MIN2: f64 = 1.25;
pub const TH_2_MIN2: f64 = 0.9375;
pub const TH_3_MIN2: f64 = 0.625;
pub const DCT_L_POST: i32 = 640;
pub const OFFSET2: i32 = 192;
pub const VOIC_BINS_HR: i32 = 640;
pub const BIN_16kdct: f64 = 10.0;
pub const NB_LIMIT_BAND: i32 = 16;
pub const MBANDS_GN_LD: i32 = 20;
pub const NOISE_LEVEL_SP0: i32 = 8;
pub const NOISE_LEVEL_SP1a: i32 = 9;
pub const NOISE_LEVEL_SP1: i32 = 10;
pub const NOISE_LEVEL_SP2: i32 = 12;
pub const NOISE_LEVEL_SP3: i32 = 14;
pub const MAX_DYNAMIC: i32 = 82;
pub const MIN_DYNAMIC: i32 = 50;
pub const DYNAMIC_RANGE: i32 = 32;
pub const MAX_GSC_NF_BITS: i32 = 3;
pub const GSC_NF_STEPS: i32 = 8;
pub const CRIT_NOIS_BAND: i32 = 23;
pub const SSF: i32 = 32;
pub const NB_SSF: i32 = 8;
pub const MBANDS_GN: i32 = 16;
pub const BAND1k2: i32 = 3;
pub const MBANDS_LOC: i32 = 15;
pub const BIN_SIZE: f64 = 25.0;
pub const SWNB_SUBFR: i32 = 1;
pub const VAR_COR_LEN: i32 = 10;
pub const CFREQ_BITRATE: i32 = 11600;
pub const LT_UV_THR: i32 = 100;
pub const LT_UV_THRMID: i32 = 70;
pub const PIT_EXC_L_SUBFR: i32 = 256;
pub const LOCAL_CT: i32 = 2;
pub const SWITCH_MAX_GAP: i32 = 360;
pub const HQ_NORMAL: i32 = 0;
pub const HQ_TRANSIENT: i32 = 1;
pub const HQ_HARMONIC: i32 = 2;
pub const HQ_HVQ: i32 = 3;
pub const HQ_GEN_SWB: i32 = 4;
pub const HQ_GEN_FB: i32 = 5;
pub const PREECHO_SMOOTH_LEN: i32 = 20;
pub const MAX16B: i32 = 32767;
pub const MIN16B: i32 = -32768;
pub const EPSILON: f64 = 0.000000000000001;
pub const MAX_SEGMENT_LENGTH: i32 = 480;
pub const NUM_TIME_SWITCHING_BLOCKS: i32 = 4;
pub const NUM_MAP_BANDS: i32 = 20;
pub const NUM_MAP_BANDS_HQ_24k4: i32 = 17;
pub const NUM_MAP_BANDS_HQ_32k: i32 = 18;
pub const FREQ_LENGTH: i32 = 800;
pub const STOP_BAND: i32 = 800;
pub const SFM_G1: i32 = 16;
pub const SFM_G1G2: i32 = 24;
pub const SFM_N_NB: i32 = 18;
pub const SFM_N_WB: i32 = 26;
pub const SFM_N_STA_8k: i32 = 27;
pub const SFM_N_STA_10k: i32 = 30;
pub const SFM_N_ENV_STAB: i32 = 27;
pub const SFM_N_ENV_STAB_WB: i32 = 26;
pub const SFM_N_HARMONIC: i32 = 39;
pub const SFM_N: i32 = 36;
pub const L_HQ_WB_BWE: i32 = 20;
pub const N_INTL_GRP_16: i32 = 2;
pub const N_INTL_GRP_32: i32 = 2;
pub const N_INTL_GRP_48: i32 = 3;
pub const SFM_N_SWB: i32 = 39;
pub const SFM_N_HARM: i32 = 31;
pub const SFM_N_HARM_FB: i32 = 33;
pub const NB_SFM: i32 = 44;
pub const NB_SFM_MAX: i32 = 58;
pub const WID_G1: i32 = 8;
pub const WID_G2: i32 = 16;
pub const WID_G3: i32 = 24;
pub const WID_GX: i32 = 32;
pub const NUMC_N: i32 = 544;
pub const HQ_MAX_BAND_LEN: i32 = 96;
pub const QBIT_MAX2: i32 = 9;
pub const FLAGN_BITS: i32 = 1;
pub const GAIN0_BITS: i32 = 5;
pub const GAINI_BITS: i32 = 5;
pub const FLAGS_BITS: i32 = 2;
pub const FLAGS_BITS_FB: i32 = 3;
pub const NORM0_BITS: i32 = 5;
pub const NORMI_BITS: i32 = 5;
pub const NUMNRMIBITS_SWB_STA_8k: i32 = 130;
pub const NUMNRMIBITS_SWB_STA_10k: i32 = 145;
pub const NUMNRMIBITS_SWB_HARMONIC: i32 = 185;
pub const NUMNRMIBITS_SWB: i32 = 190;
pub const NUMNRMIBITS: i32 = 215;
pub const NUMNRMIBITS_WB: i32 = 125;
pub const NOHUFCODE: i32 = 0;
pub const HUFCODE: i32 = 1;
pub const HUFF_THR: i32 = 10;
pub const NOSUPERPOSITION: i32 = 40;
pub const MAXVALUEOFFIRSTGAIN: f64 = 2.5;
pub const MINVALUEOFFIRSTGAIN: f64 = -2.5;
pub const NOOFGAINBITS1: i32 = 6;
pub const AUDIODELAYBITS: i32 = 6;
pub const MAX_P_ATT: i32 = 40;
pub const NB_G: i32 = 4;
pub const MAX_GAIN_BITS: i32 = 5;
pub const ENV_ADJ_START: i32 = 6;
pub const ENV_ADJ_INCL: i32 = 5;
pub const ENV_SMOOTH_FAC: f64 = 0.1;
pub const L_STAB_TBL: i32 = 10;
pub const NUM_ENV_STAB_PLC_STATES: i32 = 2;
pub const ATT_LIM_HANGOVER: i32 = 150;
pub const DELTA_TH: f64 = 5.0;
pub const ENERGY_TH: f64 = 100.0;
pub const ENERGY_LT_BETA: f64 = 0.93;
pub const START_EXC: i32 = 60;
pub const L_HARMONIC_EXC: i32 = 202;
pub const HQ_GENERIC_OFFSET: i32 = 2;
pub const HQ_GENERIC_END_FREQ: i32 = 560;
pub const HQ_GENERIC_END_FREQ_14P2KHZ: i32 = 568;
pub const HQ_GENERIC_END_FREQ_16P0KHZ: i32 = 640;
pub const HQ_GENERIC_FOFFSET_24K4: i32 = 80;
pub const HQ_GENERIC_FOFFSET_32K: i32 = 144;
pub const HQ_GENERIC_SWB_NBITS: i32 = 31;
pub const HQ_GENERIC_SWB_NBITS2: i32 = 30;
pub const HQ_GENERIC_FB_NBITS: i32 = 5;
pub const HQ_GENERIC_ST_FREQ: i32 = 224;
pub const HQ_GENERIC_LOW0: i32 = 80;
pub const HQ_GENERIC_HIGH0: i32 = 240;
pub const HQ_GENERIC_HIGH1: i32 = 368;
pub const HQ_GENERIC_HIGH2: i32 = 496;
pub const HQ_GENERIC_LEN0: i32 = 128;
pub const HQ_GENERIC_NVQIDX: i32 = 6;
pub const HQ_GENERIC_EXC0: i32 = 0;
pub const HQ_GENERIC_EXC1: i32 = 1;
pub const HQ_GENERIC_SP_EXC: i32 = 2;
pub const LF_EMP_FAC: f64 = 1.2;
pub const DIM_FB: i32 = 3;
pub const HQ_FB_FENV: i32 = 17;
pub const N_CB_FB: i32 = 32;
pub const HVQ_THRES_BIN_24k: i32 = 224;
pub const HVQ_THRES_SFM_24k: i32 = 22;
pub const HVQ_THRES_BIN_32k: i32 = 320;
pub const HVQ_THRES_SFM_32k: i32 = 25;
pub const HVQ_MIN_PEAKS: i32 = 2;
pub const HVQ_MAX_PEAKS_32k: i32 = 23;
pub const HVQ_MAX_PEAKS_24k: i32 = 17;
pub const HVQ_MAX_PEAKS_24k_CLAS: i32 = 20;
pub const HVQ_MAX_PEAKS: i32 = 24;
pub const HVQ_NUM_SFM_24k: i32 = 16;
pub const HVQ_NUM_SFM_32k: i32 = 13;
pub const HVQ_E_PEAK_SMOOTH_FAC: f64 = 0.3;
pub const HVQ_MAX_RATE: i32 = 32000;
pub const NUMNRMIBITS_SWB_HVQ_24k: i32 = 35;
pub const NUMNRMIBITS_SWB_HVQ_32k: i32 = 25;
pub const MAX_PVQ_BANDS: i32 = 8;
pub const HVQ_MAX_PVQ_WORDS: i32 = 48;
pub const HVQ_MAX_POS_WORDS: i32 = 40;
pub const HVQ_PVQ_COEFS: i32 = 24;
pub const HVQ_BAND_MIN_PULSES: i32 = 2;
pub const HVQ_BAND_MAX_BITS_24k: i32 = 80;
pub const HVQ_BAND_MAX_BITS_32k: i32 = 95;
pub const HVQ_NEW_BAND_BIT_THR: i32 = 30;
pub const HVQ_NF_GROUPS: i32 = 2;
pub const HVQ_NF_WEIGHT1: f64 = 0.9578;
pub const HVQ_NF_WEIGHT2: f64 = 0.6472;
pub const HVQ_PE_WEIGHT1: f64 = 0.42237;
pub const HVQ_PE_WEIGHT2: f64 = 0.80285;
pub const HVQ_THR_POW: f64 = 0.88;
pub const HVQ_SHARP_THRES: i32 = 9;
pub const HVQ_PA_FAC: f64 = 0.7071;
pub const HVQ_PA_PEAKS_SHARP1: i32 = 9;
pub const HVQ_PA_PEAKS_SHARP2: i32 = 3;
pub const HVQ_PA_PEAKS_SHARP3: i32 = 2;
pub const HVQ_PA_SHARP_THRES2: f64 = 16.0;
pub const HVQ_PA_SHARP_THRES3: f64 = 12.0;
pub const HVQ_BW: i32 = 32;
pub const HVQ_NSUB_32k: i32 = 10;
pub const HVQ_NSUB_24k: i32 = 7;
pub const HVQ_BWE_NOISE_BANDS: i32 = 2;
pub const HVQ_BWE_WEIGHT1: f64 = 0.95;
pub const HVQ_BWE_WEIGHT2: f64 = 0.2;
pub const HVQ_NFPE_FACTOR: f64 = 6.4;
pub const HVQ_LB_NFPE_FACTOR: f64 = 3.2;
pub const HVQ_VQ_DIM: i32 = 5;
pub const HVQ_PVQ_GAIN_BITS: i32 = 5;
pub const HVQ_NUM_CLASS: i32 = 4;
pub const HVQ_CB_SIZE: i32 = 256;
pub const NUM_PG_HUFFLEN: i32 = 9;
pub const MAX_PG_HUFFLEN: i32 = 12;
pub const HVQ_CP_HUFF_OFFSET: i32 = 3;
pub const HVQ_CP_HUFF_MAX: i32 = 51;
pub const HVQ_CP_HUFF_MAX_CODE: i32 = 13;
pub const HVQ_CP_HUFF_NUM_LEN: i32 = 11;
pub const HVQ_CP_L2_MAX: i32 = 64;
pub const HVQ_CP_L1_LEN: i32 = 5;
pub const HVQ_CP_MAP_LEN: i32 = 8;
pub const HVQ_CP_MAP_IDX_LEN: i32 = 3;
pub const HVQ_CP_DELTA: i32 = 0;
pub const HVQ_CP_SPARSE: i32 = 1;
pub const MAX_SPLITS: i32 = 10;
pub const QUANTAQ3OFFSET: i32 = 1;
pub const DS_INDEX_LINEAR_END: i32 = 21;
pub const PYR_OFFSET: i32 = 1;
pub const RCF_INIT_SHIFT: i32 = 14;
pub const THR_ADD_SPLIT: i32 = 7;
pub const PVQ_MAX_BAND_SIZE: i32 = 64;
pub const MIN_BAND_SIZE: i32 = 1;
pub const RC_BITS_RESERVED: i32 = 1;
pub const MAX_PVQ_BITS_PER_COEFFICIENT: i32 = 80;
pub const MAX_SRT_LEN: i32 = 58;
pub const KMAX: i32 = 512;
pub const KMAX_NON_DIRECT: i32 = 96;
pub const ODD_DIV_SIZE: i32 = 48;
pub const TCQ_MAX_BAND_SIZE: i32 = 120;
pub const STATES: i32 = 8;
pub const MAX_AR_FREQ: i32 = 16383;
pub const AR_BITS: i32 = 16;
pub const STATES_LSB: i32 = 4;
pub const TCQ_LSB_SIZE: i32 = 24;
pub const TCQ_AMP: i32 = 10;
pub const QTCQ: f64 = 0.2;
pub const AR_TOP: i32 = 65535;
pub const AR_FIRST: i32 = 16384;
pub const AR_HALF: i32 = 32768;
pub const AR_THIRD: i32 = 49152;
pub const MAX_SIZEBUF_PBITSTREAM: i32 = 1024;
pub const G1_RANGE: i32 = 4;
pub const G1G2_RANGE: i32 = 15;
pub const GRP_SB: i32 = 4;
pub const THR1: i32 = 4;
pub const THR2: i32 = 5;
pub const THR3: i32 = 6;
pub const NB_SWB_SUBBANDS: i32 = 4;
pub const SWB_SB_LEN0_12KBPS: i32 = 55;
pub const SWB_SB_LEN1_12KBPS: i32 = 68;
pub const SWB_SB_LEN2_12KBPS: i32 = 84;
pub const SWB_SB_LEN3_12KBPS: i32 = 105;
pub const SWB_HIGHBAND_12KBPS: i32 = 312;
pub const SWB_LOWBAND_12KBPS: i32 = 256;
pub const SWB_HIGHBAND_MAX: i32 = 312;
pub const SWB_LOWBAND_MAX: i32 = 256;
pub const SWB_SB_OFF0_12KBPS: i32 = 0;
pub const SWB_SB_OFF1_12KBPS: i32 = 55;
pub const SWB_SB_OFF2_12KBPS: i32 = 123;
pub const SWB_SB_OFF3_12KBPS: i32 = 207;
pub const SWB_SB_OFF4_12KBPS: i32 = 312;
pub const SWB_SB_LEN0_16KBPS: i32 = 59;
pub const SWB_SB_LEN1_16KBPS: i32 = 74;
pub const SWB_SB_LEN2_16KBPS: i32 = 92;
pub const SWB_SB_LEN3_16KBPS: i32 = 115;
pub const SWB_HIGHBAND_16KBPS: i32 = 340;
pub const SWB_LOWBAND_16KBPS: i32 = 300;
pub const SWB_SB_OFF0_16KBPS: i32 = 0;
pub const SWB_SB_OFF1_16KBPS: i32 = 59;
pub const SWB_SB_OFF2_16KBPS: i32 = 133;
pub const SWB_SB_OFF3_16KBPS: i32 = 225;
pub const SWB_SB_OFF4_16KBPS: i32 = 340;
pub const L_SB: i32 = 12;
pub const L_SB_NSS: i32 = 8;
pub const L_SB_NSS_HALF: i32 = 4;
pub const NUM_SUBBAND_SMOOTH_MAX: i32 = 40;
pub const MA_LEN: i32 = 7;
pub const NB_SWB_SUBBANDS_HAR_SEARCH_SB: i32 = 2;
pub const NB_SWB_SUBBANDS_HAR: i32 = 4;
pub const N_NBIGGEST_PULSEARCH: i32 = 18;
pub const N_NBIGGEST_SEARCH_LRG_B: i32 = 32;
pub const SWB_SB_BW_LEN0_12KBPS_HAR: i32 = 56;
pub const SWB_SB_BW_LEN1_12KBPS_HAR: i32 = 100;
pub const SWB_SB_BW_LEN2_12KBPS_HAR: i32 = 100;
pub const SWB_SB_BW_LEN3_12KBPS_HAR: i32 = 56;
pub const SWB_SB_BW_LEN0_16KBPS_HAR: i32 = 60;
pub const SWB_SB_BW_LEN1_16KBPS_HAR: i32 = 110;
pub const SWB_SB_BW_LEN2_16KBPS_HAR: i32 = 110;
pub const SWB_SB_BW_LEN3_16KBPS_HAR: i32 = 60;
pub const SWB_SB_OFF0_SUB5_12KBPS_HAR: i32 = 0;
pub const SWB_SB_OFF1_SUB5_12KBPS_HAR: i32 = 56;
pub const SWB_SB_OFF2_SUB5_12KBPS_HAR: i32 = 156;
pub const SWB_SB_OFF3_SUB5_12KBPS_HAR: i32 = 256;
pub const SWB_SB_OFF0_SUB5_16KBPS_HAR: i32 = 0;
pub const SWB_SB_OFF1_SUB5_16KBPS_HAR: i32 = 60;
pub const SWB_SB_OFF2_SUB5_16KBPS_HAR: i32 = 170;
pub const SWB_SB_OFF3_SUB5_16KBPS_HAR: i32 = 280;
pub const LR_BLK_LEN: i32 = 16;
pub const LR_HLF_PK_BLK_LEN: i32 = 8;
pub const LR_LOWBAND_DIF_PK_LEN: i32 = 10;
pub const SWB_HAR_RAN1: i32 = 80;
pub const SWB_HAR_RAN2: i32 = 140;
pub const SWB_HAR_RAN3: i32 = 200;
pub const SPT_SHORTEN_SBNUM: i32 = 4;
pub const SWB_BWE_LR_Qs: i32 = 12;
pub const SWB_BWE_LR_Qbe: i32 = 14;
pub const SWB_BWE_LR_QRk: i32 = 16;
pub const MAX_PGF: i32 = 7;
pub const MAX_ROW: i32 = 2;
pub const MAX_SB_NB: i32 = 3;
pub const NELP_LP_ORDER: i32 = 8;
pub const NUM_NELP_GAINS: i32 = 10;
pub const MINIMUM_RATE_TO_ENCODE_VOICING_FLAG: i32 = 45000;
pub const FRAC_BWE_SMOOTH: f64 = 2.0;
pub const FRAMECTTOSTART_MDCT: i32 = 3;
pub const FEC_OFFSET: i32 = 3;
pub const MAX_RF_FEC_OFFSET: i32 = 9;
pub const POST_HQ_DELAY_NS: i32 = 2312500;
pub const PH_ECU_ALDO_OLP2_NS: i32 = 4375000;
pub const PH_ECU_LOOKAHEAD_NS: i32 = 6875000;
pub const N_LEAD_NB: i32 = 70;
pub const N_ZERO_NB: i32 = 45;
pub const N_LEAD_O_NB: i32 = 90;
pub const N_ZERO_O_NB: i32 = 35;
pub const N_Z_L_NB: i32 = 115;
pub const N_Z_L_O_NB: i32 = 205;
pub const L_PROT32k: i32 = 1024;
pub const QUOT_LPR_LTR: i32 = 4;
pub const LGW_MAX: i32 = 9;
pub const BETA_MUTE_FAC_INI: f64 = 0.5;
pub const L_TRANA32k: i32 = 256;
pub const L_TRANA16k: i32 = 128;
pub const L_TRANA8k: i32 = 64;
pub const L_PROT48k: i32 = 1536;
pub const L_PROT48k_2: i32 = 768;
pub const L_TRANA48k: i32 = 384;
pub const PH_ECU_SPEC_SIZE: i32 = 1536;
pub const T_SIN_PI_2: i32 = 384;
pub const HQ_FEC_SIGN_SFM: i32 = 16;
pub const OFF_FRAMES_LIMIT: i32 = 30;
pub const PH_ECU_MUTE_START: i32 = 15;
pub const SCALE_DOWN_3dB: f64 = 0.7071;
pub const MAX_TILT: f64 = 0.0;
pub const ED_THRES: f64 = 1.0;
pub const ED_THRES_12P: f64 = 0.032209;
pub const ED_THRES_50P: f64 = 0.159063;
pub const ED_THRES_90P: f64 = 0.532669;
pub const MAXDELAY_FEC: i32 = 224;
pub const RANDOM_START: i32 = 1;
pub const HQ_FEC_SIGN_THRES: i32 = 6;
pub const HQ_FEC_SIGN_THRES_TRANS: i32 = 3;
pub const HQ_FEC_BAND_SIZE: i32 = 4;
pub const MAX_NUMBER_OF_IDX: i32 = 30;
pub const GROUP_LENGTH: i32 = 7;
pub const MAX_PEAKS_FROM_PITCH: i32 = 10;
pub const LAST_HARMONIC_POS_TO_CHECK: i32 = 128;
pub const ALLOWED_SIDE_LOBE_FLUCTUATION: f64 = 3.0;
pub const LEVEL_ABOVE_ENVELOPE: f64 = 7.59;
pub const UNREACHABLE_THRESHOLD: f64 = 16.0;
pub const SMALL_THRESHOLD: f64 = 1.1;
pub const BIG_THRESHOLD: f64 = 1.5;
pub const kSmallerLagsTargetBitsThreshold: i32 = 150;
pub const kCtxHmOlRSThr: f64 = 2.6;
pub const kTcxHmNumGainBits: i32 = 2;
pub const kTcxHmParabolaHalfWidth: i32 = 4;
pub const kLtpHmGainThr: f64 = 0.46;
pub const LOWRATE_TCXLPC_MAX_BR: i32 = 9600;
pub const DEC_STATE_LEN: i32 = 10;
pub const MAX_POST_LEN: i32 = 3;
pub const TCX_TONALITY_INIT_CNT: i32 = 7;
pub const TCX_NONTONAL: i32 = 0;
pub const TCX_TONAL: i32 = 1;
pub const IGF_MAX_TILES: i32 = 5;
pub const IGF_MAX_GRANULE_LEN: i32 = 1200;
pub const IGF_TRANS_FAK: i32 = 2;
pub const IGF_MAX_SFB: i32 = 23;
pub const IGF_NOF_GRIDS: i32 = 3;
pub const IGF_MAX_SUBFRAMES: i32 = 2;
pub const IGF_MODE_WB: i32 = 1;
pub const IGF_MODE_SWB: i32 = 2;
pub const IGF_MODE_FB: i32 = 3;
pub const IGF_BITRATE_WB_9600: i32 = 0;
pub const IGF_BITRATE_RF_WB_13200: i32 = 1;
pub const IGF_BITRATE_SWB_9600: i32 = 2;
pub const IGF_BITRATE_SWB_13200: i32 = 3;
pub const IGF_BITRATE_RF_SWB_13200: i32 = 4;
pub const IGF_BITRATE_SWB_16400: i32 = 5;
pub const IGF_BITRATE_SWB_24400: i32 = 6;
pub const IGF_BITRATE_SWB_32000: i32 = 7;
pub const IGF_BITRATE_SWB_48000: i32 = 8;
pub const IGF_BITRATE_FB_16400: i32 = 9;
pub const IGF_BITRATE_FB_24400: i32 = 10;
pub const IGF_BITRATE_FB_32000: i32 = 11;
pub const IGF_BITRATE_FB_48000: i32 = 12;
pub const IGF_BITRATE_FB_96000: i32 = 13;
pub const IGF_BITRATE_FB_128000: i32 = 14;
pub const IGF_BITRATE_UNKNOWN: i32 = 15;
pub const IGF_WHITENING_OFF: i32 = 0;
pub const IGF_WHITENING_MID: i32 = 1;
pub const IGF_WHITENING_STRONG: i32 = 2;
pub const IGF_GRID_LB_NORM: i32 = 0;
pub const IGF_GRID_LB_TRAN: i32 = 1;
pub const IGF_GRID_LB_SHORT: i32 = 2;
pub const IGF_CTX_OFFSET: i32 = 3;
pub const IGF_CTX_COUNT: i32 = 7;
pub const IGF_MIN_ENC_SEPARATE: i32 = -12;
pub const IGF_MAX_ENC_SEPARATE: i32 = 12;
pub const IGF_SYMBOLS_IN_TABLE: i32 = 27;
pub const UVG1_CBSIZE: i32 = 32;
pub const UVG2_CBSIZE: i32 = 64;
pub const NUM_ERB_WB: i32 = 24;
pub const NUM_ERB_NB: i32 = 22;
pub const VBR_ADR_MAX_TARGET: f64 = 6.15;
pub const PPP_LAG_THRLD: i32 = 180;
pub const MAXLAG_WI: i32 = 102;
pub const MAX_LAG_PIT: i32 = 201;
pub const MAX_JBM_SLOTS: i32 = 100;
pub const MAX_AU_SIZE: i32 = 320;
pub const DELAY_TEMP_ENV_BUFF_TEC: i32 = 9;
pub const EXT_DELAY_HI_TEMP_ENV: i32 = 2;
pub const LD_INT_TAB_LEN: i32 = 120;
pub const INV_TABLE_SIZE: i32 = 256;
pub const SQRT_TABLE_SIZE: i32 = 256;
pub const __DARWIN_ONLY_64_BIT_INO_T: i32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: i32 = 1;
pub const __DARWIN_ONLY_VERS_1050: i32 = 1;
pub const __DARWIN_UNIX03: i32 = 1;
pub const __DARWIN_64_BIT_INO_T: i32 = 1;
pub const __DARWIN_VERS_1050: i32 = 1;
pub const __DARWIN_NON_CANCELABLE: i32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: i32 = 4096;
pub const __DARWIN_C_FULL: i32 = 900000;
pub const __DARWIN_C_LEVEL: i32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: i32 = 1;
pub const __DARWIN_NO_LONG_LONG: i32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: i32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: i32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: i32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: i32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: i32 = 3;
pub const __has_ptrcheck: i32 = 0;
pub const __API_TO_BE_DEPRECATED: i32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: i32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: i32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: i32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: i32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: i32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: i32 = 100000;
pub const __API_TO_BE_DEPRECATED_XROS: i32 = 100000;
pub const __MAC_10_0: i32 = 1000;
pub const __MAC_10_1: i32 = 1010;
pub const __MAC_10_2: i32 = 1020;
pub const __MAC_10_3: i32 = 1030;
pub const __MAC_10_4: i32 = 1040;
pub const __MAC_10_5: i32 = 1050;
pub const __MAC_10_6: i32 = 1060;
pub const __MAC_10_7: i32 = 1070;
pub const __MAC_10_8: i32 = 1080;
pub const __MAC_10_9: i32 = 1090;
pub const __MAC_10_10: i32 = 101000;
pub const __MAC_10_10_2: i32 = 101002;
pub const __MAC_10_10_3: i32 = 101003;
pub const __MAC_10_11: i32 = 101100;
pub const __MAC_10_11_2: i32 = 101102;
pub const __MAC_10_11_3: i32 = 101103;
pub const __MAC_10_11_4: i32 = 101104;
pub const __MAC_10_12: i32 = 101200;
pub const __MAC_10_12_1: i32 = 101201;
pub const __MAC_10_12_2: i32 = 101202;
pub const __MAC_10_12_4: i32 = 101204;
pub const __MAC_10_13: i32 = 101300;
pub const __MAC_10_13_1: i32 = 101301;
pub const __MAC_10_13_2: i32 = 101302;
pub const __MAC_10_13_4: i32 = 101304;
pub const __MAC_10_14: i32 = 101400;
pub const __MAC_10_14_1: i32 = 101401;
pub const __MAC_10_14_4: i32 = 101404;
pub const __MAC_10_14_5: i32 = 101405;
pub const __MAC_10_14_6: i32 = 101406;
pub const __MAC_10_15: i32 = 101500;
pub const __MAC_10_15_1: i32 = 101501;
pub const __MAC_10_15_4: i32 = 101504;
pub const __MAC_10_16: i32 = 101600;
pub const __MAC_11_0: i32 = 110000;
pub const __MAC_11_1: i32 = 110100;
pub const __MAC_11_3: i32 = 110300;
pub const __MAC_11_4: i32 = 110400;
pub const __MAC_11_5: i32 = 110500;
pub const __MAC_11_6: i32 = 110600;
pub const __MAC_12_0: i32 = 120000;
pub const __MAC_12_1: i32 = 120100;
pub const __MAC_12_2: i32 = 120200;
pub const __MAC_12_3: i32 = 120300;
pub const __MAC_12_4: i32 = 120400;
pub const __MAC_12_5: i32 = 120500;
pub const __MAC_13_0: i32 = 130000;
pub const __MAC_13_1: i32 = 130100;
pub const __MAC_13_2: i32 = 130200;
pub const __MAC_13_3: i32 = 130300;
pub const __MAC_13_4: i32 = 130400;
pub const __MAC_14_0: i32 = 140000;
pub const __IPHONE_2_0: i32 = 20000;
pub const __IPHONE_2_1: i32 = 20100;
pub const __IPHONE_2_2: i32 = 20200;
pub const __IPHONE_3_0: i32 = 30000;
pub const __IPHONE_3_1: i32 = 30100;
pub const __IPHONE_3_2: i32 = 30200;
pub const __IPHONE_4_0: i32 = 40000;
pub const __IPHONE_4_1: i32 = 40100;
pub const __IPHONE_4_2: i32 = 40200;
pub const __IPHONE_4_3: i32 = 40300;
pub const __IPHONE_5_0: i32 = 50000;
pub const __IPHONE_5_1: i32 = 50100;
pub const __IPHONE_6_0: i32 = 60000;
pub const __IPHONE_6_1: i32 = 60100;
pub const __IPHONE_7_0: i32 = 70000;
pub const __IPHONE_7_1: i32 = 70100;
pub const __IPHONE_8_0: i32 = 80000;
pub const __IPHONE_8_1: i32 = 80100;
pub const __IPHONE_8_2: i32 = 80200;
pub const __IPHONE_8_3: i32 = 80300;
pub const __IPHONE_8_4: i32 = 80400;
pub const __IPHONE_9_0: i32 = 90000;
pub const __IPHONE_9_1: i32 = 90100;
pub const __IPHONE_9_2: i32 = 90200;
pub const __IPHONE_9_3: i32 = 90300;
pub const __IPHONE_10_0: i32 = 100000;
pub const __IPHONE_10_1: i32 = 100100;
pub const __IPHONE_10_2: i32 = 100200;
pub const __IPHONE_10_3: i32 = 100300;
pub const __IPHONE_11_0: i32 = 110000;
pub const __IPHONE_11_1: i32 = 110100;
pub const __IPHONE_11_2: i32 = 110200;
pub const __IPHONE_11_3: i32 = 110300;
pub const __IPHONE_11_4: i32 = 110400;
pub const __IPHONE_12_0: i32 = 120000;
pub const __IPHONE_12_1: i32 = 120100;
pub const __IPHONE_12_2: i32 = 120200;
pub const __IPHONE_12_3: i32 = 120300;
pub const __IPHONE_12_4: i32 = 120400;
pub const __IPHONE_13_0: i32 = 130000;
pub const __IPHONE_13_1: i32 = 130100;
pub const __IPHONE_13_2: i32 = 130200;
pub const __IPHONE_13_3: i32 = 130300;
pub const __IPHONE_13_4: i32 = 130400;
pub const __IPHONE_13_5: i32 = 130500;
pub const __IPHONE_13_6: i32 = 130600;
pub const __IPHONE_13_7: i32 = 130700;
pub const __IPHONE_14_0: i32 = 140000;
pub const __IPHONE_14_1: i32 = 140100;
pub const __IPHONE_14_2: i32 = 140200;
pub const __IPHONE_14_3: i32 = 140300;
pub const __IPHONE_14_5: i32 = 140500;
pub const __IPHONE_14_4: i32 = 140400;
pub const __IPHONE_14_6: i32 = 140600;
pub const __IPHONE_14_7: i32 = 140700;
pub const __IPHONE_14_8: i32 = 140800;
pub const __IPHONE_15_0: i32 = 150000;
pub const __IPHONE_15_1: i32 = 150100;
pub const __IPHONE_15_2: i32 = 150200;
pub const __IPHONE_15_3: i32 = 150300;
pub const __IPHONE_15_4: i32 = 150400;
pub const __IPHONE_15_5: i32 = 150500;
pub const __IPHONE_15_6: i32 = 150600;
pub const __IPHONE_16_0: i32 = 160000;
pub const __IPHONE_16_1: i32 = 160100;
pub const __IPHONE_16_2: i32 = 160200;
pub const __IPHONE_16_3: i32 = 160300;
pub const __IPHONE_16_4: i32 = 160400;
pub const __IPHONE_16_5: i32 = 160500;
pub const __IPHONE_17_0: i32 = 170000;
pub const __WATCHOS_1_0: i32 = 10000;
pub const __WATCHOS_2_0: i32 = 20000;
pub const __WATCHOS_2_1: i32 = 20100;
pub const __WATCHOS_2_2: i32 = 20200;
pub const __WATCHOS_3_0: i32 = 30000;
pub const __WATCHOS_3_1: i32 = 30100;
pub const __WATCHOS_3_1_1: i32 = 30101;
pub const __WATCHOS_3_2: i32 = 30200;
pub const __WATCHOS_4_0: i32 = 40000;
pub const __WATCHOS_4_1: i32 = 40100;
pub const __WATCHOS_4_2: i32 = 40200;
pub const __WATCHOS_4_3: i32 = 40300;
pub const __WATCHOS_5_0: i32 = 50000;
pub const __WATCHOS_5_1: i32 = 50100;
pub const __WATCHOS_5_2: i32 = 50200;
pub const __WATCHOS_5_3: i32 = 50300;
pub const __WATCHOS_6_0: i32 = 60000;
pub const __WATCHOS_6_1: i32 = 60100;
pub const __WATCHOS_6_2: i32 = 60200;
pub const __WATCHOS_7_0: i32 = 70000;
pub const __WATCHOS_7_1: i32 = 70100;
pub const __WATCHOS_7_2: i32 = 70200;
pub const __WATCHOS_7_3: i32 = 70300;
pub const __WATCHOS_7_4: i32 = 70400;
pub const __WATCHOS_7_5: i32 = 70500;
pub const __WATCHOS_7_6: i32 = 70600;
pub const __WATCHOS_8_0: i32 = 80000;
pub const __WATCHOS_8_1: i32 = 80100;
pub const __WATCHOS_8_3: i32 = 80300;
pub const __WATCHOS_8_4: i32 = 80400;
pub const __WATCHOS_8_5: i32 = 80500;
pub const __WATCHOS_8_6: i32 = 80600;
pub const __WATCHOS_8_7: i32 = 80700;
pub const __WATCHOS_9_0: i32 = 90000;
pub const __WATCHOS_9_1: i32 = 90100;
pub const __WATCHOS_9_2: i32 = 90200;
pub const __WATCHOS_9_3: i32 = 90300;
pub const __WATCHOS_9_4: i32 = 90400;
pub const __WATCHOS_9_5: i32 = 90500;
pub const __WATCHOS_10_0: i32 = 100000;
pub const __TVOS_9_0: i32 = 90000;
pub const __TVOS_9_1: i32 = 90100;
pub const __TVOS_9_2: i32 = 90200;
pub const __TVOS_10_0: i32 = 100000;
pub const __TVOS_10_0_1: i32 = 100001;
pub const __TVOS_10_1: i32 = 100100;
pub const __TVOS_10_2: i32 = 100200;
pub const __TVOS_11_0: i32 = 110000;
pub const __TVOS_11_1: i32 = 110100;
pub const __TVOS_11_2: i32 = 110200;
pub const __TVOS_11_3: i32 = 110300;
pub const __TVOS_11_4: i32 = 110400;
pub const __TVOS_12_0: i32 = 120000;
pub const __TVOS_12_1: i32 = 120100;
pub const __TVOS_12_2: i32 = 120200;
pub const __TVOS_12_3: i32 = 120300;
pub const __TVOS_12_4: i32 = 120400;
pub const __TVOS_13_0: i32 = 130000;
pub const __TVOS_13_2: i32 = 130200;
pub const __TVOS_13_3: i32 = 130300;
pub const __TVOS_13_4: i32 = 130400;
pub const __TVOS_14_0: i32 = 140000;
pub const __TVOS_14_1: i32 = 140100;
pub const __TVOS_14_2: i32 = 140200;
pub const __TVOS_14_3: i32 = 140300;
pub const __TVOS_14_5: i32 = 140500;
pub const __TVOS_14_6: i32 = 140600;
pub const __TVOS_14_7: i32 = 140700;
pub const __TVOS_15_0: i32 = 150000;
pub const __TVOS_15_1: i32 = 150100;
pub const __TVOS_15_2: i32 = 150200;
pub const __TVOS_15_3: i32 = 150300;
pub const __TVOS_15_4: i32 = 150400;
pub const __TVOS_15_5: i32 = 150500;
pub const __TVOS_15_6: i32 = 150600;
pub const __TVOS_16_0: i32 = 160000;
pub const __TVOS_16_1: i32 = 160100;
pub const __TVOS_16_2: i32 = 160200;
pub const __TVOS_16_3: i32 = 160300;
pub const __TVOS_16_4: i32 = 160400;
pub const __TVOS_16_5: i32 = 160500;
pub const __TVOS_17_0: i32 = 170000;
pub const __BRIDGEOS_2_0: i32 = 20000;
pub const __BRIDGEOS_3_0: i32 = 30000;
pub const __BRIDGEOS_3_1: i32 = 30100;
pub const __BRIDGEOS_3_4: i32 = 30400;
pub const __BRIDGEOS_4_0: i32 = 40000;
pub const __BRIDGEOS_4_1: i32 = 40100;
pub const __BRIDGEOS_5_0: i32 = 50000;
pub const __BRIDGEOS_5_1: i32 = 50100;
pub const __BRIDGEOS_5_3: i32 = 50300;
pub const __BRIDGEOS_6_0: i32 = 60000;
pub const __BRIDGEOS_6_2: i32 = 60200;
pub const __BRIDGEOS_6_4: i32 = 60400;
pub const __BRIDGEOS_6_5: i32 = 60500;
pub const __BRIDGEOS_6_6: i32 = 60600;
pub const __BRIDGEOS_7_0: i32 = 70000;
pub const __BRIDGEOS_7_1: i32 = 70100;
pub const __BRIDGEOS_7_2: i32 = 70200;
pub const __BRIDGEOS_7_3: i32 = 70300;
pub const __BRIDGEOS_7_4: i32 = 70400;
pub const __BRIDGEOS_8_0: i32 = 80000;
pub const __DRIVERKIT_19_0: i32 = 190000;
pub const __DRIVERKIT_20_0: i32 = 200000;
pub const __DRIVERKIT_21_0: i32 = 210000;
pub const __DRIVERKIT_22_0: i32 = 220000;
pub const __DRIVERKIT_22_4: i32 = 220400;
pub const __DRIVERKIT_22_5: i32 = 220500;
pub const __DRIVERKIT_23_0: i32 = 230000;
pub const __XROS_1_0: i32 = 10000;
pub const MAC_OS_X_VERSION_10_0: i32 = 1000;
pub const MAC_OS_X_VERSION_10_1: i32 = 1010;
pub const MAC_OS_X_VERSION_10_2: i32 = 1020;
pub const MAC_OS_X_VERSION_10_3: i32 = 1030;
pub const MAC_OS_X_VERSION_10_4: i32 = 1040;
pub const MAC_OS_X_VERSION_10_5: i32 = 1050;
pub const MAC_OS_X_VERSION_10_6: i32 = 1060;
pub const MAC_OS_X_VERSION_10_7: i32 = 1070;
pub const MAC_OS_X_VERSION_10_8: i32 = 1080;
pub const MAC_OS_X_VERSION_10_9: i32 = 1090;
pub const MAC_OS_X_VERSION_10_10: i32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: i32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: i32 = 101003;
pub const MAC_OS_X_VERSION_10_11: i32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: i32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: i32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: i32 = 101104;
pub const MAC_OS_X_VERSION_10_12: i32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: i32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: i32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: i32 = 101204;
pub const MAC_OS_X_VERSION_10_13: i32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: i32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: i32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: i32 = 101304;
pub const MAC_OS_X_VERSION_10_14: i32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: i32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: i32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: i32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: i32 = 101406;
pub const MAC_OS_X_VERSION_10_15: i32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: i32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: i32 = 101504;
pub const MAC_OS_X_VERSION_10_16: i32 = 101600;
pub const MAC_OS_VERSION_11_0: i32 = 110000;
pub const MAC_OS_VERSION_11_1: i32 = 110100;
pub const MAC_OS_VERSION_11_3: i32 = 110300;
pub const MAC_OS_VERSION_11_4: i32 = 110400;
pub const MAC_OS_VERSION_11_5: i32 = 110500;
pub const MAC_OS_VERSION_11_6: i32 = 110600;
pub const MAC_OS_VERSION_12_0: i32 = 120000;
pub const MAC_OS_VERSION_12_1: i32 = 120100;
pub const MAC_OS_VERSION_12_2: i32 = 120200;
pub const MAC_OS_VERSION_12_3: i32 = 120300;
pub const MAC_OS_VERSION_12_4: i32 = 120400;
pub const MAC_OS_VERSION_12_5: i32 = 120500;
pub const MAC_OS_VERSION_13_0: i32 = 130000;
pub const MAC_OS_VERSION_13_1: i32 = 130100;
pub const MAC_OS_VERSION_13_2: i32 = 130200;
pub const MAC_OS_VERSION_13_3: i32 = 130300;
pub const MAC_OS_VERSION_13_4: i32 = 130400;
pub const MAC_OS_VERSION_14_0: i32 = 140000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: i32 = 140000;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: i32 = 1;
pub const __PTHREAD_SIZE__: i32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: i32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: i32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: i32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: i32 = 8;
pub const __PTHREAD_COND_SIZE__: i32 = 40;
pub const __PTHREAD_ONCE_SIZE__: i32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: i32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: i32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: i32 = 2;
pub const RENAME_SECLUDE: i32 = 1;
pub const RENAME_SWAP: i32 = 2;
pub const RENAME_EXCL: i32 = 4;
pub const RENAME_RESERVED1: i32 = 8;
pub const RENAME_NOFOLLOW_ANY: i32 = 16;
pub const SEEK_SET: i32 = 0;
pub const SEEK_CUR: i32 = 1;
pub const SEEK_END: i32 = 2;
pub const SEEK_HOLE: i32 = 3;
pub const SEEK_DATA: i32 = 4;
pub const __SLBF: i32 = 1;
pub const __SNBF: i32 = 2;
pub const __SRD: i32 = 4;
pub const __SWR: i32 = 8;
pub const __SRW: i32 = 16;
pub const __SEOF: i32 = 32;
pub const __SERR: i32 = 64;
pub const __SMBF: i32 = 128;
pub const __SAPP: i32 = 256;
pub const __SSTR: i32 = 512;
pub const __SOPT: i32 = 1024;
pub const __SNPT: i32 = 2048;
pub const __SOFF: i32 = 4096;
pub const __SMOD: i32 = 8192;
pub const __SALC: i32 = 16384;
pub const __SIGN: i32 = 32768;
pub const _IOFBF: i32 = 0;
pub const _IOLBF: i32 = 1;
pub const _IONBF: i32 = 2;
pub const BUFSIZ: i32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: i32 = 20;
pub const FILENAME_MAX: i32 = 1024;
pub const P_tmpdir: &[u8; 10] = b"/var/tmp/\0";
pub const L_tmpnam: i32 = 1024;
pub const TMP_MAX: i32 = 308915776;
pub const L_ctermid: i32 = 1024;
pub const _USE_FORTIFY_LEVEL: i32 = 2;
pub const __GNUC_VA_LIST: i32 = 1;
pub const __DARWIN_NSIG: i32 = 32;
pub const NSIG: i32 = 32;
pub const _ARM_SIGNAL_: i32 = 1;
pub const SIGHUP: i32 = 1;
pub const SIGINT: i32 = 2;
pub const SIGQUIT: i32 = 3;
pub const SIGILL: i32 = 4;
pub const SIGTRAP: i32 = 5;
pub const SIGABRT: i32 = 6;
pub const SIGIOT: i32 = 6;
pub const SIGEMT: i32 = 7;
pub const SIGFPE: i32 = 8;
pub const SIGKILL: i32 = 9;
pub const SIGBUS: i32 = 10;
pub const SIGSEGV: i32 = 11;
pub const SIGSYS: i32 = 12;
pub const SIGPIPE: i32 = 13;
pub const SIGALRM: i32 = 14;
pub const SIGTERM: i32 = 15;
pub const SIGURG: i32 = 16;
pub const SIGSTOP: i32 = 17;
pub const SIGTSTP: i32 = 18;
pub const SIGCONT: i32 = 19;
pub const SIGCHLD: i32 = 20;
pub const SIGTTIN: i32 = 21;
pub const SIGTTOU: i32 = 22;
pub const SIGIO: i32 = 23;
pub const SIGXCPU: i32 = 24;
pub const SIGXFSZ: i32 = 25;
pub const SIGVTALRM: i32 = 26;
pub const SIGPROF: i32 = 27;
pub const SIGWINCH: i32 = 28;
pub const SIGINFO: i32 = 29;
pub const SIGUSR1: i32 = 30;
pub const SIGUSR2: i32 = 31;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: i32 = 0;
pub const SIGEV_NONE: i32 = 0;
pub const SIGEV_SIGNAL: i32 = 1;
pub const SIGEV_THREAD: i32 = 3;
pub const ILL_NOOP: i32 = 0;
pub const ILL_ILLOPC: i32 = 1;
pub const ILL_ILLTRP: i32 = 2;
pub const ILL_PRVOPC: i32 = 3;
pub const ILL_ILLOPN: i32 = 4;
pub const ILL_ILLADR: i32 = 5;
pub const ILL_PRVREG: i32 = 6;
pub const ILL_COPROC: i32 = 7;
pub const ILL_BADSTK: i32 = 8;
pub const FPE_NOOP: i32 = 0;
pub const FPE_FLTDIV: i32 = 1;
pub const FPE_FLTOVF: i32 = 2;
pub const FPE_FLTUND: i32 = 3;
pub const FPE_FLTRES: i32 = 4;
pub const FPE_FLTINV: i32 = 5;
pub const FPE_FLTSUB: i32 = 6;
pub const FPE_INTDIV: i32 = 7;
pub const FPE_INTOVF: i32 = 8;
pub const SEGV_NOOP: i32 = 0;
pub const SEGV_MAPERR: i32 = 1;
pub const SEGV_ACCERR: i32 = 2;
pub const BUS_NOOP: i32 = 0;
pub const BUS_ADRALN: i32 = 1;
pub const BUS_ADRERR: i32 = 2;
pub const BUS_OBJERR: i32 = 3;
pub const TRAP_BRKPT: i32 = 1;
pub const TRAP_TRACE: i32 = 2;
pub const CLD_NOOP: i32 = 0;
pub const CLD_EXITED: i32 = 1;
pub const CLD_KILLED: i32 = 2;
pub const CLD_DUMPED: i32 = 3;
pub const CLD_TRAPPED: i32 = 4;
pub const CLD_STOPPED: i32 = 5;
pub const CLD_CONTINUED: i32 = 6;
pub const POLL_IN: i32 = 1;
pub const POLL_OUT: i32 = 2;
pub const POLL_MSG: i32 = 3;
pub const POLL_ERR: i32 = 4;
pub const POLL_PRI: i32 = 5;
pub const POLL_HUP: i32 = 6;
pub const SA_ONSTACK: i32 = 1;
pub const SA_RESTART: i32 = 2;
pub const SA_RESETHAND: i32 = 4;
pub const SA_NOCLDSTOP: i32 = 8;
pub const SA_NODEFER: i32 = 16;
pub const SA_NOCLDWAIT: i32 = 32;
pub const SA_SIGINFO: i32 = 64;
pub const SA_USERTRAMP: i32 = 256;
pub const SA_64REGSET: i32 = 512;
pub const SA_USERSPACE_MASK: i32 = 127;
pub const SIG_BLOCK: i32 = 1;
pub const SIG_UNBLOCK: i32 = 2;
pub const SIG_SETMASK: i32 = 3;
pub const SI_USER: i32 = 65537;
pub const SI_QUEUE: i32 = 65538;
pub const SI_TIMER: i32 = 65539;
pub const SI_ASYNCIO: i32 = 65540;
pub const SI_MESGQ: i32 = 65541;
pub const SS_ONSTACK: i32 = 1;
pub const SS_DISABLE: i32 = 4;
pub const MINSIGSTKSZ: i32 = 32768;
pub const SIGSTKSZ: i32 = 131072;
pub const SV_ONSTACK: i32 = 1;
pub const SV_INTERRUPT: i32 = 2;
pub const SV_RESETHAND: i32 = 4;
pub const SV_NODEFER: i32 = 16;
pub const SV_NOCLDSTOP: i32 = 8;
pub const SV_SIGINFO: i32 = 64;
pub const __WORDSIZE: i32 = 64;
pub const INT8_MAX: i32 = 127;
pub const INT16_MAX: i32 = 32767;
pub const INT32_MAX: i32 = 2147483647;
pub const INT64_MAX: i64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: i32 = 255;
pub const UINT16_MAX: i32 = 65535;
pub const UINT32_MAX: i64 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: i32 = 127;
pub const INT_LEAST16_MAX: i32 = 32767;
pub const INT_LEAST32_MAX: i32 = 2147483647;
pub const INT_LEAST64_MAX: i64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: i32 = 255;
pub const UINT_LEAST16_MAX: i32 = 65535;
pub const UINT_LEAST32_MAX: i64 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: i32 = 127;
pub const INT_FAST16_MAX: i32 = 32767;
pub const INT_FAST32_MAX: i32 = 2147483647;
pub const INT_FAST64_MAX: i64 = 9223372036854775807;
pub const UINT_FAST8_MAX: i32 = 255;
pub const UINT_FAST16_MAX: i32 = 65535;
pub const UINT_FAST32_MAX: i64 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: i64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: i32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: i32 = 2147483647;
pub const PRIO_PROCESS: i32 = 0;
pub const PRIO_PGRP: i32 = 1;
pub const PRIO_USER: i32 = 2;
pub const PRIO_DARWIN_THREAD: i32 = 3;
pub const PRIO_DARWIN_PROCESS: i32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: i32 = 20;
pub const PRIO_DARWIN_BG: i32 = 4096;
pub const PRIO_DARWIN_NONUI: i32 = 4097;
pub const RUSAGE_SELF: i32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: i32 = 0;
pub const RUSAGE_INFO_V1: i32 = 1;
pub const RUSAGE_INFO_V2: i32 = 2;
pub const RUSAGE_INFO_V3: i32 = 3;
pub const RUSAGE_INFO_V4: i32 = 4;
pub const RUSAGE_INFO_V5: i32 = 5;
pub const RUSAGE_INFO_V6: i32 = 6;
pub const RUSAGE_INFO_CURRENT: i32 = 6;
pub const RU_PROC_RUNS_RESLIDE: i32 = 1;
pub const RLIMIT_CPU: i32 = 0;
pub const RLIMIT_FSIZE: i32 = 1;
pub const RLIMIT_DATA: i32 = 2;
pub const RLIMIT_STACK: i32 = 3;
pub const RLIMIT_CORE: i32 = 4;
pub const RLIMIT_AS: i32 = 5;
pub const RLIMIT_RSS: i32 = 5;
pub const RLIMIT_MEMLOCK: i32 = 6;
pub const RLIMIT_NPROC: i32 = 7;
pub const RLIMIT_NOFILE: i32 = 8;
pub const RLIM_NLIMITS: i32 = 9;
pub const _RLIMIT_POSIX_FLAG: i32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: i32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: i32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: i32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: i32 = 4;
pub const WAKEMON_ENABLE: i32 = 1;
pub const WAKEMON_DISABLE: i32 = 2;
pub const WAKEMON_GET_PARAMS: i32 = 4;
pub const WAKEMON_SET_DEFAULTS: i32 = 8;
pub const WAKEMON_MAKE_FATAL: i32 = 16;
pub const CPUMON_MAKE_FATAL: i32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: i32 = 1;
pub const IOPOL_TYPE_DISK: i32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: i32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: i32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: i32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: i32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: i32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: i32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: i32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: i32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: i32 = 10;
pub const IOPOL_SCOPE_PROCESS: i32 = 0;
pub const IOPOL_SCOPE_THREAD: i32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: i32 = 2;
pub const IOPOL_DEFAULT: i32 = 0;
pub const IOPOL_IMPORTANT: i32 = 1;
pub const IOPOL_PASSIVE: i32 = 2;
pub const IOPOL_THROTTLE: i32 = 3;
pub const IOPOL_UTILITY: i32 = 4;
pub const IOPOL_STANDARD: i32 = 5;
pub const IOPOL_APPLICATION: i32 = 5;
pub const IOPOL_NORMAL: i32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: i32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: i32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: i32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: i32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: i32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: i32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: i32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: i32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: i32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: i32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: i32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: i32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: i32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: i32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: i32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: i32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: i32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: i32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: i32 = 1;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: i32 = 0;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: i32 = 1;
pub const WNOHANG: i32 = 1;
pub const WUNTRACED: i32 = 2;
pub const WCOREFLAG: i32 = 128;
pub const _WSTOPPED: i32 = 127;
pub const WEXITED: i32 = 4;
pub const WSTOPPED: i32 = 8;
pub const WCONTINUED: i32 = 16;
pub const WNOWAIT: i32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: i32 = 0;
pub const _QUAD_HIGHWORD: i32 = 1;
pub const _QUAD_LOWWORD: i32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: i32 = 1234;
pub const __DARWIN_BIG_ENDIAN: i32 = 4321;
pub const __DARWIN_PDP_ENDIAN: i32 = 3412;
pub const __DARWIN_BYTE_ORDER: i32 = 1234;
pub const LITTLE_ENDIAN: i32 = 1234;
pub const BIG_ENDIAN: i32 = 4321;
pub const PDP_ENDIAN: i32 = 3412;
pub const BYTE_ORDER: i32 = 1234;
pub const EXIT_FAILURE: i32 = 1;
pub const EXIT_SUCCESS: i32 = 0;
pub const RAND_MAX: i32 = 2147483647;
pub const FP_NAN: i32 = 1;
pub const FP_INFINITE: i32 = 2;
pub const FP_ZERO: i32 = 3;
pub const FP_NORMAL: i32 = 4;
pub const FP_SUBNORMAL: i32 = 5;
pub const FP_SUPERNORMAL: i32 = 6;
pub const FP_FAST_FMA: i32 = 1;
pub const FP_FAST_FMAF: i32 = 1;
pub const FP_FAST_FMAL: i32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: i32 = 1;
pub const MATH_ERREXCEPT: i32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: i32 = 1;
pub const FP_QNAN: i32 = 1;
pub const DOMAIN: i32 = 1;
pub const SING: i32 = 2;
pub const OVERFLOW: i32 = 3;
pub const UNDERFLOW: i32 = 4;
pub const TLOSS: i32 = 5;
pub const PLOSS: i32 = 6;
pub const __bool_true_false_are_defined: i32 = 1;
pub const true_: i32 = 1;
pub const false_: i32 = 0;
pub const IND_CORE: _bindgen_ty_1 = 0;
pub const IND_PPP_NELP_MODE: _bindgen_ty_1 = 1;
pub const IND_SID_TYPE: _bindgen_ty_1 = 2;
pub const IND_ACELP_16KHZ: _bindgen_ty_1 = 3;
pub const IND_ACELP_SIGNALLING: _bindgen_ty_1 = 4;
pub const IND_MDCT_CORE: _bindgen_ty_1 = 5;
pub const IND_BWE_FLAG: _bindgen_ty_1 = 6;
pub const IND_HQ_SWITCHING_FLG: _bindgen_ty_1 = 7;
pub const IND_LAST_L_FRAME: _bindgen_ty_1 = 8;
pub const IND_VAD_FLAG: _bindgen_ty_1 = 9;
pub const IND_HQ_BWIDTH: _bindgen_ty_1 = 10;
pub const IND_TC_SUBFR: _bindgen_ty_1 = 11;
pub const IND_LSF_PREDICTOR_SELECT_BIT: _bindgen_ty_1 = 15;
pub const IND_LSF: _bindgen_ty_1 = 16;
pub const IND_MID_FRAME_LSF_INDEX: _bindgen_ty_1 = 33;
pub const IND_ISF_0_0: _bindgen_ty_1 = 34;
pub const IND_ISF_0_1: _bindgen_ty_1 = 35;
pub const IND_ISF_0_2: _bindgen_ty_1 = 36;
pub const IND_ISF_0_3: _bindgen_ty_1 = 37;
pub const IND_ISF_0_4: _bindgen_ty_1 = 38;
pub const IND_ISF_1_0: _bindgen_ty_1 = 39;
pub const IND_ISF_1_1: _bindgen_ty_1 = 40;
pub const IND_ISF_1_2: _bindgen_ty_1 = 41;
pub const IND_ISF_1_3: _bindgen_ty_1 = 42;
pub const IND_ISF_1_4: _bindgen_ty_1 = 43;
pub const IND_GSC_ATTACK: _bindgen_ty_1 = 44;
pub const IND_GSC_SWB_SPEECH: _bindgen_ty_1 = 45;
pub const IND_NOISE_LEVEL: _bindgen_ty_1 = 46;
pub const IND_HF_NOISE: _bindgen_ty_1 = 47;
pub const IND_PIT_CONTR_IDX: _bindgen_ty_1 = 48;
pub const IND_FEC_CLAS: _bindgen_ty_1 = 49;
pub const IND_FEC_ENR: _bindgen_ty_1 = 50;
pub const IND_FEC_POS: _bindgen_ty_1 = 51;
pub const IND_ES_PRED: _bindgen_ty_1 = 52;
pub const IND_HARM_FLAG_ACELP: _bindgen_ty_1 = 53;
pub const TAG_ALG_CDBK_4T64_24KBIT_START: _bindgen_ty_1 = 54;
pub const IND_ALG_CDBK_4T64_1_24KBIT: _bindgen_ty_1 = 54;
pub const IND_ALG_CDBK_4T64_2_24KBIT: _bindgen_ty_1 = 54;
pub const TAG_ALG_CDBK_4T64_24KBIT_END: _bindgen_ty_1 = 94;
pub const TAG_ACELP_SUBFR_LOOP_START: _bindgen_ty_1 = 95;
pub const IND_PITCH: _bindgen_ty_1 = 95;
pub const IND_LP_FILT_SELECT: _bindgen_ty_1 = 95;
pub const IND_ALG_CDBK_1T64: _bindgen_ty_1 = 95;
pub const IND_ALG_CDBK_2T32: _bindgen_ty_1 = 95;
pub const IND_ALG_CDBK_4T64: _bindgen_ty_1 = 95;
pub const IND_ALG_CDBK_4T64_1: _bindgen_ty_1 = 95;
pub const IND_ALG_CDBK_4T64_2: _bindgen_ty_1 = 95;
pub const IND_ALG_CDBK_4T64_1BIT: _bindgen_ty_1 = 95;
pub const IND_GAUS_CDBK_INDEX: _bindgen_ty_1 = 95;
pub const IND_TILT_FACTOR: _bindgen_ty_1 = 95;
pub const IND_GAIN: _bindgen_ty_1 = 95;
pub const IND_GAIN_CODE: _bindgen_ty_1 = 95;
pub const IND_TC_IMP_SHAPE: _bindgen_ty_1 = 95;
pub const IND_TC_IMP_POS: _bindgen_ty_1 = 95;
pub const IND_TC_IMP_SIGN: _bindgen_ty_1 = 95;
pub const IND_TC_IMP_GAIN: _bindgen_ty_1 = 95;
pub const IND_GAIN_PIT: _bindgen_ty_1 = 95;
pub const IND_PIT_IDX: _bindgen_ty_1 = 95;
pub const IND_AVQ_GAIN: _bindgen_ty_1 = 95;
pub const IND_I: _bindgen_ty_1 = 95;
pub const IND_KV: _bindgen_ty_1 = 95;
pub const IND_NQ: _bindgen_ty_1 = 95;
pub const IND_HF_GAIN_MODIFICATION: _bindgen_ty_1 = 95;
pub const TAG_ACELP_SUBFR_LOOP_END: _bindgen_ty_1 = 395;
pub const IND_MEAN_GAIN2: _bindgen_ty_1 = 396;
pub const IND_Y_GAIN_TMP: _bindgen_ty_1 = 428;
pub const IND_Y_GAIN_HF: _bindgen_ty_1 = 460;
pub const IND_HQ_VOICING_FLAG: _bindgen_ty_1 = 461;
pub const IND_HQ_SWB_CLAS: _bindgen_ty_1 = 462;
pub const IND_NF_IDX: _bindgen_ty_1 = 463;
pub const IND_LC_MODE: _bindgen_ty_1 = 464;
pub const IND_YNRM: _bindgen_ty_1 = 465;
pub const IND_HQ_SWB_EXC_SP_CLAS: _bindgen_ty_1 = 509;
pub const IND_HQ_SWB_EXC_CLAS: _bindgen_ty_1 = 509;
pub const IND_SWB_FENV_HQ: _bindgen_ty_1 = 509;
pub const IND_FB_FENV_HQ: _bindgen_ty_1 = 514;
pub const IND_DELTA_ENV_HQ: _bindgen_ty_1 = 519;
pub const IND_HVQ_BWE_NL: _bindgen_ty_1 = 520;
pub const IND_NUM_PEAKS: _bindgen_ty_1 = 522;
pub const IND_POS_IDX: _bindgen_ty_1 = 523;
pub const IND_FLAGN: _bindgen_ty_1 = 803;
pub const IND_PG_IDX: _bindgen_ty_1 = 804;
pub const IND_HVQ_PEAKS: _bindgen_ty_1 = 831;
pub const IND_HVQ_NF_GAIN: _bindgen_ty_1 = 885;
pub const IND_HQ2_SWB_CLAS: _bindgen_ty_1 = 887;
pub const IND_HQ2_DENG_MODE: _bindgen_ty_1 = 888;
pub const IND_HQ2_DENG_8SMODE: _bindgen_ty_1 = 889;
pub const IND_HQ2_DENG_8SMODE_N0: _bindgen_ty_1 = 890;
pub const IND_HQ2_DENG_8SMODE_N1: _bindgen_ty_1 = 891;
pub const IND_HQ2_DENG_8SPOS: _bindgen_ty_1 = 892;
pub const IND_HQ2_DENG_8SDEPTH: _bindgen_ty_1 = 893;
pub const IND_HQ2_DENG_HMODE: _bindgen_ty_1 = 894;
pub const IND_HQ2_DIFF_ENERGY: _bindgen_ty_1 = 895;
pub const IND_HQ2_P2A_FLAGS: _bindgen_ty_1 = 995;
pub const IND_HQ2_LAST_BA_MAX_BAND: _bindgen_ty_1 = 1055;
pub const IND_RC_START: _bindgen_ty_1 = 1057;
pub const IND_RC_END: _bindgen_ty_1 = 1377;
pub const IND_HVQ_PVQ_GAIN: _bindgen_ty_1 = 1378;
pub const IND_NOISINESS: _bindgen_ty_1 = 1386;
pub const IND_ENERGY: _bindgen_ty_1 = 1387;
pub const IND_CNG_HO: _bindgen_ty_1 = 1388;
pub const IND_SID_BW: _bindgen_ty_1 = 1389;
pub const IND_CNG_ENV1: _bindgen_ty_1 = 1390;
pub const IND_WB_FENV: _bindgen_ty_1 = 1391;
pub const IND_WB_CLASS: _bindgen_ty_1 = 1392;
pub const IND_IG1: _bindgen_ty_1 = 1393;
pub const IND_IG2A: _bindgen_ty_1 = 1394;
pub const IND_IG2B: _bindgen_ty_1 = 1395;
pub const IND_NELP_FID: _bindgen_ty_1 = 1396;
pub const IND_DELTALAG: _bindgen_ty_1 = 1397;
pub const IND_POWER: _bindgen_ty_1 = 1398;
pub const IND_AMP0: _bindgen_ty_1 = 1399;
pub const IND_AMP1: _bindgen_ty_1 = 1400;
pub const IND_GLOBAL_ALIGNMENT: _bindgen_ty_1 = 1401;
pub const IND_PVQ_FINE_GAIN: _bindgen_ty_1 = 1402;
pub const IND_UV_FLAG: _bindgen_ty_1 = 1403;
pub const IND_SHB_SUBGAIN: _bindgen_ty_1 = 1446;
pub const IND_SHB_FRAMEGAIN: _bindgen_ty_1 = 1447;
pub const IND_SHB_ENER_SF: _bindgen_ty_1 = 1448;
pub const IND_SHB_RES_GS1: _bindgen_ty_1 = 1449;
pub const IND_SHB_RES_GS2: _bindgen_ty_1 = 1450;
pub const IND_SHB_RES_GS3: _bindgen_ty_1 = 1451;
pub const IND_SHB_RES_GS4: _bindgen_ty_1 = 1452;
pub const IND_SHB_RES_GS5: _bindgen_ty_1 = 1453;
pub const IND_SHB_VF: _bindgen_ty_1 = 1454;
pub const IND_SHB_LSF: _bindgen_ty_1 = 1455;
pub const IND_SHB_MIRROR: _bindgen_ty_1 = 1460;
pub const IND_SHB_GRID: _bindgen_ty_1 = 1461;
pub const IND_SWB_CLASS: _bindgen_ty_1 = 1462;
pub const IND_SWB_TENV: _bindgen_ty_1 = 1463;
pub const IND_SWB_FENV: _bindgen_ty_1 = 1467;
pub const IND_SHB_CNG_GAIN: _bindgen_ty_1 = 1471;
pub const IND_DITHERING: _bindgen_ty_1 = 1472;
pub const IND_FB_SLOPE: _bindgen_ty_1 = 1473;
pub const IND_HQ2_SPT_SHORTEN: _bindgen_ty_1 = 1474;
pub const IND_HQ2_SUBBAND_TCQ: _bindgen_ty_1 = 1475;
pub const IND_HQ2_SUBBAND_GAIN: _bindgen_ty_1 = 1575;
pub const IND_HQ2_DUMMY: _bindgen_ty_1 = 1595;
pub const IND_LAGINDICES: _bindgen_ty_1 = 1596;
pub const IND_NOISEG: _bindgen_ty_1 = 1597;
pub const IND_AUDIO_GAIN: _bindgen_ty_1 = 1598;
pub const IND_AUDIO_DELAY: _bindgen_ty_1 = 1599;
pub const TAG_HR_BWE_LOOP_START: _bindgen_ty_1 = 1603;
pub const IND_HR_IS_TRANSIENT: _bindgen_ty_1 = 1603;
pub const IND_HR_GAIN: _bindgen_ty_1 = 1603;
pub const IND_HR_ENVELOPE: _bindgen_ty_1 = 1603;
pub const IND_HR_HF_GAIN: _bindgen_ty_1 = 1603;
pub const IND_I2: _bindgen_ty_1 = 1603;
pub const IND_KV2: _bindgen_ty_1 = 1603;
pub const IND_NQ2: _bindgen_ty_1 = 1603;
pub const TAG_HR_BWE_LOOP_END: _bindgen_ty_1 = 1803;
pub const IND_CORE_SWITCHING_CELP_SUBFRAME: _bindgen_ty_1 = 1804;
pub const IND_CORE_SWITCHING_AUDIO_DELAY: _bindgen_ty_1 = 1824;
pub const IND_CORE_SWITCHING_AUDIO_GAIN: _bindgen_ty_1 = 1825;
pub const IND_UNUSED: _bindgen_ty_1 = 1826;
pub const MAX_NUM_INDICES: _bindgen_ty_1 = 1953;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const CLDFB_TYPE_CLDFB_ANALYSIS: CLDFB_TYPE = 0;
pub const CLDFB_TYPE_CLDFB_SYNTHESIS: CLDFB_TYPE = 1;
pub type CLDFB_TYPE = ::std::os::raw::c_uint;
pub const TRACKPOS_TRACKPOS_FIXED_FIRST: TRACKPOS = 0;
pub const TRACKPOS_TRACKPOS_FIXED_EVEN: TRACKPOS = 1;
pub const TRACKPOS_TRACKPOS_FIXED_FIRST_TWO: TRACKPOS = 2;
pub const TRACKPOS_TRACKPOS_FIXED_TWO: TRACKPOS = 3;
pub const TRACKPOS_TRACKPOS_FREE_ONE: TRACKPOS = 4;
pub const TRACKPOS_TRACKPOS_FREE_THREE: TRACKPOS = 6;
pub const TRACKPOS_TRACKPOS_GRADIENT: TRACKPOS = 7;
pub type TRACKPOS = ::std::os::raw::c_uint;
pub const LAGW_WEAK: _bindgen_ty_2 = 0;
pub const LAGW_MEDIUM: _bindgen_ty_2 = 1;
pub const LAGW_STRONG: _bindgen_ty_2 = 2;
pub const NUM_LAGW_STRENGTHS: _bindgen_ty_2 = 3;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const QuantaMode_NEAREST: QuantaMode = 0;
pub const QuantaMode_CONS: QuantaMode = 1;
pub type QuantaMode = ::std::os::raw::c_uint;
pub const PRIMARY_2800: _bindgen_ty_3 = 0;
pub const PRIMARY_7200: _bindgen_ty_3 = 1;
pub const PRIMARY_8000: _bindgen_ty_3 = 2;
pub const PRIMARY_9600: _bindgen_ty_3 = 3;
pub const PRIMARY_13200: _bindgen_ty_3 = 4;
pub const PRIMARY_16400: _bindgen_ty_3 = 5;
pub const PRIMARY_24400: _bindgen_ty_3 = 6;
pub const PRIMARY_32000: _bindgen_ty_3 = 7;
pub const PRIMARY_48000: _bindgen_ty_3 = 8;
pub const PRIMARY_64000: _bindgen_ty_3 = 9;
pub const PRIMARY_96000: _bindgen_ty_3 = 10;
pub const PRIMARY_128000: _bindgen_ty_3 = 11;
pub const PRIMARY_SID: _bindgen_ty_3 = 12;
pub const PRIMARY_FUT1: _bindgen_ty_3 = 13;
pub const SPEECH_LOST: _bindgen_ty_3 = 14;
pub const NO_DATA: _bindgen_ty_3 = 15;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const AMRWB_IO_6600: _bindgen_ty_4 = 0;
pub const AMRWB_IO_8850: _bindgen_ty_4 = 1;
pub const AMRWB_IO_1265: _bindgen_ty_4 = 2;
pub const AMRWB_IO_1425: _bindgen_ty_4 = 3;
pub const AMRWB_IO_1585: _bindgen_ty_4 = 4;
pub const AMRWB_IO_1825: _bindgen_ty_4 = 5;
pub const AMRWB_IO_1985: _bindgen_ty_4 = 6;
pub const AMRWB_IO_2305: _bindgen_ty_4 = 7;
pub const AMRWB_IO_2385: _bindgen_ty_4 = 8;
pub const AMRWB_IO_SID: _bindgen_ty_4 = 9;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const G192: _bindgen_ty_5 = 0;
pub const MIME: _bindgen_ty_5 = 1;
pub const VOIP_G192_RTP: _bindgen_ty_5 = 2;
pub const VOIP_RTPDUMP: _bindgen_ty_5 = 3;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
impl Default for __mbstate_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
impl Default for __darwin_pthread_handler_rec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl Default for _opaque_pthread_attr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
impl Default for _opaque_pthread_cond_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl Default for _opaque_pthread_mutex_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
impl Default for _opaque_pthread_rwlock_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
impl Default for _opaque_pthread_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
impl Default for __sbuf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
impl Default for __sFILE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type Word8 = ::std::os::raw::c_schar;
pub type UWord8 = ::std::os::raw::c_uchar;
pub type Word16 = ::std::os::raw::c_short;
pub type Word32 = ::std::os::raw::c_int;
pub type UWord16 = ::std::os::raw::c_ushort;
pub type UWord32 = ::std::os::raw::c_uint;
pub type Word40 = ::std::os::raw::c_longlong;
pub type Flag = ::std::os::raw::c_int;
pub type Float32 = f32;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
impl Default for __darwin_arm_vfp_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_arm_exception_state,
    pub __ss: __darwin_arm_thread_state,
    pub __fs: __darwin_arm_vfp_state,
}
impl Default for __darwin_mcontext32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_arm_exception_state64,
    pub __ss: __darwin_arm_thread_state64,
    pub __ns: __darwin_arm_neon_state64,
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
impl Default for __darwin_sigaltstack {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
impl Default for __darwin_ucontext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
impl Default for sigval {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
impl Default for sigevent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
impl Default for __siginfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
impl Default for __sigaction_u {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
impl Default for __sigaction {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
impl Default for sigaction {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
impl Default for sigstack {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_reserved: [u64; 14usize],
}
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _OSUnalignedU16 {
    pub __val: u16,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _OSUnalignedU32 {
    pub __val: u32,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _OSUnalignedU64 {
    pub __val: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for wait {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
pub type malloc_type_id_t = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn malloc_type_malloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_calloc(
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_free(ptr: *mut ::std::os::raw::c_void, type_id: malloc_type_id_t);
}
extern "C" {
    pub fn malloc_type_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_valloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_aligned_alloc(
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_posix_memalign(
        memptr: *mut *mut ::std::os::raw::c_void,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    _unused: [u8; 0],
}
pub type malloc_zone_t = _malloc_zone_t;
extern "C" {
    pub fn malloc_type_zone_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_calloc(
        zone: *mut malloc_zone_t,
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_free(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        type_id: malloc_type_id_t,
    );
}
extern "C" {
    pub fn malloc_type_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_valloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atan2l(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    pub fn expl(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    pub fn logl(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10l(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pl(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbl(arg1: f64) -> f64;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn modfl(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpl(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogbl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalbnl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalblnl(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabsl(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceill(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorl(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrintl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn roundl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrintl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn truncl(arg1: f64) -> f64;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmodl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn remquol(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: f64) -> f32;
}
extern "C" {
    pub fn nexttowardl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdiml(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn fmal(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn __exp10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __exp10(arg1: f64) -> f64;
}
extern "C" {
    pub fn __cospif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __cospi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __sinpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __sinpi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tanpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tanpi(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __float2 {
    pub __sinval: f32,
    pub __cosval: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __double2 {
    pub __sinval: f64,
    pub __cosval: f64,
}
extern "C" {
    pub fn __sincosf_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincos_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn __sincospif_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincospi_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
impl Default for exception {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PFSTAT {
    pub on: ::std::os::raw::c_int,
    pub reset: ::std::os::raw::c_short,
    pub mem_pf_in: [f32; 64usize],
    pub mem_stp: [f32; 64usize],
    pub mem_res2: [f32; 299usize],
    pub mem_zero: [f32; 16usize],
    pub gain_prec: f32,
}
impl Default for PFSTAT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DTFS_STRUCTURE {
    pub a: [f32; 102usize],
    pub b: [f32; 102usize],
    pub lag: ::std::os::raw::c_int,
    pub nH: ::std::os::raw::c_int,
    pub nH_4kHz: ::std::os::raw::c_int,
    pub upper_cut_off_freq_of_interest: f32,
    pub upper_cut_off_freq: f32,
    pub Fs: f32,
}
impl Default for DTFS_STRUCTURE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PvqEntry {
    pub lead_sign_ind: ::std::os::raw::c_short,
    pub index: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub dim: ::std::os::raw::c_short,
    pub k_val: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BITSTREAM {
    pub buf: [::std::os::raw::c_uchar; 1024usize],
    pub curPos: ::std::os::raw::c_schar,
    pub numByte: ::std::os::raw::c_uint,
    pub numbits: ::std::os::raw::c_uint,
    pub maxBytes: ::std::os::raw::c_uint,
}
impl Default for BITSTREAM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PBITSTREAM = *mut BITSTREAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ARCODEC {
    pub bsInst: PBITSTREAM,
    pub low: ::std::os::raw::c_uint,
    pub high: ::std::os::raw::c_uint,
    pub value: ::std::os::raw::c_uint,
    pub bits_to_follow: ::std::os::raw::c_int,
    pub num_bits: ::std::os::raw::c_int,
    pub max_bits: ::std::os::raw::c_int,
}
impl Default for ARCODEC {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PARCODEC = *mut ARCODEC;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ACELP_config {
    pub mode_index: ::std::os::raw::c_short,
    pub midLpc: ::std::os::raw::c_short,
    pub midLpc_enable: ::std::os::raw::c_short,
    pub pre_emphasis: ::std::os::raw::c_short,
    pub pitch_sharpening: ::std::os::raw::c_short,
    pub phase_scrambling: ::std::os::raw::c_short,
    pub formant_enh: ::std::os::raw::c_short,
    pub formant_tilt: ::std::os::raw::c_short,
    pub voice_tilt: ::std::os::raw::c_short,
    pub formant_enh_num: f32,
    pub formant_enh_den: f32,
    pub bpf_mode: ::std::os::raw::c_short,
    pub nrg_mode: ::std::os::raw::c_short,
    pub nrg_bits: ::std::os::raw::c_short,
    pub ltp_mode: ::std::os::raw::c_short,
    pub ltp_bits: ::std::os::raw::c_short,
    pub ltf_mode: ::std::os::raw::c_short,
    pub ltf_bits: ::std::os::raw::c_short,
    pub gains_mode: [::std::os::raw::c_short; 5usize],
    pub fixed_cdk_index: [::std::os::raw::c_int; 5usize],
}
#[doc = " TNS configuration.\n Use InitTnsConfiguration to initialize it."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct STnsConfig {
    pub maxOrder: ::std::os::raw::c_uchar,
    #[doc = " Maximum number of filters."]
    pub nMaxFilters: ::std::os::raw::c_uchar,
    #[doc = " Parameters for each TNS filter"]
    pub pTnsParameters: *const TnsParameters,
    #[doc = " Lower borders for each filter.\n Upper border for the first filter is nsbBorders-1.\n Upper borders for other filters is the lower border of previous filter."]
    pub iFilterBorders: [::std::os::raw::c_short; 3usize],
}
impl Default for STnsConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " TNS filter.\n Parameters that define a TNS filter."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct STnsFilter {
    #[doc = " Number of subbands covered by the filter."]
    pub spectrumLength: ::std::os::raw::c_int,
    #[doc = " Filter order."]
    pub order: ::std::os::raw::c_int,
    #[doc = " Quantized filter coefficients."]
    pub coefIndex: [::std::os::raw::c_int; 8usize],
    #[doc = " Prediction gain. The ratio of a signal and TNS residual energy."]
    pub predictionGain: f32,
    #[doc = " Average squared filter coefficient."]
    pub avgSqrCoef: f32,
}
#[doc = " TNS data.\n TNS data describing all active filters."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct STnsData {
    #[doc = " Number of active filters."]
    pub nFilters: ::std::os::raw::c_int,
    #[doc = " Active filters."]
    pub filter: [STnsFilter; 2usize],
}
pub const TNS_ERROR_TNS_NO_ERROR: TNS_ERROR = 0;
pub const TNS_ERROR_TNS_FATAL_ERROR: TNS_ERROR = 1;
pub type TNS_ERROR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCX_config {
    pub tcx_mdct_window: [f32; 420usize],
    pub tcx_aldo_window_1: [f32; 960usize],
    pub tcx_aldo_window_2: [f32; 420usize],
    pub tcx_aldo_window_1_trunc: *mut f32,
    pub last_aldo: ::std::os::raw::c_short,
    pub tcx_mdct_window_half: [f32; 210usize],
    pub tcx_mdct_window_minimum: [f32; 60usize],
    pub tcx_mdct_window_trans: [f32; 60usize],
    pub tcx5Size: ::std::os::raw::c_int,
    pub tcx_curr_overlap_mode: ::std::os::raw::c_short,
    pub tcx_last_overlap_mode: ::std::os::raw::c_short,
    pub tcx_mdct_window_length: ::std::os::raw::c_int,
    pub tcx_mdct_window_half_length: ::std::os::raw::c_int,
    pub tcx_mdct_window_min_length: ::std::os::raw::c_int,
    pub tcx_mdct_window_trans_length: ::std::os::raw::c_int,
    pub tcx_mdct_window_delay: ::std::os::raw::c_int,
    pub tcx_offset: ::std::os::raw::c_int,
    pub tcx_mdct_window_length_old: ::std::os::raw::c_int,
    pub tcx_mdct_windowFB: [f32; 420usize],
    pub tcx_aldo_window_1_FB: [f32; 960usize],
    pub tcx_aldo_window_2_FB: [f32; 420usize],
    pub tcx_aldo_window_1_FB_trunc: *mut f32,
    pub tcx_mdct_window_halfFB: [f32; 210usize],
    pub tcx_mdct_window_minimumFB: [f32; 60usize],
    pub tcx_mdct_window_transFB: [f32; 60usize],
    pub tcx5SizeFB: ::std::os::raw::c_int,
    pub tcx_mdct_window_lengthFB: ::std::os::raw::c_int,
    pub tcx_mdct_window_half_lengthFB: ::std::os::raw::c_int,
    pub tcx_mdct_window_min_lengthFB: ::std::os::raw::c_int,
    pub tcx_mdct_window_trans_lengthFB: ::std::os::raw::c_int,
    pub tcx_mdct_window_delayFB: ::std::os::raw::c_int,
    pub tcx_offsetFB: ::std::os::raw::c_int,
    pub tcx_coded_lines: ::std::os::raw::c_int,
    pub lfacNext: ::std::os::raw::c_int,
    pub lfacNextFB: ::std::os::raw::c_int,
    pub fIsTNSAllowed: ::std::os::raw::c_int,
    pub tnsConfig: [[STnsConfig; 2usize]; 2usize],
    pub pCurrentTnsConfig: *const STnsConfig,
    pub sq_rounding: f32,
    pub tcxRateLoopOpt: ::std::os::raw::c_short,
    pub preemph_fac: f32,
    pub bandwidth: f32,
    pub ctx_hm: ::std::os::raw::c_short,
    pub resq: ::std::os::raw::c_short,
    pub coder_type: ::std::os::raw::c_int,
    pub na_scale: f32,
    pub SFM2: f32,
}
impl Default for TCX_config {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PulseConfig {
    pub bits: ::std::os::raw::c_int,
    pub nbiter: ::std::os::raw::c_int,
    pub alp: f32,
    pub nb_pulse: ::std::os::raw::c_int,
    pub fixedpulses: ::std::os::raw::c_int,
    pub nbpos: [::std::os::raw::c_int; 13usize],
    pub codetrackpos: TRACKPOS,
}
impl Default for PulseConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Tastat {
    pub low: ::std::os::raw::c_int,
    pub high: ::std::os::raw::c_int,
    pub vobf: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FD_CNG_SETUP {
    pub fftlen: ::std::os::raw::c_int,
    pub stopFFTbin: ::std::os::raw::c_int,
    pub numPartitions: ::std::os::raw::c_int,
    pub sidPartitions: *const ::std::os::raw::c_int,
    pub numShapingPartitions: ::std::os::raw::c_int,
    pub shapingPartitions: *const ::std::os::raw::c_int,
}
impl Default for FD_CNG_SETUP {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SCALE_SETUP {
    pub bwmode: ::std::os::raw::c_int,
    pub bitrateFrom: ::std::os::raw::c_int,
    pub bitrateTo: ::std::os::raw::c_int,
    pub scale: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FD_CNG_COM {
    pub FdCngSetup: FD_CNG_SETUP,
    pub numSlots: ::std::os::raw::c_int,
    pub regularStopBand: ::std::os::raw::c_int,
    pub numCoreBands: ::std::os::raw::c_int,
    pub stopBand: ::std::os::raw::c_int,
    pub startBand: ::std::os::raw::c_int,
    pub stopFFTbin: ::std::os::raw::c_int,
    pub frameSize: ::std::os::raw::c_int,
    pub fftlen: ::std::os::raw::c_int,
    pub timeDomainBuffer: [f32; 320usize],
    pub fftBuffer: [f32; 640usize],
    pub olapBufferAna: [f32; 640usize],
    pub olapBufferSynth: [f32; 640usize],
    pub olapBufferSynth2: [f32; 640usize],
    pub olapWinAna: *const f32,
    pub olapWinSyn: *const f32,
    pub fftSineTab: *const f32,
    pub msM_win: f32,
    pub msM_subwin: f32,
    pub msFrCnt_init_counter: ::std::os::raw::c_short,
    pub msFrCnt_init_thresh: ::std::os::raw::c_short,
    pub init_old: f32,
    pub msFrCnt: ::std::os::raw::c_int,
    pub msAlphaCor: [f32; 2usize],
    pub msSlope: [f32; 2usize],
    pub msQeqInvAv: [f32; 2usize],
    pub msMinBufferPtr: ::std::os::raw::c_int,
    pub msPsdSum: [f32; 2usize],
    pub msPeriodogSum: [f32; 2usize],
    pub offsetflag: ::std::os::raw::c_short,
    pub periodog: [f32; 318usize],
    pub cngNoiseLevel: [f32; 340usize],
    pub seed: ::std::os::raw::c_short,
    pub npart: ::std::os::raw::c_int,
    pub midband: [::std::os::raw::c_int; 24usize],
    pub nFFTpart: ::std::os::raw::c_int,
    pub part: [::std::os::raw::c_int; 24usize],
    pub psize: [f32; 24usize],
    pub psize_inv: [f32; 24usize],
    pub FFTscalingFactor: f32,
    pub scalingFactor: f32,
    pub nCLDFBpart: ::std::os::raw::c_int,
    pub CLDFBpart: [::std::os::raw::c_int; 10usize],
    pub CLDFBpsize_inv: [f32; 10usize],
    pub inactive_frame_counter: ::std::os::raw::c_short,
    pub sid_frame_counter: ::std::os::raw::c_short,
    pub active_frame_counter: ::std::os::raw::c_short,
    pub sidNoiseEst: [f32; 24usize],
    pub frame_type_previous: ::std::os::raw::c_int,
    pub A_cng: [f32; 17usize],
    pub exc_cng: [f32; 320usize],
    pub CngBitrate: ::std::os::raw::c_int,
    pub CngBandwidth: ::std::os::raw::c_short,
    pub flag_noisy_speech: ::std::os::raw::c_short,
    pub likelihood_noisy_speech: f32,
}
impl Default for FD_CNG_COM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type HANDLE_FD_CNG_COM = *mut FD_CNG_COM;
#[doc = " Function that gets specific value from p.\n @param p Pointer to a variable that can also be structure or array.\n @param index Index of a variable when p is an array, otherwise 0.\n @param pValue Pointer to the value.\n @return Substructure associated with this value or NULL if there is none."]
pub type TGetParamValue = ::std::option::Option<
    unsafe extern "C" fn(
        p: *const ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void,
>;
#[doc = " Function that puts specific value to p.\n @param p Pointer to a variable that can also be structure or array.\n @param index Index of a variable when p is an array, otherwise 0.\n @param value The value.\n @return Substructure associated with this value or NULL if there is none."]
pub type TSetParamValue = ::std::option::Option<
    unsafe extern "C" fn(
        p: *mut ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void,
>;
#[doc = " Function that return required number of bits for a value when it is coded.\n @param value The value.\n @param index Index of a variable when it is an element of an array, otherwise 0.\n @return Number of bits required to code the value."]
pub type TGetNumberOfBits = ::std::option::Option<
    unsafe extern "C" fn(
        value: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " Function that encodes a value.\n @param value The value.\n @param index Index of a variable when it is an element of an array, otherwise 0.\n @return Coded value."]
pub type TEncodeValue = ::std::option::Option<
    unsafe extern "C" fn(
        value: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " Function that decodes a value.\n @param bitstream Bitstream containing a coded value.\n @param index Index of a variable when it is an element of an array, otherwise 0.\n @param pValue A pointer where the decoded value should be stored.\n @return Number of bits read from the bitstream."]
pub type TDecodeValue = ::std::option::Option<
    unsafe extern "C" fn(
        st: *mut Decoder_State,
        index: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " Structure that defines mapping between a parameter and a bistream."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParamBitMap {
    #[doc = " Number of bits in a bitstream required for the parameter.\n If nBits is equal to 0 then GetNumberOfBits is used."]
    pub nBits: ::std::os::raw::c_int,
    #[doc = " Function to get the number of bits required for a value of this parameter.\n If nBits != 0 it is not used and can be set to NULL.\n If fZeroAllowed == 0 then GetNumberOfBits must take care of this."]
    pub GetNumberOfBits: TGetNumberOfBits,
    #[doc = " If fZeroAllowed is 0 then the value can be zero.\n If the value can't be zero then value-1 is stored in a bitstream.\n If EncodeValue is not equal to NULL, then the encode/decode function\n must take care of this flag - there is no additional processing in parameter bitmapping.\n If EncodeValue is equal to NULL, then the encode/decode function takes care of this."]
    pub fZeroAllowed: ::std::os::raw::c_int,
    #[doc = " Function to get the value of this parameter.\n The function returns a pointer to be used in functions in pSubParamBitMap.\n If the function returns NULL then the same pointer as for the current\n parameter is to be used.\n The function should not do any additional processing if fZeroAllowed == 0,\n but just set the value as it is."]
    pub GetParamValue: TGetParamValue,
    #[doc = " Function to set the value of this parameter.\n The function returns a pointer to be used in functions in pSubParamBitMap.\n If the function returns NULL then the same pointer as for the current\n parameter is to be used.\n The function should not do any additional processing if fZeroAllowed == 0,\n but just set the value as it is."]
    pub SetParamValue: TSetParamValue,
    #[doc = " Function to encode a value of this parameter.\n When it is equal to NULL, fixed-width coding is used.\n If fZeroAllowed == 0 then EncodeValue must take care of this."]
    pub EncodeValue: TEncodeValue,
    #[doc = " Function to decode a value of this parameter.\n When it is equal to NULL, fixed-width coding is used.\n If fZeroAllowed == 0 then DecodeValue must take care of this."]
    pub DecodeValue: TDecodeValue,
    #[doc = " Pointer to the map for substructure.\n The number of structures is determined by this parameter's value.\n NULL means that there is no substructure."]
    pub pSubParamBitMap: *const ParamsBitMap,
}
impl Default for ParamBitMap {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Structure that defines mapping between parameters and a bistream."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParamsBitMap {
    #[doc = " Number of parameters in params."]
    pub nParams: ::std::os::raw::c_int,
    #[doc = " Definition of the mapping for each parameter."]
    pub params: [ParamBitMap; 10usize],
}
impl Default for ParamsBitMap {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TnsParameters {
    pub startLineFrequency: ::std::os::raw::c_int,
    pub nSubdivisions: ::std::os::raw::c_int,
    pub minPredictionGain: f32,
    pub minAvgSqrCoef: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Coding {
    pub value: ::std::os::raw::c_uchar,
    pub code: ::std::os::raw::c_ushort,
    pub nBits: ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SCALE_TCX_SETUP {
    pub bwmode: ::std::os::raw::c_int,
    pub bitrateFrom: ::std::os::raw::c_int,
    pub bitrateTo: ::std::os::raw::c_int,
    pub scale: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FrameSizeParams {
    pub frame_bits: ::std::os::raw::c_ushort,
    pub frame_net_bits: ::std::os::raw::c_ushort,
    pub transmission_bits: ::std::os::raw::c_uchar,
    pub transmission_mode: [::std::os::raw::c_uchar; 2usize],
    pub bandwidth_bits: ::std::os::raw::c_uchar,
    pub bandwidth_min: ::std::os::raw::c_uchar,
    pub bandwidth_max: ::std::os::raw::c_uchar,
    pub reserved_bits: ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CLDFB_FILTER_BANK {
    pub no_channels: ::std::os::raw::c_int,
    pub no_col: ::std::os::raw::c_int,
    pub p_filter_length: ::std::os::raw::c_int,
    pub type_: CLDFB_TYPE,
    pub p_filter: *const f32,
    pub rot_vec_ana_re: *const f32,
    pub rot_vec_ana_im: *const f32,
    pub rot_vec_syn_re: *const f32,
    pub rot_vec_syn_im: *const f32,
    pub memory: *mut f32,
    pub memory_length: ::std::os::raw::c_uint,
    pub cldfb_state: *mut f32,
    pub bandsToZero: ::std::os::raw::c_int,
    pub nab: ::std::os::raw::c_int,
    pub scale: f32,
}
impl Default for CLDFB_FILTER_BANK {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type HANDLE_CLDFB_FILTER_BANK = *mut CLDFB_FILTER_BANK;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TEMPORAL_ENVELOPE_CODING_DECODER {
    pub pGainTemp: [f32; 16usize],
    pub loBuffer: [f32; 22usize],
}
pub type HANDLE_TEC_DEC = *mut TEMPORAL_ENVELOPE_CODING_DECODER;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TEMPORAL_ENVELOPE_CODING_ENCODER {
    pub loBuffer: [f32; 31usize],
    pub loTempEnv: [f32; 16usize],
    pub loTempEnv_ns: [f32; 16usize],
    pub hiTempEnv: [f32; 27usize],
    pub tranFlag: ::std::os::raw::c_int,
    pub corrFlag: ::std::os::raw::c_int,
}
pub type HANDLE_TEC_ENC = *mut TEMPORAL_ENVELOPE_CODING_ENCODER;
pub const FRAME_SIZE_FRAME_0: FRAME_SIZE = 0;
pub const FRAME_SIZE_FRAME_2: FRAME_SIZE = 40;
pub const FRAME_SIZE_FRAME_2_4: FRAME_SIZE = 48;
pub const FRAME_SIZE_FRAME_4: FRAME_SIZE = 80;
pub const FRAME_SIZE_FRAME_5_6: FRAME_SIZE = 112;
pub const FRAME_SIZE_FRAME_7_2: FRAME_SIZE = 144;
pub const FRAME_SIZE_FRAME_8: FRAME_SIZE = 160;
pub const FRAME_SIZE_FRAME_9_6: FRAME_SIZE = 192;
pub const FRAME_SIZE_FRAME_13_2: FRAME_SIZE = 264;
pub const FRAME_SIZE_FRAME_16_4: FRAME_SIZE = 328;
pub const FRAME_SIZE_FRAME_24_4: FRAME_SIZE = 488;
pub const FRAME_SIZE_FRAME_32: FRAME_SIZE = 640;
pub const FRAME_SIZE_FRAME_48: FRAME_SIZE = 960;
pub const FRAME_SIZE_FRAME_64: FRAME_SIZE = 1280;
pub const FRAME_SIZE_FRAME_96: FRAME_SIZE = 1920;
pub const FRAME_SIZE_FRAME_128: FRAME_SIZE = 2560;
pub type FRAME_SIZE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct igf_grid_struct {
    pub swb_offset: [::std::os::raw::c_int; 23usize],
    pub swb_offset_len: ::std::os::raw::c_int,
    pub startFrequency: ::std::os::raw::c_int,
    pub stopFrequency: ::std::os::raw::c_int,
    pub startLine: ::std::os::raw::c_int,
    pub stopLine: ::std::os::raw::c_int,
    pub startSfb: ::std::os::raw::c_int,
    pub stopSfb: ::std::os::raw::c_int,
    pub sfbWrap: [::std::os::raw::c_int; 6usize],
    pub sbWrap: [::std::os::raw::c_int; 5usize],
    pub nTiles: ::std::os::raw::c_int,
    pub minSrcSubband: ::std::os::raw::c_int,
    pub minSrcFrequency: ::std::os::raw::c_int,
    pub tile: [::std::os::raw::c_int; 5usize],
    pub infoIsRefined: ::std::os::raw::c_int,
    pub infoGranuleLen: ::std::os::raw::c_int,
    pub infoTransFac: f32,
    pub whiteningThreshold: [[f32; 5usize]; 2usize],
    pub gFactor: f32,
    pub fFactor: f32,
    pub lFactor: f32,
}
pub type IGF_GRID = igf_grid_struct;
pub type H_IGF_GRID = *mut igf_grid_struct;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IGF_INFO_struct {
    pub nfSeed: ::std::os::raw::c_short,
    pub sampleRate: ::std::os::raw::c_int,
    pub frameLength: ::std::os::raw::c_int,
    pub maxHopsize: ::std::os::raw::c_int,
    pub grid: [IGF_GRID; 3usize],
    pub bitRateIndex: ::std::os::raw::c_short,
}
pub type IGF_INFO = IGF_INFO_struct;
pub type H_IGF_INFO = *mut IGF_INFO_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CONTEXT_HM_CONFIG {
    pub indexBuffer: *mut ::std::os::raw::c_int,
    pub peakIndices: *mut ::std::os::raw::c_int,
    pub holeIndices: *mut ::std::os::raw::c_int,
    pub numPeakIndices: ::std::os::raw::c_int,
    pub numHoleIndices: ::std::os::raw::c_int,
}
impl Default for CONTEXT_HM_CONFIG {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Indice {
    pub value: ::std::os::raw::c_ushort,
    pub nb_bits: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LPD_state {
    pub syn: [f32; 17usize],
    pub old_exc: [f32; 320usize],
    pub mem_w0: f32,
    pub mem_syn: [f32; 16usize],
    pub mem_syn2: [f32; 16usize],
    pub mem_syn_r: [f32; 60usize],
    pub mem_syn3: [f32; 16usize],
    pub tilt_code: f32,
    pub gc_threshold: f32,
    pub Txnq: [f32; 384usize],
    pub acelp_zir: *mut f32,
    pub tcx_target_bits_fac: f32,
}
impl Default for LPD_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PLC_ENC_EVS {
    pub nBits: ::std::os::raw::c_int,
    pub enableGplc: ::std::os::raw::c_int,
    pub T0_4th: ::std::os::raw::c_int,
    pub T0: ::std::os::raw::c_int,
    pub calcOnlylsf: ::std::os::raw::c_int,
    pub pit_min: ::std::os::raw::c_int,
    pub pit_max: ::std::os::raw::c_int,
    pub mem_MA: [f32; 16usize],
    pub mem_AR: [f32; 16usize],
    pub lsfold: [f32; 16usize],
    pub lspold: [f32; 16usize],
    pub lsfoldbfi0: [f32; 16usize],
    pub lsfoldbfi1: [f32; 16usize],
    pub lsf_adaptive_mean: [f32; 16usize],
    pub stab_fac: f32,
    pub LPDmem: *mut LPD_state,
    pub old_exc: [f32; 8usize],
    pub lsf_con: [f32; 16usize],
    pub last_lsf_ref: [f32; 16usize],
    pub last_lsf_con: [f32; 16usize],
}
impl Default for PLC_ENC_EVS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FD_CNG_ENC {
    pub hFdCngCom: HANDLE_FD_CNG_COM,
    pub msPeriodog: [f32; 24usize],
    pub msBminWin: [f32; 24usize],
    pub msBminSubWin: [f32; 24usize],
    pub msPsd: [f32; 24usize],
    pub msAlpha: [f32; 24usize],
    pub msMinBuf: [f32; 144usize],
    pub msCurrentMinOut: [f32; 24usize],
    pub msCurrentMin: [f32; 24usize],
    pub msCurrentMinSubWindow: [f32; 24usize],
    pub msLocalMinFlag: [::std::os::raw::c_int; 24usize],
    pub msNewMinFlag: [::std::os::raw::c_int; 24usize],
    pub msPsdFirstMoment: [f32; 24usize],
    pub msPsdSecondMoment: [f32; 24usize],
    pub msNoiseFloor: [f32; 24usize],
    pub msNoiseEst: [f32; 24usize],
    pub energy_ho: [f32; 24usize],
    pub msNoiseEst_old: [f32; 24usize],
    pub msLogPeriodog: [f32; 24usize],
    pub msLogNoiseEst: [f32; 24usize],
    pub msPeriodogBuf: [f32; 120usize],
    pub msPeriodogBufPtr: ::std::os::raw::c_int,
    pub stopFFTbinDec: ::std::os::raw::c_int,
    pub startBandDec: ::std::os::raw::c_int,
    pub stopBandDec: ::std::os::raw::c_int,
    pub npartDec: ::std::os::raw::c_int,
    pub midbandDec: [::std::os::raw::c_int; 24usize],
    pub nFFTpartDec: ::std::os::raw::c_int,
    pub partDec: [::std::os::raw::c_int; 24usize],
}
impl Default for FD_CNG_ENC {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type HANDLE_FD_CNG_ENC = *mut FD_CNG_ENC;
#[doc = " Delay buffer.\n Used to buffer input samples and to define the subblock size of a transient detector."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DelayBuffer {
    #[doc = " Subblock size of a transient detector that uses this delay buffer."]
    pub nSubblockSize: ::std::os::raw::c_int,
    #[doc = " Delay buffer"]
    pub buffer: [f32; 120usize],
    #[doc = " Size of the delay buffer in use. Maximum delay from all users of this buffer."]
    pub nDelay: ::std::os::raw::c_int,
}
impl Default for DelayBuffer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Subblock energies.\n Holds subblock energies and recursively accumulated energies.\n Also buffers the energies."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubblockEnergies {
    #[doc = " Delay buffer."]
    pub pDelayBuffer: *mut DelayBuffer,
    #[doc = " Subblock energies with a delay buffering."]
    pub subblockNrg: [f32; 24usize],
    #[doc = " Recursively accumulated subblock energies with a delay buffering.\nAt index i the value corresponds to the accumulated subblock energy up to i-1,\nincluding block i-1 and without block i."]
    pub accSubblockNrg: [f32; 25usize],
    #[doc = " subblockNrgChange[i] = max(subblockNrg[i]/subblockNrg[i-1], subblockNrg[i-1]/subblockNrg[i])"]
    pub subblockNrgChange: [f32; 24usize],
    #[doc = " Size of the delay buffer in use, as number of subblocks. Maximum delay from all users of this buffer."]
    pub nDelay: ::std::os::raw::c_int,
    pub nPartialDelay: ::std::os::raw::c_int,
    #[doc = " Decay factor for the recursive accumulation"]
    pub facAccSubblockNrg: f32,
    #[doc = " High-pass filter states (delay line)"]
    pub firState1: f32,
    pub firState2: f32,
}
impl Default for SubblockEnergies {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Attack detection function.\n Definition of a function used for checking the presence of an attack, given subblock energies, accumulated subblock energies and a threshold.\n @param pSubblockNrg Subblock energies.\n @param pAccSubblockNrg Recursively accumulated subblock energies.\nAt index i the value corresponds to the accumulated subblock energy up to i-1,\nincluding block i-1 and without block i.\n @param nSubblocks Number of subblocks available (those with an index >= 0). Subblocks from 0 to NSUBBLOCKS-1 correspond to the current frame.\n @param nPastSubblocks Number of past subblocks available (those with a negative index).\n @param attackRatioThreshold Attack ratio threshold.\n @param pbIsAttackPresent Pointer to an output variable that will be set to TRUE if an attack is found, otherwise set to FALSE.\n @param pAttackIndex Pointer to an output variable that will hold an attack position."]
pub type TCheckSubblocksForAttack = ::std::option::Option<
    unsafe extern "C" fn(
        pSubblockNrg: *const f32,
        pAccSubblockNrg: *const f32,
        nSubblocks: ::std::os::raw::c_int,
        nPastSubblocks: ::std::os::raw::c_int,
        attackRatioThreshold: f32,
        pbIsAttackPresent: *mut ::std::os::raw::c_int,
        pAttackIndex: *mut ::std::os::raw::c_int,
    ),
>;
#[doc = " Transient detector."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TransientDetector {
    #[doc = " Subblock energies used in this transient detector."]
    pub pSubblockEnergies: *mut SubblockEnergies,
    pub nDelay: ::std::os::raw::c_int,
    #[doc = " Number of subblocks to check for transients."]
    pub nSubblocksToCheck: ::std::os::raw::c_int,
    #[doc = " Function for checking a presence of an attack."]
    pub CheckSubblocksForAttack: TCheckSubblocksForAttack,
    #[doc = " Attack ratio threshold."]
    pub attackRatioThreshold: f32,
    #[doc = " True when an attack was detected."]
    pub bIsAttackPresent: ::std::os::raw::c_int,
    #[doc = " The index of an attack."]
    pub attackIndex: ::std::os::raw::c_int,
}
impl Default for TransientDetector {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Transient detection.\n Holds all transient detectors and buffers used by them."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TransientDetection {
    #[doc = " Transient detector."]
    pub transientDetector: TransientDetector,
    #[doc = " Delay buffer used by the transient detectors."]
    pub delayBuffer: DelayBuffer,
    #[doc = " Subblock energies used by the transient detector."]
    pub subblockEnergies: SubblockEnergies,
}
impl Default for TransientDetection {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T_CldfbVadState {
    pub bw_index: ::std::os::raw::c_int,
    pub sp_center: [f32; 4usize],
    pub ltd_stable_rate: [f32; 4usize],
    pub sfm: [f32; 3usize],
    pub f_tonality_rate: [f32; 3usize],
    pub frame_sb_energy: [f32; 12usize],
    pub frames_power: [f32; 56usize],
    pub pre_spec_low_dif: [f32; 56usize],
    pub t_bg_energy: f32,
    pub t_bg_energy_sum: f32,
    pub tbg_energy_count: ::std::os::raw::c_int,
    pub bg_update_count: ::std::os::raw::c_int,
    pub frame_energy_smooth: f32,
    pub smooth_spec_amp: [f32; 60usize],
    pub sb_bg_energy: [f32; 12usize],
    pub pre_snr: [f32; 32usize],
    pub lt_snr_org: f32,
    pub lf_snr_smooth: f32,
    pub l_silence_snr: f32,
    pub l_speech_snr: f32,
    pub l_silence_snr_count: ::std::os::raw::c_int,
    pub l_speech_snr_count: ::std::os::raw::c_int,
    pub fg_energy: f32,
    pub bg_energy: f32,
    pub fg_energy_count: ::std::os::raw::c_int,
    pub bg_energy_count: ::std::os::raw::c_int,
    pub fg_energy_est_start: ::std::os::raw::c_int,
    pub speech_flag: ::std::os::raw::c_int,
    pub continuous_noise_num: ::std::os::raw::c_int,
    pub continuous_speech_num: ::std::os::raw::c_int,
    pub continuous_speech_num2: ::std::os::raw::c_int,
    pub frameloop: ::std::os::raw::c_int,
    pub tonality_rate3: f32,
    pub music_background_rate: f32,
    pub lt_noise_sp_center_diff_sum: f32,
    pub lt_noise_sp_center_diff_counter: f32,
    pub lt_noise_sp_center0: f32,
    pub lt_noise_sp_center3: f32,
    pub lt_bg_highf_eng: f32,
    pub update_num_with_snr: ::std::os::raw::c_int,
    pub update_count: ::std::os::raw::c_int,
    pub warm_hang_num: ::std::os::raw::c_short,
    pub vad_flag_for_bk_update: ::std::os::raw::c_short,
}
impl Default for T_CldfbVadState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igfscfenc_public_data_struct {
    pub ptrBitIndex: ::std::os::raw::c_int,
    pub bitCount: ::std::os::raw::c_int,
    pub prev: [::std::os::raw::c_int; 64usize],
    pub prevSave: [::std::os::raw::c_int; 64usize],
    pub scfCountLongBlock: ::std::os::raw::c_int,
    pub t: ::std::os::raw::c_int,
    pub Tsave: ::std::os::raw::c_int,
    pub contex_saved: ::std::os::raw::c_int,
    pub cf_se00: *const ::std::os::raw::c_ushort,
    pub cf_se01: *const ::std::os::raw::c_ushort,
    pub cf_off_se01: ::std::os::raw::c_short,
    pub cf_se02: *const ::std::os::raw::c_ushort,
    pub cf_off_se02: *const ::std::os::raw::c_short,
    pub cf_se10: *const ::std::os::raw::c_ushort,
    pub cf_off_se10: ::std::os::raw::c_short,
    pub cf_se11: *const ::std::os::raw::c_ushort,
    pub cf_off_se11: *const ::std::os::raw::c_short,
    pub acState: Tastat,
}
impl Default for igfscfenc_public_data_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IGFSCFENC_INSTANCE = igfscfenc_public_data_struct;
pub type IGFSCFENC_INSTANCE_HANDLE = *mut igfscfenc_public_data_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igf_enc_private_data_struct {
    pub igfInfo: IGF_INFO,
    pub igfScfQuantized: [::std::os::raw::c_int; 23usize],
    pub hIGFSCFArithEnc: IGFSCFENC_INSTANCE,
    pub igfCurrWhiteningLevel: [::std::os::raw::c_int; 5usize],
    pub igfPrevWhiteningLevel: [::std::os::raw::c_int; 5usize],
    pub prevSFM_FIR: [f32; 5usize],
    pub prevSFM_IIR: [f32; 5usize],
    pub wasTransient: ::std::os::raw::c_int,
    pub igfBitstream: [UWord8; 320usize],
    pub igfBitstreamBits: ::std::os::raw::c_short,
}
impl Default for igf_enc_private_data_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IGF_ENC_PRIVATE_DATA = igf_enc_private_data_struct;
pub type IGF_ENC_PRIVATE_DATA_HANDLE = *mut igf_enc_private_data_struct;
#[doc = "/ /**\nDefinition of public data for this module"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igf_enc_instance_struct {
    pub igfData: IGF_ENC_PRIVATE_DATA,
    pub infoSamplingRate: ::std::os::raw::c_int,
    pub infoStartFrequency: ::std::os::raw::c_int,
    pub infoStopFrequency: ::std::os::raw::c_int,
    pub infoStartLine: ::std::os::raw::c_int,
    pub infoStopLine: ::std::os::raw::c_int,
    pub infoTotalBitsWritten: ::std::os::raw::c_int,
    pub infoTotalBitsPerFrameWritten: ::std::os::raw::c_int,
    pub infoFrameCount: ::std::os::raw::c_int,
    pub flatteningTrigger: ::std::os::raw::c_int,
    pub spec_be_igf: [f32; 836usize],
    pub tns_predictionGain: f32,
}
impl Default for igf_enc_instance_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "/ /**\nDefinition of public data for this module"]
pub type IGF_ENC_INSTANCE = igf_enc_instance_struct;
#[doc = "/ /**\nDefinition of public data for this module"]
pub type IGF_ENC_INSTANCE_HANDLE = *mut igf_enc_instance_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Encoder_State {
    pub codec_mode: ::std::os::raw::c_short,
    pub last_codec_mode: ::std::os::raw::c_short,
    pub last_codec_mode_cng: ::std::os::raw::c_short,
    pub mdct_sw_enable: ::std::os::raw::c_short,
    pub mdct_sw: ::std::os::raw::c_short,
    pub prev_hi_ener: f32,
    pub prev_hi_sparse: ::std::os::raw::c_short,
    pub clas_sec_old: f32,
    pub clas_final_old: ::std::os::raw::c_short,
    pub last_gain1: f32,
    pub last_gain2: f32,
    pub nb_bits_tot: ::std::os::raw::c_short,
    pub ind_list: *mut Indice,
    pub bitstreamformat: ::std::os::raw::c_short,
    pub next_ind: ::std::os::raw::c_short,
    pub last_ind: ::std::os::raw::c_short,
    pub input_Fs: ::std::os::raw::c_int,
    pub total_brate: ::std::os::raw::c_long,
    pub last_total_brate: ::std::os::raw::c_long,
    pub last_total_brate_cng: ::std::os::raw::c_long,
    pub core: ::std::os::raw::c_short,
    pub core_brate: ::std::os::raw::c_long,
    pub last_core_brate: ::std::os::raw::c_long,
    pub extl: ::std::os::raw::c_short,
    pub last_extl: ::std::os::raw::c_short,
    pub extl_brate: ::std::os::raw::c_long,
    pub input_bwidth: ::std::os::raw::c_short,
    pub bwidth: ::std::os::raw::c_short,
    pub max_bwidth: ::std::os::raw::c_short,
    pub last_input_bwidth: ::std::os::raw::c_short,
    pub last_bwidth: ::std::os::raw::c_short,
    pub last_bwidth_cng: ::std::os::raw::c_short,
    pub L_frame: ::std::os::raw::c_short,
    pub Opt_AMR_WB: ::std::os::raw::c_short,
    pub Opt_DTX_ON: ::std::os::raw::c_short,
    pub cng_type: ::std::os::raw::c_short,
    pub active_cnt: ::std::os::raw::c_short,
    pub Opt_SC_VBR: ::std::os::raw::c_short,
    pub last_Opt_SC_VBR: ::std::os::raw::c_short,
    pub lp_cng_mode2: ::std::os::raw::c_short,
    pub LPDmem: LPD_state,
    pub clas: ::std::os::raw::c_short,
    pub last_clas: ::std::os::raw::c_short,
    pub Bin_E: [f32; 256usize],
    pub Bin_E_old: [f32; 128usize],
    pub lsp_old1: [f32; 16usize],
    pub lsf_old1: [f32; 16usize],
    pub lsp_old: [f32; 16usize],
    pub lsf_old: [f32; 16usize],
    pub lsp_old16k: [f32; 16usize],
    pub lspold_enc: [f32; 16usize],
    pub pstreaklen: ::std::os::raw::c_short,
    pub streaklimit: f32,
    pub offset_scale1: [[::std::os::raw::c_uint; 4usize]; 129usize],
    pub offset_scale2: [[::std::os::raw::c_uint; 4usize]; 129usize],
    pub offset_scale1_p: [[::std::os::raw::c_uint; 4usize]; 146usize],
    pub offset_scale2_p: [[::std::os::raw::c_uint; 4usize]; 146usize],
    pub no_scales: [[::std::os::raw::c_short; 2usize]; 128usize],
    pub no_scales_p: [[::std::os::raw::c_short; 2usize]; 145usize],
    pub stab_fac: f32,
    pub mem_decim: [f32; 90usize],
    pub mem_deemph: f32,
    pub mem_preemph: f32,
    pub mem_hp20_in: [f32; 4usize],
    pub old_inp_12k8: [f32; 240usize],
    pub old_wsp: [f32; 248usize],
    pub old_wsp2: [f32; 115usize],
    pub fr_bands1: [f32; 20usize],
    pub fr_bands2: [f32; 20usize],
    pub mem_wsp: f32,
    pub mem_decim2: [f32; 3usize],
    pub mem_syn1: [f32; 16usize],
    pub clip_var: [f32; 6usize],
    pub past_qua_en: [f32; 4usize],
    pub mem_AR: [f32; 16usize],
    pub mem_MA: [f32; 16usize],
    pub mCb1: ::std::os::raw::c_short,
    pub coder_type_raw: ::std::os::raw::c_short,
    pub last_coder_type_raw: ::std::os::raw::c_short,
    pub last_coder_type: ::std::os::raw::c_short,
    pub ini_frame: ::std::os::raw::c_short,
    pub old_thres: f32,
    pub old_corr: f32,
    pub old_pitch: ::std::os::raw::c_short,
    pub delta_pit: ::std::os::raw::c_short,
    pub ee_old: f32,
    pub min_band: ::std::os::raw::c_short,
    pub max_band: ::std::os::raw::c_short,
    pub tc_cnt: ::std::os::raw::c_short,
    pub audio_frame_cnt: ::std::os::raw::c_short,
    pub old_dE1: f32,
    pub old_ind_deltaMax: ::std::os::raw::c_short,
    pub old_enr_ssf: [f32; 16usize],
    pub spike_hyst: ::std::os::raw::c_short,
    pub music_hysteresis: ::std::os::raw::c_short,
    pub last_harm_flag_acelp: ::std::os::raw::c_short,
    pub old_Aq_12_8: [f32; 17usize],
    pub old_Es_pred: f32,
    pub high_stable_cor: ::std::os::raw::c_short,
    pub seed_tcx: ::std::os::raw::c_short,
    pub cor_strong_limit: ::std::os::raw::c_short,
    pub GSC_noisy_speech: ::std::os::raw::c_short,
    pub mem_last_pit_band: ::std::os::raw::c_short,
    pub mem_w0_tmp: f32,
    pub mem_syn_tmp: [f32; 16usize],
    pub var_cor_t: [f32; 10usize],
    pub mid_dyn: f32,
    pub noise_lev: ::std::os::raw::c_short,
    pub past_dyn_dec: ::std::os::raw::c_short,
    pub Last_frame_ener: f32,
    pub pit_exc_hangover: ::std::os::raw::c_short,
    pub last_exc_dct_in: [f32; 256usize],
    pub last_ener: f32,
    pub last_bitallocation_band: [::std::os::raw::c_short; 6usize],
    pub last_act_dec_hang: ::std::os::raw::c_short,
    pub past_PS: [f32; 67usize],
    pub past_ps_diff: f32,
    pub past_epsP2: f32,
    pub inact_cnt: ::std::os::raw::c_short,
    pub wdrop: f32,
    pub wdlp_0_95_sp: f32,
    pub sp_mus_state: ::std::os::raw::c_short,
    pub past_dec: [::std::os::raw::c_short; 7usize],
    pub past_dlp: [f32; 7usize],
    pub last_lsp: [f32; 6usize],
    pub last_cor_map_sum: f32,
    pub last_non_sta: f32,
    pub past_log_enr: [f32; 15usize],
    pub gsc_thres: [f32; 4usize],
    pub gsc_lt_diff_etot: [f32; 40usize],
    pub gsc_mem_etot: f32,
    pub gsc_last_music_flag: ::std::os::raw::c_short,
    pub gsc_nb_thr_1: ::std::os::raw::c_short,
    pub gsc_nb_thr_3: ::std::os::raw::c_short,
    pub mold_corr: f32,
    pub lt_gpitch: f32,
    pub mean_avr_dyn: f32,
    pub last_sw_dyn: f32,
    pub lt_dec_thres: f32,
    pub ener_RAT: f32,
    pub old_Bin_E: [f32; 126usize],
    pub buf_flux: [f32; 60usize],
    pub buf_pkh: [f32; 60usize],
    pub buf_epsP_tilt: [f32; 60usize],
    pub buf_cor_map_sum: [f32; 60usize],
    pub buf_Ntonal: [f32; 60usize],
    pub buf_Ntonal2: [f32; 60usize],
    pub buf_Ntonal_lf: [f32; 60usize],
    pub buf_dlp: [f32; 10usize],
    pub onset_cnt: ::std::os::raw::c_short,
    pub buf_etot: [f32; 4usize],
    pub attack_hangover: ::std::os::raw::c_short,
    pub dec_mov: f32,
    pub dec_mov1: f32,
    pub mov_log_max_spl: f32,
    pub old_lt_diff: [f32; 2usize],
    pub UV_cnt1: ::std::os::raw::c_short,
    pub LT_UV_cnt1: f32,
    pub lt_music_hangover: ::std::os::raw::c_short,
    pub tonality2_buf: [f32; 8usize],
    pub tonality3_buf: [f32; 8usize],
    pub LPCErr_buf: [f32; 8usize],
    pub lt_music_state: ::std::os::raw::c_short,
    pub lt_speech_state: ::std::os::raw::c_short,
    pub lt_speech_hangover: ::std::os::raw::c_short,
    pub lpe_buf: [f32; 8usize],
    pub voicing_buf: [f32; 8usize],
    pub gsc_hangover: ::std::os::raw::c_short,
    pub sparse_buf: [f32; 8usize],
    pub hf_spar_buf: [f32; 8usize],
    pub LT_sparse: f32,
    pub gsc_cnt: ::std::os::raw::c_short,
    pub Last_pulse_pos: ::std::os::raw::c_short,
    pub lsfoldbfi0: [f32; 16usize],
    pub lsfoldbfi1: [f32; 16usize],
    pub lsf_adaptive_mean: [f32; 16usize],
    pub next_force_safety_net: ::std::os::raw::c_short,
    pub old_S: [f32; 128usize],
    pub cor_map: [f32; 128usize],
    pub noise_char: f32,
    pub ave_enr2: [f32; 20usize],
    pub act_pred: f32,
    pub multi_harm_limit: f32,
    pub enrO: [f32; 20usize],
    pub bckr: [f32; 20usize],
    pub ave_enr: [f32; 20usize],
    pub pitO: ::std::os::raw::c_short,
    pub aEn: ::std::os::raw::c_short,
    pub totalNoise: f32,
    pub first_noise_updt: ::std::os::raw::c_short,
    pub harm_cor_cnt: ::std::os::raw::c_short,
    pub bg_cnt: ::std::os::raw::c_short,
    pub prim_act_quick: f32,
    pub prim_act_slow: f32,
    pub prim_act: f32,
    pub prim_act_quick_he: f32,
    pub prim_act_slow_he: f32,
    pub prim_act_he: f32,
    pub Etot_l: f32,
    pub Etot_h: f32,
    pub Etot_l_lp: f32,
    pub Etot_last: f32,
    pub Etot_lp: f32,
    pub lt_tn_track: f32,
    pub lt_tn_dist: f32,
    pub lt_Ellp_dist: f32,
    pub lt_haco_ev: f32,
    pub low_tn_track_cnt: ::std::os::raw::c_short,
    pub epsP_0_2_lp: f32,
    pub epsP_0_2_ad_lp: f32,
    pub epsP_2_16_lp: f32,
    pub epsP_2_16_lp2: f32,
    pub epsP_2_16_dlp_lp: f32,
    pub epsP_2_16_dlp_lp2: f32,
    pub lt_aEn_zero: f32,
    pub Etot_st_est: f32,
    pub Etot_sq_st_est: f32,
    pub nb_active_frames: ::std::os::raw::c_short,
    pub hangover_cnt: ::std::os::raw::c_short,
    pub lp_speech: f32,
    pub Etot_v_h2: f32,
    pub sign_dyn_lp: f32,
    pub nb_active_frames_he: ::std::os::raw::c_short,
    pub hangover_cnt_he: ::std::os::raw::c_short,
    pub nb_active_frames_HE_SAD: ::std::os::raw::c_short,
    pub vad_flag_reg_H: ::std::os::raw::c_long,
    pub vad_flag_reg_L: ::std::os::raw::c_long,
    pub vad_prim_reg: ::std::os::raw::c_long,
    pub vad_flag_cnt_50: ::std::os::raw::c_short,
    pub vad_prim_cnt_16: ::std::os::raw::c_short,
    pub hangover_cnt_dtx: ::std::os::raw::c_short,
    pub hangover_cnt_music: ::std::os::raw::c_short,
    pub bcg_flux: f32,
    pub soft_hangover: ::std::os::raw::c_short,
    pub voiced_burst: ::std::os::raw::c_short,
    pub bcg_flux_init: ::std::os::raw::c_short,
    pub voicing_old: f32,
    pub nb_active_frames_he1: ::std::os::raw::c_short,
    pub hangover_cnt_he1: ::std::os::raw::c_short,
    pub bckr_tilt_lt: f32,
    pub var_SID_rate_flag: ::std::os::raw::c_short,
    pub lp_ener: f32,
    pub cng_seed: ::std::os::raw::c_short,
    pub lspCNG: [f32; 16usize],
    pub first_CNG: ::std::os::raw::c_short,
    pub lp_noise: f32,
    pub cnt_SID: ::std::os::raw::c_short,
    pub max_SID: ::std::os::raw::c_short,
    pub interval_SID: ::std::os::raw::c_short,
    pub old_enr_index: ::std::os::raw::c_short,
    pub Enew: f32,
    pub VarDTX_cnt_voiced: ::std::os::raw::c_short,
    pub lt_ener_voiced: f32,
    pub VarDTX_cnt_noise: ::std::os::raw::c_short,
    pub lt_ener_noise: f32,
    pub lt_ener_last_SID: f32,
    pub cng_hist_size: ::std::os::raw::c_short,
    pub cng_hist_ptr: ::std::os::raw::c_short,
    pub cng_lsp_hist: [f32; 128usize],
    pub cng_ener_hist: [f32; 8usize],
    pub cng_cnt: ::std::os::raw::c_short,
    pub cng_ener_seed: ::std::os::raw::c_short,
    pub cng_ener_seed1: ::std::os::raw::c_short,
    pub frame_ener: f32,
    pub lp_sp_enr: f32,
    pub last_allow_cn_step: ::std::os::raw::c_short,
    pub ho_hist_size: ::std::os::raw::c_short,
    pub ho_hist_ptr: ::std::os::raw::c_short,
    pub ho_sid_bw: ::std::os::raw::c_long,
    pub ho_lsp_hist: [f32; 128usize],
    pub ho_ener_hist: [f32; 8usize],
    pub ho_env_hist: [f32; 160usize],
    pub act_cnt: ::std::os::raw::c_short,
    pub ho_circ_size: ::std::os::raw::c_short,
    pub ho_circ_ptr: ::std::os::raw::c_short,
    pub ho_lsp_circ: [f32; 128usize],
    pub ho_ener_circ: [f32; 8usize],
    pub ho_env_circ: [f32; 160usize],
    pub burst_ho_cnt: ::std::os::raw::c_short,
    pub cng_buf_cnt: ::std::os::raw::c_short,
    pub cng_exc2_buf: [f32; 2048usize],
    pub cng_brate_buf: [::std::os::raw::c_long; 8usize],
    pub CNG_mode: ::std::os::raw::c_short,
    pub last_active_brate: ::std::os::raw::c_long,
    pub ho_16k_lsp: [::std::os::raw::c_short; 8usize],
    pub last_CNG_L_frame: ::std::os::raw::c_short,
    pub act_cnt2: ::std::os::raw::c_short,
    pub ho_lsp_circ2: [f32; 128usize],
    pub num_ho: ::std::os::raw::c_short,
    pub hangover_terminate_flag: ::std::os::raw::c_short,
    pub old_env: [f32; 20usize],
    pub lp_env: [f32; 20usize],
    pub cng_res_env: [f32; 160usize],
    pub exc_mem: [f32; 24usize],
    pub exc_mem1: [f32; 30usize],
    pub exc_mem2: [f32; 30usize],
    pub dispMem: [f32; 8usize],
    pub uv_count: ::std::os::raw::c_short,
    pub act_count: ::std::os::raw::c_short,
    pub ge_sm: f32,
    pub lspold_s: [f32; 16usize],
    pub noimix_seed: ::std::os::raw::c_short,
    pub min_alpha: f32,
    pub exc_pe: f32,
    pub last_L_frame: ::std::os::raw::c_short,
    pub mem_decim16k: [f32; 90usize],
    pub mem_preemph16k: f32,
    pub old_inp_16k: [f32; 240usize],
    pub mem_deemp_preQ: f32,
    pub mem_preemp_preQ: f32,
    pub last_nq_preQ: ::std::os::raw::c_short,
    pub use_acelp_preq: ::std::os::raw::c_short,
    pub bpf_off: ::std::os::raw::c_short,
    pub old_pitch_buf: [f32; 10usize],
    pub pst_mem_deemp_err: f32,
    pub pst_lp_ener: f32,
    pub lps: f32,
    pub lpm: f32,
    pub voicing0_sm: f32,
    pub voicing_sm: f32,
    pub LF_EnergyRatio_sm: f32,
    pub predecision_flag: ::std::os::raw::c_short,
    pub diff_sm: f32,
    pub energy_sm: f32,
    pub gain_alpha: f32,
    pub mem_hf2_enc: [f32; 30usize],
    pub mem_hp400_enc: [f32; 4usize],
    pub mem_hf_enc: [f32; 30usize],
    pub mem_syn_hf_enc: [f32; 16usize],
    pub seed2_enc: ::std::os::raw::c_short,
    pub cldfbAnaEnc: HANDLE_CLDFB_FILTER_BANK,
    pub cldfbSynTd: HANDLE_CLDFB_FILTER_BANK,
    pub hFdCngEnc: HANDLE_FD_CNG_ENC,
    pub fd_cng_reset_flag: ::std::os::raw::c_short,
    pub last_totalNoise: f32,
    pub totalNoise_increase_hist: [f32; 4usize],
    pub totalNoise_increase_len: ::std::os::raw::c_short,
    pub vadsnr: f32,
    pub vadnoise: f32,
    pub shape1_filt_mem: [f32; 20usize],
    pub shape2_filt_mem: [f32; 20usize],
    pub shape3_filt_mem: [f32; 20usize],
    pub txlpf1_filt1_mem: [f32; 20usize],
    pub txlpf1_filt2_mem: [f32; 20usize],
    pub txhpf1_filt1_mem: [f32; 20usize],
    pub txhpf1_filt2_mem: [f32; 20usize],
    pub bp1_filt_mem_wb: [f32; 8usize],
    pub nelp_lp_fit_mem: [f32; 16usize],
    pub bp1_filt_mem_nb: [f32; 14usize],
    pub nelp_enc_seed: ::std::os::raw::c_short,
    pub nelp_gain_mem: f32,
    pub last_nelp_mode: ::std::os::raw::c_short,
    pub nelp_mode: ::std::os::raw::c_short,
    pub pppcountE: ::std::os::raw::c_short,
    pub bump_up: ::std::os::raw::c_short,
    pub last_ppp_mode: ::std::os::raw::c_short,
    pub last_last_ppp_mode: ::std::os::raw::c_short,
    pub ppp_mode: ::std::os::raw::c_short,
    pub prev_ppp_gain_pit: f32,
    pub prev_tilt_code: f32,
    pub firstTime_voicedenc: ::std::os::raw::c_int,
    pub dtfs_enc_a: [f32; 102usize],
    pub dtfs_enc_b: [f32; 102usize],
    pub dtfs_enc_lag: ::std::os::raw::c_int,
    pub dtfs_enc_nH: ::std::os::raw::c_int,
    pub dtfs_enc_nH_4kHz: ::std::os::raw::c_int,
    pub dtfs_enc_upper_cut_off_freq_of_interest: f32,
    pub dtfs_enc_upper_cut_off_freq: f32,
    pub prev_cw_en: f32,
    pub ph_offset_E: f32,
    pub lastLgainE: f32,
    pub lastHgainE: f32,
    pub lasterbE: [f32; 24usize],
    pub mode_QQF: ::std::os::raw::c_short,
    pub rate_control: ::std::os::raw::c_short,
    pub SNR_THLD: f32,
    pub Q_to_F: ::std::os::raw::c_short,
    pub pattern_m: ::std::os::raw::c_short,
    pub patterncount: ::std::os::raw::c_short,
    pub Last_Resort: ::std::os::raw::c_short,
    pub numactive: ::std::os::raw::c_short,
    pub sum_of_rates: f32,
    pub global_avr_rate: f32,
    pub global_frame_cnt: ::std::os::raw::c_int,
    pub set_ppp_generic: ::std::os::raw::c_short,
    pub avoid_HQ_VBR_NB: ::std::os::raw::c_short,
    pub input_buff: [f32; 1965usize],
    pub input: *mut f32,
    pub old_input_signal: *mut f32,
    pub old_hpfilt_in: f32,
    pub old_hpfilt_out: f32,
    pub EnergyLT: f32,
    pub Energy_Old: f32,
    pub TransientHangOver: ::std::os::raw::c_short,
    pub old_out: [f32; 640usize],
    pub last_core: ::std::os::raw::c_short,
    pub hq_generic_speech_class: ::std::os::raw::c_short,
    pub mode_count: ::std::os::raw::c_short,
    pub mode_count1: ::std::os::raw::c_short,
    pub Nb_ACELP_frames: ::std::os::raw::c_short,
    pub prev_Npeaks: ::std::os::raw::c_short,
    pub prev_peaks: [::std::os::raw::c_short; 24usize],
    pub hvq_hangover: ::std::os::raw::c_short,
    pub prev_hqswb_clas: ::std::os::raw::c_short,
    pub prev_SWB_peak_pos: [::std::os::raw::c_short; 4usize],
    pub last_vad_spa: ::std::os::raw::c_short,
    pub lt_old_mode: [::std::os::raw::c_short; 3usize],
    pub lt_voicing: f32,
    pub lt_corr: f32,
    pub lt_tonality: f32,
    pub lt_corr_pitch: [::std::os::raw::c_short; 3usize],
    pub lt_hangover: ::std::os::raw::c_short,
    pub lowrate_pitchGain: f32,
    pub prev_frm_index: [::std::os::raw::c_short; 2usize],
    pub prev_frm_hfe2: ::std::os::raw::c_short,
    pub prev_stab_hfe2: ::std::os::raw::c_short,
    pub prev_ni_ratio: f32,
    pub prev_En_sb: [f32; 4usize],
    pub last_bitalloc_max_band: [::std::os::raw::c_short; 2usize],
    pub last_ni_gain: [f32; 32usize],
    pub last_env: [f32; 32usize],
    pub last_max_pos_pulse: ::std::os::raw::c_short,
    pub rc_low: ::std::os::raw::c_uint,
    pub rc_range: ::std::os::raw::c_uint,
    pub rc_cache: ::std::os::raw::c_short,
    pub rc_carry: ::std::os::raw::c_short,
    pub rc_carry_count: ::std::os::raw::c_short,
    pub rc_num_bits: ::std::os::raw::c_short,
    pub rc_tot_bits: ::std::os::raw::c_short,
    pub rc_offset: ::std::os::raw::c_short,
    pub old_speech_shb: [f32; 220usize],
    pub old_speech_wb: [f32; 55usize],
    pub old_input_fhb: [f32; 93usize],
    pub prev_lsp_shb: [f32; 10usize],
    pub state_ana_filt_shb: [f32; 7usize],
    pub cldfbHBLT: f32,
    pub mem_csfilt: [f32; 2usize],
    pub state_syn_shbexc: [f32; 20usize],
    pub state_lpc_syn: [f32; 10usize],
    pub old_bwe_exc: [f32; 578usize],
    pub bwe_seed: [::std::os::raw::c_short; 2usize],
    pub bwe_non_lin_prev_scale: f32,
    pub old_bwe_exc_extended: [f32; 12usize],
    pub syn_overlap: [f32; 20usize],
    pub decim_state1: [f32; 7usize],
    pub decim_state2: [f32; 7usize],
    pub mem_genSHBexc_filt_down_wb2: [f32; 7usize],
    pub mem_genSHBexc_filt_down_wb3: [f32; 7usize],
    pub mem_genSHBexc_filt_down_shb: [f32; 7usize],
    pub elliptic_bpf_2_48k_mem: [[f32; 4usize]; 4usize],
    pub prev_fb_energy: f32,
    pub prev_gainFr_SHB: f32,
    pub lsp_shb_slow_interpl: [f32; 10usize],
    pub lsp_shb_fast_interpl: [f32; 10usize],
    pub shb_inv_filt_mem: [f32; 10usize],
    pub lsp_shb_spacing: [f32; 3usize],
    pub prev_swb_GainShape: f32,
    pub prev_frGainAtten: ::std::os::raw::c_short,
    pub spectral_tilt_reset: ::std::os::raw::c_short,
    pub consec_inactive: ::std::os::raw::c_short,
    pub ra_deltasum: f32,
    pub trigger_SID: ::std::os::raw::c_short,
    pub running_avg: f32,
    pub snr_sum_vad: f32,
    pub prev_wb_GainShape: f32,
    pub swb_lsp_prev_interp: [f32; 10usize],
    pub fb_state_lpc_syn: [f32; 10usize],
    pub fb_tbe_demph: f32,
    pub tilt_mem: f32,
    pub prev_coder_type: ::std::os::raw::c_short,
    pub prev_lsf_diff: [f32; 8usize],
    pub prev_tilt_para: f32,
    pub cur_sub_Aq: [f32; 17usize],
    pub lsf_idx: [::std::os::raw::c_short; 5usize],
    pub m_idx: ::std::os::raw::c_short,
    pub grid_idx: ::std::os::raw::c_short,
    pub idxSubGains: ::std::os::raw::c_short,
    pub idxFrameGain: ::std::os::raw::c_short,
    pub idx_shb_fr_gain: ::std::os::raw::c_short,
    pub idx_res_gs: [::std::os::raw::c_short; 5usize],
    pub idx_mixFac: ::std::os::raw::c_short,
    pub lsf_WB: ::std::os::raw::c_short,
    pub gFrame_WB: ::std::os::raw::c_short,
    pub idxGain: ::std::os::raw::c_short,
    pub dec_2_over_3_mem: [f32; 12usize],
    pub dec_2_over_3_mem_lp: [f32; 6usize],
    pub new_input_hp: [f32; 171usize],
    pub old_input: [f32; 153usize],
    pub old_input_wb: [f32; 36usize],
    pub old_input_lp: [f32; 176usize],
    pub old_syn_12k8_16k: [f32; 36usize],
    pub old_fdbwe_speech: [f32; 960usize],
    pub mem_deemph_old_syn: f32,
    pub prev_mode: ::std::os::raw::c_short,
    pub old_wtda_swb: [f32; 960usize],
    pub prev_L_swb_norm1: ::std::os::raw::c_short,
    pub prev_global_gain: f32,
    pub modeCount: ::std::os::raw::c_short,
    pub EnergyLF: f32,
    pub tbe_demph: f32,
    pub tbe_premph: f32,
    pub mem_stp_swb: [f32; 10usize],
    pub ptr_mem_stp_swb: *mut f32,
    pub gain_prec_swb: f32,
    pub mem_zero_swb: [f32; 10usize],
    pub lt_mean_NB: f32,
    pub lt_mean_WB: f32,
    pub lt_mean_SWB: f32,
    pub count_WB: ::std::os::raw::c_short,
    pub count_SWB: ::std::os::raw::c_short,
    pub count_FB: ::std::os::raw::c_short,
    pub last_vad: ::std::os::raw::c_short,
    pub last_wb_cng_ener: f32,
    pub last_shb_cng_ener: f32,
    pub mov_wb_cng_ener: f32,
    pub mov_shb_cng_ener: f32,
    pub shb_cng_ini_cnt: ::std::os::raw::c_short,
    pub last_SID_bwidth: ::std::os::raw::c_short,
    pub shb_NO_DATA_cnt: ::std::os::raw::c_short,
    pub rf_mode: ::std::os::raw::c_short,
    pub rf_mode_last: ::std::os::raw::c_short,
    pub last_rf_mode_cng: ::std::os::raw::c_short,
    pub Opt_RF_ON: ::std::os::raw::c_short,
    pub rf_frame_type: ::std::os::raw::c_short,
    pub rf_target_bits_write: ::std::os::raw::c_short,
    pub rf_fec_offset: ::std::os::raw::c_short,
    pub rf_targetbits_buff: [::std::os::raw::c_short; 9usize],
    pub rf_indx_frametype: [::std::os::raw::c_int; 9usize],
    pub rf_mem_w0: f32,
    pub rf_clip_var: [f32; 6usize],
    pub rf_tilt_code: f32,
    pub rf_mem_syn2: [f32; 16usize],
    pub rf_dispMem: [f32; 8usize],
    pub rf_gc_threshold: f32,
    pub rf_target_bits: ::std::os::raw::c_short,
    pub rf_tilt_buf: [f32; 5usize],
    pub rf_indx_lsf: [[::std::os::raw::c_short; 3usize]; 9usize],
    pub rf_indx_pitch: [[::std::os::raw::c_int; 5usize]; 9usize],
    pub rf_indx_fcb: [[::std::os::raw::c_int; 5usize]; 9usize],
    pub rf_indx_gain: [[::std::os::raw::c_int; 5usize]; 9usize],
    pub rf_indx_EsPred: [::std::os::raw::c_int; 9usize],
    pub rf_indx_ltfMode: [[::std::os::raw::c_int; 5usize]; 9usize],
    pub rf_indx_nelp_fid: [::std::os::raw::c_short; 9usize],
    pub rf_indx_nelp_iG1: [::std::os::raw::c_short; 9usize],
    pub rf_indx_nelp_iG2: [[::std::os::raw::c_short; 2usize]; 9usize],
    pub rf_indx_tbeGainFr: [::std::os::raw::c_short; 9usize],
    pub rf_tcxltp_pitch_int_past: ::std::os::raw::c_int,
    pub rf_last_tns_active: ::std::os::raw::c_int,
    pub rf_second_last_tns_active: ::std::os::raw::c_int,
    pub rf_second_last_core: ::std::os::raw::c_int,
    pub rf_clas: [::std::os::raw::c_short; 9usize],
    pub rf_gain_tcx: [::std::os::raw::c_int; 9usize],
    pub rf_tcxltp_param: [::std::os::raw::c_int; 9usize],
    pub rf_fec_indicator: ::std::os::raw::c_short,
    pub RF_bwe_gainFr_ind: ::std::os::raw::c_short,
    pub frame_size_index: ::std::os::raw::c_int,
    pub bits_frame_nominal: ::std::os::raw::c_int,
    pub bits_frame: ::std::os::raw::c_int,
    pub bits_frame_core: ::std::os::raw::c_int,
    pub narrowBand: ::std::os::raw::c_int,
    pub acelp_cfg: ACELP_config,
    pub acelp_cfg_rf: ACELP_config,
    pub tcx_cfg: TCX_config,
    pub L_frameTCX: ::std::os::raw::c_int,
    pub mem_preemph_enc: f32,
    pub speech_enc: *mut f32,
    pub speech_enc_pe: *mut f32,
    pub new_speech_enc: *mut f32,
    pub new_speech_enc_pe: *mut f32,
    pub buf_speech_enc: [f32; 1280usize],
    pub buf_speech_enc_pe: [f32; 1280usize],
    pub wspeech_enc: *mut f32,
    pub buf_wspeech_enc: [f32; 844usize],
    pub synth: *mut f32,
    pub buf_synth: [f32; 1440usize],
    pub speech_TCX: *mut f32,
    pub new_speech_TCX: *mut f32,
    pub spectrum: [*mut f32; 2usize],
    pub spectrum_long: [f32; 1200usize],
    pub noiseTiltFactor: f32,
    pub noiseLevelMemory: ::std::os::raw::c_int,
    pub tnsData: [STnsData; 2usize],
    pub fUseTns: [::std::os::raw::c_int; 2usize],
    pub enableTcxLpc: ::std::os::raw::c_int,
    pub envWeighted: ::std::os::raw::c_int,
    pub acelpEnabled: ::std::os::raw::c_int,
    pub tcx10Enabled: ::std::os::raw::c_int,
    pub tcx20Enabled: ::std::os::raw::c_int,
    pub tcxMode: ::std::os::raw::c_short,
    pub mem_wsp_enc: f32,
    pub nb_bits_header_ace: ::std::os::raw::c_int,
    pub nb_bits_header_tcx: ::std::os::raw::c_int,
    pub restrictedMode: ::std::os::raw::c_short,
    pub nb_subfr: ::std::os::raw::c_int,
    pub preemph_fac: f32,
    pub gamma: f32,
    pub transientDetection: TransientDetection,
    pub transient_info: [::std::os::raw::c_int; 3usize],
    pub acelpFramesCount: ::std::os::raw::c_int,
    pub prevTempFlatness: f32,
    pub prevEnergyHF: f32,
    pub currEnergyHF: f32,
    pub currEnergyLookAhead: f32,
    pub lpcQuantization: ::std::os::raw::c_int,
    pub encoderLookahead_enc: ::std::os::raw::c_int,
    pub encoderPastSamples_enc: ::std::os::raw::c_int,
    pub encoderLookahead_FB: ::std::os::raw::c_int,
    pub old_pitch_la: ::std::os::raw::c_int,
    pub old_voicing_la: f32,
    pub tcxonly: ::std::os::raw::c_int,
    pub flag_noisy_speech_snr: ::std::os::raw::c_short,
    pub Pos_relE_cnt: ::std::os::raw::c_short,
    pub fscale: ::std::os::raw::c_int,
    pub sr_core: ::std::os::raw::c_int,
    pub acelp_autocorr: ::std::os::raw::c_int,
    pub pit_min: ::std::os::raw::c_int,
    pub pit_fr1: ::std::os::raw::c_int,
    pub pit_fr1b: ::std::os::raw::c_int,
    pub pit_fr2: ::std::os::raw::c_int,
    pub pit_max: ::std::os::raw::c_int,
    pub pit_res_max: ::std::os::raw::c_int,
    pub L_frame_past: ::std::os::raw::c_int,
    pub memQuantZeros: [::std::os::raw::c_int; 1200usize],
    pub bpf_gain_param: ::std::os::raw::c_int,
    pub mem_bpf: [f32; 30usize],
    pub mem_error_bpf: [f32; 30usize],
    pub tcxltp: ::std::os::raw::c_int,
    pub tcxltp_pitch_int: ::std::os::raw::c_int,
    pub tcxltp_pitch_fr: ::std::os::raw::c_int,
    pub tcxltp_gain: f32,
    pub tcxltp_pitch_int_past: ::std::os::raw::c_int,
    pub tcxltp_pitch_fr_past: ::std::os::raw::c_int,
    pub tcxltp_gain_past: f32,
    pub tcxltp_norm_corr_past: f32,
    pub buf_speech_ltp: [f32; 1280usize],
    pub speech_ltp: *mut f32,
    pub new_speech_ltp: *mut f32,
    pub tcxltp_filt_idx: ::std::os::raw::c_short,
    pub tcxltp_bits: ::std::os::raw::c_int,
    pub tcxltp_param: [::std::os::raw::c_int; 3usize],
    pub measuredBwRatio: f32,
    pub nmStartLine: ::std::os::raw::c_int,
    pub glr: ::std::os::raw::c_short,
    pub glr_idx: [::std::os::raw::c_short; 2usize],
    pub mean_gc: [f32; 2usize],
    pub prev_lsf4_mean: f32,
    pub glr_reset: ::std::os::raw::c_short,
    pub last_sr_core: ::std::os::raw::c_int,
    pub last_stab_fac: f32,
    pub rate_switching_reset: ::std::os::raw::c_short,
    pub rate_switching_reset_16kHz: ::std::os::raw::c_short,
    pub enablePlcWaveadjust: ::std::os::raw::c_short,
    pub Tonal_SideInfo: ::std::os::raw::c_short,
    pub seed_acelp: ::std::os::raw::c_short,
    pub tcx_lpc_shaped_ari: ::std::os::raw::c_short,
    pub plcExt: PLC_ENC_EVS,
    pub vad_st: T_CldfbVadState,
    pub hIGFEnc: IGF_ENC_INSTANCE,
    pub igf: ::std::os::raw::c_short,
    pub tec_tfa: ::std::os::raw::c_short,
    pub tecEnc: TEMPORAL_ENVELOPE_CODING_ENCODER,
    pub tec_flag: ::std::os::raw::c_short,
    pub tfa_flag: ::std::os::raw::c_short,
    pub tfa_enr: [f32; 16usize],
    pub vbr_generic_ho: ::std::os::raw::c_short,
    pub last_7k2_coder_type: ::std::os::raw::c_short,
    pub sharpFlag: ::std::os::raw::c_short,
    pub Local_VAD: ::std::os::raw::c_short,
}
impl Default for Encoder_State {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GainItemStr {
    pub nmrValue: f32,
    pub gainIndex: ::std::os::raw::c_short,
}
pub type GainItem = GainItemStr;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ACELP_CbkCorr {
    pub xx: f32,
    pub y1y1: f32,
    pub y2y2: f32,
    pub xy1: f32,
    pub xy2: f32,
    pub y1y2: f32,
}
pub type HANDLE_PLC_ENC_EVS = *mut PLC_ENC_EVS;
pub const _DEC_MODE_DEC_NO_FRAM_LOSS: _DEC_MODE = 0;
pub const _DEC_MODE_DEC_CONCEALMENT_EXT: _DEC_MODE = 1;
pub type _DEC_MODE = ::std::os::raw::c_uint;
pub use self::_DEC_MODE as DEC_MODE;
#[doc = "< frame available"]
pub const frameMode_FRAMEMODE_NORMAL: frameMode = 0;
#[doc = "< frame missing => conceal"]
pub const frameMode_FRAMEMODE_MISSING: frameMode = 1;
pub const frameMode_FRAMEMODE_FUTURE: frameMode = 2;
pub type frameMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FD_CNG_DEC {
    pub hFdCngCom: HANDLE_FD_CNG_COM,
    pub msPeriodog: [f32; 62usize],
    pub msBminWin: [f32; 62usize],
    pub msBminSubWin: [f32; 62usize],
    pub msPsd: [f32; 62usize],
    pub msAlpha: [f32; 62usize],
    pub msMinBuf: [f32; 372usize],
    pub msCurrentMinOut: [f32; 62usize],
    pub msCurrentMin: [f32; 62usize],
    pub msCurrentMinSubWindow: [f32; 62usize],
    pub msLocalMinFlag: [::std::os::raw::c_int; 62usize],
    pub msNewMinFlag: [::std::os::raw::c_int; 62usize],
    pub msPsdFirstMoment: [f32; 62usize],
    pub msPsdSecondMoment: [f32; 62usize],
    pub msNoiseFloor: [f32; 62usize],
    pub msNoiseEst: [f32; 62usize],
    pub msLogPeriodog: [f32; 62usize],
    pub msLogNoiseEst: [f32; 62usize],
    pub npart_shaping: ::std::os::raw::c_int,
    pub nFFTpart_shaping: ::std::os::raw::c_int,
    pub part_shaping: [::std::os::raw::c_int; 62usize],
    pub midband_shaping: [::std::os::raw::c_int; 62usize],
    pub psize_shaping: [f32; 62usize],
    pub psize_inv_shaping: [f32; 62usize],
    pub bandNoiseShape: [f32; 320usize],
    pub partNoiseShape: [f32; 24usize],
    pub flag_dtx_mode: ::std::os::raw::c_short,
    pub lp_speech: f32,
    pub lp_noise: f32,
    pub msPeriodogBuf: [f32; 310usize],
    pub msPeriodogBufPtr: ::std::os::raw::c_int,
}
impl Default for FD_CNG_DEC {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type HANDLE_FD_CNG_DEC = *mut FD_CNG_DEC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T_PLCInfo {
    pub FrameSize: ::std::os::raw::c_int,
    pub Pitch: ::std::os::raw::c_int,
    pub T_bfi: ::std::os::raw::c_int,
    pub Transient: [::std::os::raw::c_int; 3usize],
    pub TCX_Tonality: [::std::os::raw::c_int; 10usize],
    pub outx_new_n1: f32,
    pub nsapp_gain: f32,
    pub nsapp_gain_n: f32,
    pub data_reci2: [f32; 960usize],
    pub data_noise: [f32; 960usize],
    pub ener_mean: f32,
    pub ener: f32,
    pub zp: ::std::os::raw::c_int,
    pub recovery_gain: f32,
    pub step_concealgain: f32,
    pub concealment_method: ::std::os::raw::c_int,
    pub subframe: ::std::os::raw::c_int,
    pub nbLostCmpt: ::std::os::raw::c_int,
    pub seed: ::std::os::raw::c_short,
}
impl Default for T_PLCInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const TONALMDCTCONCEAL_ERROR_TONALMDCTCONCEAL_OK: TONALMDCTCONCEAL_ERROR = 0;
pub const TONALMDCTCONCEAL_ERROR___error_codes_start: TONALMDCTCONCEAL_ERROR = -100;
pub const TONALMDCTCONCEAL_ERROR_TONALMDCTCONCEAL_NSAMPLES_LARGER_THAN_MAXBLOCKSIZE:
    TONALMDCTCONCEAL_ERROR = -99;
pub const TONALMDCTCONCEAL_ERROR_TONALMDCTCONCEAL_INVALIDPOINTER: TONALMDCTCONCEAL_ERROR = -98;
pub const TONALMDCTCONCEAL_ERROR_TONALMDCTCONCEAL_UNEXPECTED_ERROR: TONALMDCTCONCEAL_ERROR = -97;
pub const TONALMDCTCONCEAL_ERROR___error_codes_end: TONALMDCTCONCEAL_ERROR = -96;
pub type TONALMDCTCONCEAL_ERROR = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blockData {
    pub nSamples: ::std::os::raw::c_uint,
    pub nSamplesCore: ::std::os::raw::c_uint,
    pub spectralData: *mut Float32,
    pub scaleFactors: *mut f32,
    pub blockIsValid: ::std::os::raw::c_int,
    pub blockIsConcealed: ::std::os::raw::c_int,
    pub tonalConcealmentActive: ::std::os::raw::c_int,
}
impl Default for blockData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TonalComponentsInfo {
    pub numIndexes: ::std::os::raw::c_uint,
    pub indexOfTonalPeak: [::std::os::raw::c_ushort; 30usize],
    pub lowerIndex: [::std::os::raw::c_ushort; 30usize],
    pub upperIndex: [::std::os::raw::c_ushort; 30usize],
    pub phaseDiff: [Float32; 30usize],
    pub phase_currentFramePredicted: [Float32; 210usize],
}
impl Default for TonalComponentsInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ApplyScaleFactorsPointer = ::std::option::Option<
    unsafe extern "C" fn(x: *mut f32, lg: ::std::os::raw::c_int, scaleFactors: *const f32),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tonalmdctconceal {
    pub tcx_cfg: *mut TCX_config,
    pub pMDSTData: *mut ::std::os::raw::c_void,
    pub nSamples: ::std::os::raw::c_uint,
    pub nSamplesCore: ::std::os::raw::c_uint,
    pub nNonZeroSamples: ::std::os::raw::c_uint,
    pub nScaleFactors: ::std::os::raw::c_uint,
    pub lastPitchLag: f32,
    pub lastBlockData: blockData,
    pub secondLastBlockData: blockData,
    pub scaleFactorsBuffers: [[Float32; 64usize]; 2usize],
    pub spectralDataBuffers: [[Float32; 960usize]; 2usize],
    pub timeDataBuffer: [Float32; 1440usize],
    pub lastPcmOut: *mut Float32,
    pub secondLastPcmOut: *mut Float32,
    pub secondLastPowerSpectrum: *mut f32,
    pub nFramesLost: f32,
    pub pTCI: *mut TonalComponentsInfo,
}
impl Default for tonalmdctconceal {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type TonalMDCTConcealPtr = *mut tonalmdctconceal;
pub const SIGNAL_CLASSIFER_MODE_CLASSIFIER_ACELP: SIGNAL_CLASSIFER_MODE = 0;
pub const SIGNAL_CLASSIFER_MODE_CLASSIFIER_TCX: SIGNAL_CLASSIFER_MODE = 1;
pub type SIGNAL_CLASSIFER_MODE = ::std::os::raw::c_uint;
pub use self::SIGNAL_CLASSIFER_MODE as SIGNAL_CLASSIFIER_MODE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IGFSCFDEC_INSTANCE {
    pub bitsRead: ::std::os::raw::c_int,
    pub prev: [::std::os::raw::c_int; 64usize],
    pub scfCountLongBlock: ::std::os::raw::c_int,
    pub t: ::std::os::raw::c_int,
    pub bitrate: ::std::os::raw::c_int,
    pub cf_se00: *const ::std::os::raw::c_ushort,
    pub cf_se01: *const ::std::os::raw::c_ushort,
    pub cf_off_se01: ::std::os::raw::c_short,
    pub cf_se02: *const ::std::os::raw::c_ushort,
    pub cf_off_se02: *const ::std::os::raw::c_short,
    pub cf_se10: *const ::std::os::raw::c_ushort,
    pub cf_off_se10: ::std::os::raw::c_short,
    pub cf_se11: *const ::std::os::raw::c_ushort,
    pub cf_off_se11: *const ::std::os::raw::c_short,
    pub acState: Tastat,
}
impl Default for IGFSCFDEC_INSTANCE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IGFSCFDEC_INSTANCE_HANDLE = *mut IGFSCFDEC_INSTANCE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igfdec_private_data_struct {
    pub igfInfo: IGF_INFO,
    pub igf_sN: [f32; 23usize],
    pub igf_pN: [f32; 23usize],
    pub igf_curr: [::std::os::raw::c_int; 23usize],
    pub igf_prev: [::std::os::raw::c_int; 23usize],
    pub igf_curr_subframe: [[[::std::os::raw::c_int; 23usize]; 2usize]; 2usize],
    pub igf_prev_subframe: [[::std::os::raw::c_int; 23usize]; 2usize],
    pub igf_flatteningTrigger_subframe: [::std::os::raw::c_int; 2usize],
    pub pSpecFlat: [f32; 800usize],
    pub currWhiteningLevel: [::std::os::raw::c_int; 5usize],
    pub prevWhiteningLevel: [::std::os::raw::c_int; 5usize],
    pub currWhiteningLevel_subframe: [[::std::os::raw::c_int; 5usize]; 2usize],
    pub prevWhiteningLevel_subframe: [[::std::os::raw::c_int; 5usize]; 2usize],
    pub totalNoiseNrg: f32,
    pub n_noise_bands: ::std::os::raw::c_int,
    pub totalNoiseNrg_off: f32,
    pub n_noise_bands_off: ::std::os::raw::c_int,
    pub hArithSCFdec: IGFSCFDEC_INSTANCE,
    pub frameLossCounter: ::std::os::raw::c_int,
}
impl Default for igfdec_private_data_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IGFDEC_PRIVATE_DATA = igfdec_private_data_struct;
pub type IGF_DEC_PRIVATE_DATA_HANDLE = *mut igfdec_private_data_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igfdec_instance_struct {
    pub isIGFActive: ::std::os::raw::c_int,
    pub infoIGFAllZero: ::std::os::raw::c_int,
    pub infoIGFStopLine: ::std::os::raw::c_int,
    pub infoIGFStartLine: ::std::os::raw::c_int,
    pub infoIGFStopFreq: ::std::os::raw::c_int,
    pub infoIGFStartFreq: ::std::os::raw::c_int,
    pub infoTCXNoise: [::std::os::raw::c_uchar; 800usize],
    pub flag_sparse: [::std::os::raw::c_int; 836usize],
    pub virtualSpec: [f32; 836usize],
    pub flatteningTrigger: ::std::os::raw::c_int,
    pub igfData: IGFDEC_PRIVATE_DATA,
}
impl Default for igfdec_instance_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IGFDEC_INSTANCE = igfdec_instance_struct;
pub type IGF_DEC_INSTANCE_HANDLE = *mut igfdec_instance_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Decoder_State {
    pub codec_mode: ::std::os::raw::c_short,
    pub mdct_sw_enable: ::std::os::raw::c_short,
    pub mdct_sw: ::std::os::raw::c_short,
    pub last_codec_mode: ::std::os::raw::c_short,
    pub bit_stream: [::std::os::raw::c_ushort; 2576usize],
    pub next_bit_pos: ::std::os::raw::c_short,
    pub bitstreamformat: ::std::os::raw::c_short,
    pub sdp_hf_only: ::std::os::raw::c_short,
    pub amrwb_rfc4867_flag: ::std::os::raw::c_short,
    pub BER_detect: ::std::os::raw::c_short,
    pub output_Fs: ::std::os::raw::c_int,
    pub total_brate: ::std::os::raw::c_long,
    pub last_total_brate: ::std::os::raw::c_long,
    pub last_total_brate_ber: ::std::os::raw::c_long,
    pub core: ::std::os::raw::c_short,
    pub core_brate: ::std::os::raw::c_long,
    pub last_core_brate: ::std::os::raw::c_long,
    pub extl: ::std::os::raw::c_short,
    pub last_extl: ::std::os::raw::c_short,
    pub extl_brate: ::std::os::raw::c_long,
    pub L_frame: ::std::os::raw::c_short,
    pub bwidth: ::std::os::raw::c_short,
    pub Opt_AMR_WB: ::std::os::raw::c_short,
    pub Opt_VOIP: ::std::os::raw::c_short,
    pub ini_frame: ::std::os::raw::c_short,
    pub CNG: Word16,
    pub prev_ft_speech: Word16,
    pub old_exc: [f32; 480usize],
    pub old_excFB: [f32; 960usize],
    pub lsp_old: [f32; 16usize],
    pub lsf_old: [f32; 16usize],
    pub offset_scale1: [[::std::os::raw::c_uint; 4usize]; 129usize],
    pub offset_scale2: [[::std::os::raw::c_uint; 4usize]; 129usize],
    pub offset_scale1_p: [[::std::os::raw::c_uint; 4usize]; 146usize],
    pub offset_scale2_p: [[::std::os::raw::c_uint; 4usize]; 146usize],
    pub no_scales: [[::std::os::raw::c_short; 2usize]; 128usize],
    pub no_scales_p: [[::std::os::raw::c_short; 2usize]; 145usize],
    pub tilt_code: f32,
    pub mem_syn1: [f32; 16usize],
    pub mem_syn2: [f32; 16usize],
    pub mem_syn3: [f32; 16usize],
    pub mem_deemph: f32,
    pub mem_hp20_out: [f32; 4usize],
    pub mem_AR: [f32; 16usize],
    pub mem_MA: [f32; 16usize],
    pub stab_fac: f32,
    pub stab_fac_smooth: f32,
    pub last_coder_type: ::std::os::raw::c_short,
    pub agc_mem2: [f32; 2usize],
    pub past_qua_en: [f32; 4usize],
    pub mid_lsf_int: ::std::os::raw::c_short,
    pub safety_net: ::std::os::raw::c_short,
    pub seed_tcx: ::std::os::raw::c_short,
    pub GSC_noisy_speech: ::std::os::raw::c_short,
    pub Last_GSC_noisy_speech_flag: ::std::os::raw::c_short,
    pub cor_strong_limit: ::std::os::raw::c_short,
    pub old_y_gain: [f32; 16usize],
    pub noise_lev: ::std::os::raw::c_short,
    pub lt_ener_per_band: [f32; 16usize],
    pub Last_frame_ener: f32,
    pub Last_GSC_spectrum: [f32; 256usize],
    pub Last_GSC_pit_band_idx: ::std::os::raw::c_short,
    pub last_exc_dct_in: [f32; 256usize],
    pub last_ener: f32,
    pub last_bitallocation_band: [::std::os::raw::c_short; 6usize],
    pub gc_threshold: f32,
    pub dispMem: [f32; 8usize],
    pub prev_r: f32,
    pub fmerit_w_sm: f32,
    pub frame_count: ::std::os::raw::c_short,
    pub ne_min: f32,
    pub fmerit_m_sm: f32,
    pub voice_fac_amr_wb_hf: f32,
    pub unvoicing: f32,
    pub unvoicing_sm: f32,
    pub unvoicing_flag: ::std::os::raw::c_short,
    pub voicing_flag: ::std::os::raw::c_short,
    pub start_band_old: ::std::os::raw::c_short,
    pub OptCrit_old: f32,
    pub seed2: ::std::os::raw::c_short,
    pub mem_hp400: [f32; 4usize],
    pub mem_hf: [f32; 30usize],
    pub mem_syn_hf: [f32; 16usize],
    pub delay_syn_hf: [f32; 20usize],
    pub mem_hp_interp: [f32; 13usize],
    pub unv_cnt: ::std::os::raw::c_short,
    pub uv_count: ::std::os::raw::c_short,
    pub act_count: ::std::os::raw::c_short,
    pub ge_sm: f32,
    pub lspold_s: [f32; 16usize],
    pub noimix_seed: ::std::os::raw::c_short,
    pub min_alpha: f32,
    pub exc_pe: f32,
    pub bfi: ::std::os::raw::c_short,
    pub prev_bfi: ::std::os::raw::c_short,
    pub prev_old_bfi: ::std::os::raw::c_short,
    pub seed: ::std::os::raw::c_short,
    pub lp_ener_bfi: f32,
    pub last_good: ::std::os::raw::c_short,
    pub lp_gainp: f32,
    pub lp_gainc: f32,
    pub lp_ener: f32,
    pub enr_old: f32,
    pub bfi_pitch: f32,
    pub bfi_pitch_frame: ::std::os::raw::c_short,
    pub old_pitch_buf: [f32; 12usize],
    pub upd_cnt: ::std::os::raw::c_short,
    pub scaling_flag: ::std::os::raw::c_short,
    pub lp_ener_FEC_av: f32,
    pub lp_ener_FEC_max: f32,
    pub old_enr_LP: f32,
    pub prev_nbLostCmpt: ::std::os::raw::c_short,
    pub mode_lvq: ::std::os::raw::c_short,
    pub lsfoldbfi0: [f32; 16usize],
    pub lsfoldbfi1: [f32; 16usize],
    pub lsf_adaptive_mean: [f32; 16usize],
    pub decision_hyst: ::std::os::raw::c_short,
    pub old_exc2: [f32; 320usize],
    pub old_syn2: [f32; 320usize],
    pub relax_prev_lsf_interp: ::std::os::raw::c_short,
    pub mem_syn_clas_estim: [f32; 258usize],
    pub tilt_swb_fec: f32,
    pub cng_seed: ::std::os::raw::c_short,
    pub lspCNG: [f32; 16usize],
    pub first_CNG: ::std::os::raw::c_short,
    pub Enew: f32,
    pub old_enr_index: ::std::os::raw::c_short,
    pub cng_ener_seed: ::std::os::raw::c_short,
    pub cng_ener_seed1: ::std::os::raw::c_short,
    pub last_allow_cn_step: ::std::os::raw::c_short,
    pub ho_hist_size: ::std::os::raw::c_short,
    pub ho_hist_ptr: ::std::os::raw::c_short,
    pub ho_sid_bw: ::std::os::raw::c_long,
    pub ho_lsp_hist: [f32; 128usize],
    pub ho_ener_hist: [f32; 8usize],
    pub ho_env_hist: [f32; 160usize],
    pub act_cnt: ::std::os::raw::c_short,
    pub ho_circ_size: ::std::os::raw::c_short,
    pub ho_circ_ptr: ::std::os::raw::c_short,
    pub ho_lsp_circ: [f32; 128usize],
    pub ho_ener_circ: [f32; 8usize],
    pub ho_env_circ: [f32; 160usize],
    pub num_ho: ::std::os::raw::c_short,
    pub ho_16k_lsp: [::std::os::raw::c_short; 8usize],
    pub CNG_mode: ::std::os::raw::c_short,
    pub last_active_brate: ::std::os::raw::c_long,
    pub last_CNG_L_frame: ::std::os::raw::c_short,
    pub act_cnt2: ::std::os::raw::c_short,
    pub cng_type: ::std::os::raw::c_short,
    pub last_cng_type: ::std::os::raw::c_short,
    pub old_env: [f32; 20usize],
    pub lp_env: [f32; 20usize],
    pub exc_mem: [f32; 24usize],
    pub exc_mem1: [f32; 30usize],
    pub bpf_off: ::std::os::raw::c_short,
    pub pst_old_syn: [f32; 290usize],
    pub pst_mem_deemp_err: f32,
    pub pst_lp_ener: f32,
    pub Track_on_hist: [::std::os::raw::c_short; 10usize],
    pub vibrato_hist: [::std::os::raw::c_short; 10usize],
    pub psf_att: f32,
    pub mem_mean_pit: [f32; 10usize],
    pub cldfbAna: HANDLE_CLDFB_FILTER_BANK,
    pub cldfbBPF: HANDLE_CLDFB_FILTER_BANK,
    pub cldfbSyn: HANDLE_CLDFB_FILTER_BANK,
    pub last_active_bandsToZero_bwdec: ::std::os::raw::c_short,
    pub flag_NB_bwddec: ::std::os::raw::c_short,
    pub last_flag_filter_NB: ::std::os::raw::c_short,
    pub perc_bwddec: f32,
    pub active_frame_cnt_bwddec: ::std::os::raw::c_int,
    pub flag_buffer: [::std::os::raw::c_short; 20usize],
    pub total_frame_cnt_bwddec: ::std::os::raw::c_int,
    pub avg_nrg_LT: f32,
    pub ng_ener_ST: f32,
    pub last_L_frame: ::std::os::raw::c_short,
    pub mem_preemp_preQ: f32,
    pub last_nq_preQ: ::std::os::raw::c_short,
    pub use_acelp_preq: ::std::os::raw::c_short,
    pub UV_cnt: ::std::os::raw::c_short,
    pub LT_UV_cnt: f32,
    pub Last_ener: f32,
    pub lt_diff_etot: [f32; 40usize],
    pub old_Aq: [f32; 68usize],
    pub lt_voice_fac: f32,
    pub pfstat: PFSTAT,
    pub psf_lp_noise: f32,
    pub last_ppp_mode_dec: ::std::os::raw::c_short,
    pub ppp_mode_dec: ::std::os::raw::c_short,
    pub last_nelp_mode_dec: ::std::os::raw::c_short,
    pub nelp_mode_dec: ::std::os::raw::c_short,
    pub firstTime_voiceddec: ::std::os::raw::c_int,
    pub dtfs_dec_a: [f32; 102usize],
    pub dtfs_dec_b: [f32; 102usize],
    pub dtfs_dec_lag: ::std::os::raw::c_int,
    pub dtfs_dec_nH: ::std::os::raw::c_int,
    pub dtfs_dec_nH_4kHz: ::std::os::raw::c_int,
    pub dtfs_dec_upper_cut_off_freq_of_interest: f32,
    pub dtfs_dec_upper_cut_off_freq: f32,
    pub ph_offset_D: f32,
    pub lastLgainD: f32,
    pub lastHgainD: f32,
    pub lasterbD: [f32; 24usize],
    pub bp1_filt_mem_nb_dec: [f32; 14usize],
    pub bp1_filt_mem_wb_dec: [f32; 8usize],
    pub shape1_filt_mem_dec: [f32; 20usize],
    pub shape2_filt_mem_dec: [f32; 20usize],
    pub shape3_filt_mem_dec: [f32; 20usize],
    pub nelp_dec_seed: ::std::os::raw::c_short,
    pub FadeScale: f32,
    pub prev_gain_pit_dec: f32,
    pub prev_tilt_code_dec: f32,
    pub vbr_hw_BWE_disable_dec: ::std::os::raw::c_short,
    pub last_vbr_hw_BWE_disable_dec: ::std::os::raw::c_short,
    pub tilt_code_dec: [f32; 5usize],
    pub rf_frame_type: ::std::os::raw::c_short,
    pub use_partial_copy: ::std::os::raw::c_short,
    pub prev_use_partial_copy: ::std::os::raw::c_short,
    pub rf_flag: ::std::os::raw::c_short,
    pub rf_flag_last: ::std::os::raw::c_short,
    pub rf_fec_offset: ::std::os::raw::c_short,
    pub next_coder_type: ::std::os::raw::c_short,
    pub prev_rf_frame_type: ::std::os::raw::c_short,
    pub rf_target_bits: ::std::os::raw::c_short,
    pub rf_indx_nelp_fid: ::std::os::raw::c_short,
    pub rf_indx_nelp_iG1: ::std::os::raw::c_short,
    pub rf_indx_nelp_iG2: [::std::os::raw::c_short; 2usize],
    pub rf_indx_tbeGainFr: ::std::os::raw::c_short,
    pub bwe_highrate_seed: ::std::os::raw::c_short,
    pub t_audio_prev: [f32; 496usize],
    pub old_is_transient_hr_bwe: ::std::os::raw::c_short,
    pub mem_EnergyLT: f32,
    pub synth_history: [f32; 2496usize],
    pub old_synthFB: *mut f32,
    pub old_out: [f32; 960usize],
    pub old_outLB: [f32; 640usize],
    pub old_coeffs: [f32; 160usize],
    pub oldIMDCTout: [f32; 80usize],
    pub prev_oldauOut: [f32; 160usize],
    pub diff_energy: f32,
    pub stat_mode_out: ::std::os::raw::c_short,
    pub stat_mode_old: ::std::os::raw::c_short,
    pub phase_mat_flag: ::std::os::raw::c_short,
    pub phase_mat_next: ::std::os::raw::c_short,
    pub old_Min_ind: ::std::os::raw::c_short,
    pub old_auOut_2fr: [f32; 320usize],
    pub old_is_transient: [::std::os::raw::c_short; 3usize],
    pub old_out_pha: [[f32; 70usize]; 2usize],
    pub old_bfi_cnt: ::std::os::raw::c_short,
    pub ynrm_values: [[f32; 7usize]; 3usize],
    pub r_p_values: [[f32; 2usize]; 3usize],
    pub Norm_gain: [f32; 18usize],
    pub HQ_FEC_seed: ::std::os::raw::c_short,
    pub energy_MA_Curr: [f32; 2usize],
    pub last_core: ::std::os::raw::c_short,
    pub last_core_bs: ::std::os::raw::c_short,
    pub prev_last_core: ::std::os::raw::c_short,
    pub last_hq_core_type: ::std::os::raw::c_short,
    pub last_L_frame_ori: ::std::os::raw::c_short,
    pub previoussynth: [f32; 960usize],
    pub old_synth_sw: [f32; 429usize],
    pub delay_buf_out: [f32; 60usize],
    pub mem_norm: [::std::os::raw::c_short; 27usize],
    pub mem_env_delta: ::std::os::raw::c_short,
    pub no_att_hangover: ::std::os::raw::c_short,
    pub energy_lt: f32,
    pub hq_generic_seed: ::std::os::raw::c_short,
    pub prev_noise_level: [f32; 2usize],
    pub prev_hqswb_clas: ::std::os::raw::c_short,
    pub prev_R: ::std::os::raw::c_short,
    pub prev_coeff_out: [f32; 20usize],
    pub prev_SWB_peak_pos: [::std::os::raw::c_short; 4usize],
    pub old_Aq_12_8: [f32; 17usize],
    pub old_Es_pred: f32,
    pub HqVoicing: ::std::os::raw::c_short,
    pub fer_samples: [f32; 960usize],
    pub prev_normq: [f32; 26usize],
    pub prev_env: [f32; 26usize],
    pub last_ni_gain: [f32; 32usize],
    pub last_env: [f32; 32usize],
    pub last_max_pos_pulse: ::std::os::raw::c_short,
    pub memfilt_lb: f32,
    pub mean_prev_hb: f32,
    pub smoothmem: f32,
    pub mean_prev: f32,
    pub mean_prev_nc: f32,
    pub wmold_hb: f32,
    pub prevflag: ::std::os::raw::c_short,
    pub pastpre: ::std::os::raw::c_short,
    pub prev_frm_hfe2: ::std::os::raw::c_short,
    pub prev_stab_hfe2: ::std::os::raw::c_short,
    pub prev_ni_ratio: f32,
    pub prev_En_sb: [f32; 4usize],
    pub rc_low: ::std::os::raw::c_uint,
    pub rc_range: ::std::os::raw::c_uint,
    pub rc_help: ::std::os::raw::c_uint,
    pub rc_num_bits: ::std::os::raw::c_short,
    pub rc_offset: ::std::os::raw::c_short,
    pub rc_end: ::std::os::raw::c_short,
    pub state_lpc_syn: [f32; 10usize],
    pub mem_csfilt: [f32; 2usize],
    pub state_syn_shbexc: [f32; 20usize],
    pub syn_overlap: [f32; 20usize],
    pub lsp_prevfrm: [f32; 10usize],
    pub GainFrame_prevfrm: f32,
    pub GainShape_Delay: [f32; 8usize],
    pub GainAttn: f32,
    pub old_bwe_exc: [f32; 578usize],
    pub bwe_seed: [::std::os::raw::c_short; 2usize],
    pub bwe_non_lin_prev_scale: f32,
    pub old_bwe_exc_extended: [f32; 12usize],
    pub last_voice_factor: f32,
    pub genSHBsynth_Hilbert_Mem: [f32; 21usize],
    pub mem_genSHBexc_filt_down_shb: [f32; 7usize],
    pub mem_genSHBexc_filt_down_wb2: [f32; 7usize],
    pub mem_genSHBexc_filt_down_wb3: [f32; 7usize],
    pub genSHBsynth_state_lsyn_filt_shb_local: [f32; 6usize],
    pub state_lsyn_filt_shb: [f32; 6usize],
    pub state_lsyn_filt_dwn_shb: [f32; 6usize],
    pub mem_resamp_HB: [f32; 13usize],
    pub mem_resamp_HB_32k: [f32; 7usize],
    pub prev_synth_buffer: [f32; 51usize],
    pub hb_prev_synth_buffer: [f32; 111usize],
    pub old_bwe_delay: ::std::os::raw::c_short,
    pub syn_dm_phase: ::std::os::raw::c_short,
    pub fbbwe_hpf_mem: [[f32; 4usize]; 4usize],
    pub prev_wb_bwe_frame_pow: f32,
    pub prev_swb_bwe_frame_pow: f32,
    pub prev_ener: f32,
    pub prev_GainShape: f32,
    pub fb_state_lpc_syn: [f32; 10usize],
    pub fb_tbe_demph: f32,
    pub prev_fbbwe_ratio: f32,
    pub tilt_wb: f32,
    pub tilt_swb: f32,
    pub prev_ener_shb: f32,
    pub enerLH: f32,
    pub prev_enerLH: f32,
    pub enerLL: f32,
    pub prev_enerLL: f32,
    pub prev_fractive: ::std::os::raw::c_short,
    pub prev_bws_cnt: ::std::os::raw::c_short,
    pub bws_cnt: ::std::os::raw::c_short,
    pub bws_cnt1: ::std::os::raw::c_short,
    pub attenu1: f32,
    pub last_inner_frame: ::std::os::raw::c_short,
    pub last_bwidth: ::std::os::raw::c_short,
    pub prev_weight1: f32,
    pub t_audio_q: [f32; 256usize],
    pub tbe_demph: f32,
    pub tbe_premph: f32,
    pub mem_stp_swb: [f32; 10usize],
    pub ptr_mem_stp_swb: *mut f32,
    pub gain_prec_swb: f32,
    pub mem_zero_swb: [f32; 10usize],
    pub swb_lsp_prev_interp: [f32; 10usize],
    pub prev1_shb_ener_sf: f32,
    pub prev2_shb_ener_sf: f32,
    pub prev3_shb_ener_sf: f32,
    pub prev_res_shb_gshape: f32,
    pub prev_mixFactors: f32,
    pub tilt_mem: f32,
    pub prev_lsf_diff: [f32; 8usize],
    pub prev_tilt_para: f32,
    pub cur_sub_Aq: [f32; 17usize],
    pub lsf_idx: [::std::os::raw::c_short; 5usize],
    pub m_idx: ::std::os::raw::c_short,
    pub grid_idx: ::std::os::raw::c_short,
    pub idxSubGains: ::std::os::raw::c_short,
    pub idxFrameGain: ::std::os::raw::c_short,
    pub idx_shb_fr_gain: ::std::os::raw::c_short,
    pub idx_res_gs: [::std::os::raw::c_short; 5usize],
    pub idx_mixFac: ::std::os::raw::c_short,
    pub lsf_WB: ::std::os::raw::c_short,
    pub gFrame_WB: ::std::os::raw::c_short,
    pub idxGain: ::std::os::raw::c_short,
    pub old_core_synth: [f32; 320usize],
    pub old_tbe_synth: [f32; 222usize],
    pub int_3_over_2_tbemem_dec: [f32; 15usize],
    pub interpol_3_2_cng_dec: [f32; 15usize],
    pub old_wtda_swb: [f32; 960usize],
    pub old_syn_12k8_16k: [f32; 36usize],
    pub mem_deemph_old_syn: f32,
    pub prev_mode: ::std::os::raw::c_short,
    pub prev_SWB_fenv: [f32; 14usize],
    pub prev_Energy: f32,
    pub prev_Energy_wb: f32,
    pub prev_L_swb_norm: ::std::os::raw::c_short,
    pub Seed: ::std::os::raw::c_short,
    pub prev_frica_flag: ::std::os::raw::c_short,
    pub mem_imdct: [f32; 960usize],
    pub prev_td_energy: f32,
    pub prev_weight: f32,
    pub prev_coder_type: ::std::os::raw::c_short,
    pub prev_flag: ::std::os::raw::c_short,
    pub last_wb_bwe_ener: f32,
    pub prev_fb_ener_adjust: f32,
    pub shb_cng_ener: f32,
    pub wb_cng_ener: f32,
    pub last_wb_cng_ener: f32,
    pub last_shb_cng_ener: f32,
    pub swb_cng_seed: ::std::os::raw::c_short,
    pub lsp_shb_prev_prev: [f32; 10usize],
    pub lsp_shb_prev: [f32; 10usize],
    pub shb_dtx_count: ::std::os::raw::c_short,
    pub last_vad: ::std::os::raw::c_short,
    pub trans_cnt: ::std::os::raw::c_short,
    pub burst_cnt: ::std::os::raw::c_short,
    pub last_shb_ener: f32,
    pub prev_good_synth: *mut f32,
    pub prev_sign_switch: [::std::os::raw::c_short; 16usize],
    pub prev_sign_switch_2: [::std::os::raw::c_short; 16usize],
    pub time_offs: ::std::os::raw::c_short,
    pub X_sav: [f32; 1536usize],
    pub num_p: ::std::os::raw::c_short,
    pub plocs: [::std::os::raw::c_short; 385usize],
    pub plocsi: [f32; 385usize],
    pub env_stab: f32,
    pub mem_norm_hqfec: [::std::os::raw::c_short; 27usize],
    pub mem_env_delta_hqfec: ::std::os::raw::c_short,
    pub env_stab_plc: f32,
    pub env_stab_state_p: [f32; 2usize],
    pub envstabplc_hocnt: ::std::os::raw::c_short,
    pub mag_chg_1st: [f32; 9usize],
    pub Xavg: [f32; 9usize],
    pub beta_mute: f32,
    pub last_fec: ::std::os::raw::c_short,
    pub ph_ecu_HqVoicing: ::std::os::raw::c_short,
    pub oldHqVoicing: ::std::os::raw::c_short,
    pub oldgapsynth: [f32; 960usize],
    pub ph_ecu_active: ::std::os::raw::c_short,
    pub ni_seed_forfec: ::std::os::raw::c_short,
    pub ber_occured_in_pvq: ::std::os::raw::c_short,
    pub LDm_mem_etot: f32,
    pub LDm_last_music_flag: ::std::os::raw::c_short,
    pub LDm_nb_thr_1: ::std::os::raw::c_short,
    pub LDm_nb_thr_3: ::std::os::raw::c_short,
    pub dct_post_old_exc: [f32; 448usize],
    pub LDm_thres: [f32; 4usize],
    pub LDm_lt_diff_etot: [f32; 40usize],
    pub LDm_enh_lp_gbin: [f32; 640usize],
    pub LDm_enh_lf_EO: [f32; 640usize],
    pub LDm_enh_min_ns_gain: f32,
    pub LDm_bckr_noise: [f32; 20usize],
    pub filt_lfE: [f32; 640usize],
    pub last_nonfull_music: ::std::os::raw::c_short,
    pub force_lpd_reset: ::std::os::raw::c_short,
    pub acelp_cfg: ACELP_config,
    pub acelp_cfg_rf: ACELP_config,
    pub tcx_cfg: TCX_config,
    pub L_frameTCX: ::std::os::raw::c_int,
    pub bits_frame: ::std::os::raw::c_int,
    pub bits_frame_core: ::std::os::raw::c_int,
    pub narrowBand: ::std::os::raw::c_int,
    pub last_is_cng: ::std::os::raw::c_int,
    pub old_syn_Overl: [f32; 320usize],
    pub syn_Overl_TDAC: [f32; 320usize],
    pub syn_Overl_TDACFB: [f32; 480usize],
    pub syn_Overl: [f32; 320usize],
    pub syn_OverlFB: [f32; 480usize],
    pub acelp_zir: *mut f32,
    pub old_synth: [f32; 1280usize],
    pub old_synth_len: ::std::os::raw::c_int,
    pub old_synth_lenFB: ::std::os::raw::c_int,
    pub syn: [f32; 17usize],
    pub bpf_gain_param: ::std::os::raw::c_int,
    pub L_frame_past: ::std::os::raw::c_int,
    pub L_frameTCX_past: ::std::os::raw::c_int,
    pub lsfold_uw: [f32; 16usize],
    pub lspold_uw: [f32; 16usize],
    pub seed_tcx_plc: ::std::os::raw::c_short,
    pub past_gpit: f32,
    pub past_gcode: f32,
    pub lsf_cng: [f32; 16usize],
    pub lspold_cng: [f32; 16usize],
    pub lsp_q_cng: [f32; 16usize],
    pub old_lsp_q_cng: [f32; 16usize],
    pub lsf_q_cng: [f32; 16usize],
    pub old_lsf_q_cng: [f32; 16usize],
    pub Aq_cng: [f32; 102usize],
    pub mem_syn_unv_back: [f32; 16usize],
    pub plcBackgroundNoiseUpdated: ::std::os::raw::c_int,
    pub last_gain_syn_deemph: f32,
    pub last_concealed_gain_syn_deemph: f32,
    pub enableTcxLpc: ::std::os::raw::c_int,
    pub envWeighted: ::std::os::raw::c_int,
    pub nb_subfr: ::std::os::raw::c_int,
    pub fscale: ::std::os::raw::c_int,
    pub fscale_old: ::std::os::raw::c_int,
    pub sr_core: ::std::os::raw::c_int,
    pub pit_min: ::std::os::raw::c_int,
    pub pit_fr1: ::std::os::raw::c_int,
    pub pit_fr1b: ::std::os::raw::c_int,
    pub pit_fr2: ::std::os::raw::c_int,
    pub pit_max: ::std::os::raw::c_int,
    pub pit_res_max: ::std::os::raw::c_int,
    pub pit_res_max_past: ::std::os::raw::c_int,
    pub pit_min_TCX: ::std::os::raw::c_int,
    pub pit_max_TCX: ::std::os::raw::c_int,
    pub preemph_fac: f32,
    pub gamma: f32,
    pub mem_Aq: [f32; 85usize],
    pub last_core_bfi: ::std::os::raw::c_int,
    pub nbLostCmpt: ::std::os::raw::c_int,
    pub noise_filling_index: ::std::os::raw::c_int,
    pub old_fpitch: f32,
    pub old_fpitchFB: f32,
    pub clas_dec: ::std::os::raw::c_short,
    pub mem_pitch_gain: [f32; 12usize],
    pub plc_use_future_lag: ::std::os::raw::c_short,
    pub prev_widow_left_rect: ::std::os::raw::c_int,
    pub CngLevelBackgroundTrace_bfi: f32,
    pub NoiseLevelMemory_bfi: [f32; 50usize],
    pub NoiseLevelIndex_bfi: ::std::os::raw::c_int,
    pub CurrLevelIndex_bfi: ::std::os::raw::c_int,
    pub LastFrameLevel_bfi: f32,
    pub old_gaintcx_bfi: f32,
    pub cummulative_damping: f32,
    pub cngTDLevel: f32,
    pub conceal_eof_gain: f32,
    pub damping: f32,
    pub gainHelper: f32,
    pub stepCompensate: f32,
    pub reset_mem_AR: ::std::os::raw::c_int,
    pub tcxConceal_recalc_exc: ::std::os::raw::c_short,
    pub rate_switching_init: ::std::os::raw::c_short,
    pub lpcQuantization: ::std::os::raw::c_int,
    pub numlpc: ::std::os::raw::c_int,
    pub TcxBandwidth: f32,
    pub voice_fac: f32,
    pub tcxonly: ::std::os::raw::c_int,
    pub resQBits: [::std::os::raw::c_int; 2usize],
    pub last_ctx_hm_enabled: ::std::os::raw::c_int,
    pub tcxltp: ::std::os::raw::c_int,
    pub tcxltp_gain: f32,
    pub tcxltp_pitch_int: ::std::os::raw::c_int,
    pub tcxltp_pitch_fr: ::std::os::raw::c_int,
    pub tcxltp_mem_in: [f32; 12usize],
    pub tcxltp_mem_out: [f32; 960usize],
    pub tcxltp_pitch_int_post_prev: ::std::os::raw::c_int,
    pub tcxltp_pitch_fr_post_prev: ::std::os::raw::c_int,
    pub tcxltp_gain_post_prev: f32,
    pub tcxltp_filt_idx_prev: ::std::os::raw::c_int,
    pub tonalMDCTconceal: tonalmdctconceal,
    pub tonal_mdct_plc_active: ::std::os::raw::c_int,
    pub last_tns_active: ::std::os::raw::c_int,
    pub second_last_tns_active: ::std::os::raw::c_int,
    pub cummulative_damping_tcx: f32,
    pub second_last_core: ::std::os::raw::c_int,
    pub tcxltp_second_last_pitch: f32,
    pub tcxltp_third_last_pitch: f32,
    pub tcxltp_last_gain_unmodified: f32,
    pub FBTCXdelayBuf: [f32; 111usize],
    pub mem_syn_r: [f32; 60usize],
    pub rate_switching_reset: ::std::os::raw::c_short,
    pub bpf_noise_buf: [f32; 320usize],
    pub p_bpf_noise_buf: *mut f32,
    pub enableGplc: ::std::os::raw::c_int,
    pub flagGuidedAcelp: ::std::os::raw::c_int,
    pub T0_4th: ::std::os::raw::c_int,
    pub guidedT0: ::std::os::raw::c_int,
    pub enablePlcWaveadjust: ::std::os::raw::c_short,
    pub tonality_flag: ::std::os::raw::c_short,
    pub plcInfo: T_PLCInfo,
    pub VAD: ::std::os::raw::c_short,
    pub flag_cna: ::std::os::raw::c_short,
    pub last_flag_cna: ::std::os::raw::c_short,
    pub lp_noise: f32,
    pub seed_acelp: ::std::os::raw::c_short,
    pub core_ext_mode: ::std::os::raw::c_int,
    pub dec_glr: ::std::os::raw::c_short,
    pub dec_glr_idx: ::std::os::raw::c_short,
    pub tcx_hm_LtpPitchLag: ::std::os::raw::c_short,
    pub tcx_lpc_shaped_ari: ::std::os::raw::c_short,
    pub m_decodeMode: DEC_MODE,
    pub m_frame_type: ::std::os::raw::c_uchar,
    pub m_old_frame_type: ::std::os::raw::c_uchar,
    pub hFdCngDec: HANDLE_FD_CNG_DEC,
    pub hIGFDec: IGFDEC_INSTANCE,
    pub igf: ::std::os::raw::c_short,
    pub tec_tfa: ::std::os::raw::c_short,
    pub tec_flag: ::std::os::raw::c_short,
    pub tfa_flag: ::std::os::raw::c_short,
    pub tecDec: TEMPORAL_ENVELOPE_CODING_DECODER,
    pub old_ppp_mode: ::std::os::raw::c_short,
    pub old_hb_synth: [f32; 960usize],
    pub con_tcx: ::std::os::raw::c_short,
    pub last_con_tcx: ::std::os::raw::c_short,
    pub writeFECoffset: ::std::os::raw::c_short,
}
impl Default for Decoder_State {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut Overflow: Flag;
}
extern "C" {
    pub static mut Overflow2: Flag;
}
extern "C" {
    pub static mut Carry: Flag;
}
extern "C" {
    pub fn add(var1: Word16, var2: Word16) -> Word16;
}
extern "C" {
    pub fn sub(var1: Word16, var2: Word16) -> Word16;
}
extern "C" {
    pub fn abs_s(var1: Word16) -> Word16;
}
extern "C" {
    pub fn shl(var1: Word16, var2: Word16) -> Word16;
}
extern "C" {
    pub fn shr(var1: Word16, var2: Word16) -> Word16;
}
extern "C" {
    pub fn mult(var1: Word16, var2: Word16) -> Word16;
}
extern "C" {
    pub fn L_mult(var1: Word16, var2: Word16) -> Word32;
}
extern "C" {
    pub fn negate(var1: Word16) -> Word16;
}
extern "C" {
    pub fn extract_h(L_var1: Word32) -> Word16;
}
extern "C" {
    pub fn extract_l(L_var1: Word32) -> Word16;
}
extern "C" {
    pub fn round_fx(L_var1: Word32) -> Word16;
}
extern "C" {
    pub fn L_mac(L_var3: Word32, var1: Word16, var2: Word16) -> Word32;
}
extern "C" {
    pub fn L_msu(L_var3: Word32, var1: Word16, var2: Word16) -> Word32;
}
extern "C" {
    pub fn L_macNs(L_var3: Word32, var1: Word16, var2: Word16) -> Word32;
}
extern "C" {
    pub fn L_msuNs(L_var3: Word32, var1: Word16, var2: Word16) -> Word32;
}
extern "C" {
    pub fn L_add(L_var1: Word32, L_var2: Word32) -> Word32;
}
extern "C" {
    pub fn L_sub(L_var1: Word32, L_var2: Word32) -> Word32;
}
extern "C" {
    pub fn L_add_c(L_var1: Word32, L_var2: Word32) -> Word32;
}
extern "C" {
    pub fn L_sub_c(L_var1: Word32, L_var2: Word32) -> Word32;
}
extern "C" {
    pub fn L_negate(L_var1: Word32) -> Word32;
}
extern "C" {
    pub fn mult_r(var1: Word16, var2: Word16) -> Word16;
}
extern "C" {
    pub fn L_shl(L_var1: Word32, var2: Word16) -> Word32;
}
extern "C" {
    pub fn L_shr(L_var1: Word32, var2: Word16) -> Word32;
}
extern "C" {
    pub fn shr_r(var1: Word16, var2: Word16) -> Word16;
}
extern "C" {
    pub fn mac_r(L_var3: Word32, var1: Word16, var2: Word16) -> Word16;
}
extern "C" {
    pub fn msu_r(L_var3: Word32, var1: Word16, var2: Word16) -> Word16;
}
extern "C" {
    pub fn L_deposit_h(var1: Word16) -> Word32;
}
extern "C" {
    pub fn L_deposit_l(var1: Word16) -> Word32;
}
extern "C" {
    pub fn L_shr_r(L_var1: Word32, var2: Word16) -> Word32;
}
extern "C" {
    pub fn L_abs(L_var1: Word32) -> Word32;
}
extern "C" {
    pub fn L_sat(L_var1: Word32) -> Word32;
}
extern "C" {
    pub fn norm_s(var1: Word16) -> Word16;
}
extern "C" {
    pub fn div_s(var1: Word16, var2: Word16) -> Word16;
}
extern "C" {
    pub fn norm_l(L_var1: Word32) -> Word16;
}
extern "C" {
    pub fn L_mls(arg1: Word32, arg2: Word16) -> Word32;
}
extern "C" {
    pub fn div_l(arg1: Word32, arg2: Word16) -> Word16;
}
extern "C" {
    pub fn i_mult(a: Word16, b: Word16) -> Word16;
}
extern "C" {
    pub fn L_mult0(v1: Word16, v2: Word16) -> Word32;
}
extern "C" {
    pub fn L_mac0(L_v3: Word32, v1: Word16, v2: Word16) -> Word32;
}
extern "C" {
    pub fn L_msu0(L_v3: Word32, v1: Word16, v2: Word16) -> Word32;
}
extern "C" {
    #[doc = "  Prototypes for enhanced 16/32 bit arithmetic operators\n"]
    pub fn shl_r(var1: Word16, var2: Word16) -> Word16;
}
extern "C" {
    pub fn L_shl_r(L_var1: Word32, var2: Word16) -> Word32;
}
extern "C" {
    pub fn lshl(var1: Word16, var2: Word16) -> Word16;
}
extern "C" {
    pub fn lshr(var1: Word16, var2: Word16) -> Word16;
}
extern "C" {
    pub fn L_lshl(L_var1: Word32, var2: Word16) -> Word32;
}
extern "C" {
    pub fn L_lshr(L_var1: Word32, var2: Word16) -> Word32;
}
extern "C" {
    pub fn rotr(var1: Word16, var2: Word16, var3: *mut Word16) -> Word16;
}
extern "C" {
    pub fn rotl(var1: Word16, var2: Word16, var3: *mut Word16) -> Word16;
}
extern "C" {
    pub fn L_rotr(var1: Word32, var2: Word16, var3: *mut Word16) -> Word32;
}
extern "C" {
    pub fn L_rotl(var1: Word32, var2: Word16, var3: *mut Word16) -> Word32;
}
extern "C" {
    #[doc = "  Prototypes for enhanced 40 bit arithmetic operators"]
    pub fn L40_shr(L40_var1: Word40, var2: Word16) -> Word40;
}
extern "C" {
    pub fn L40_shr_r(L40_var1: Word40, var2: Word16) -> Word40;
}
extern "C" {
    pub fn L40_shl(L40_var1: Word40, var2: Word16) -> Word40;
}
extern "C" {
    pub fn L40_shl_r(L40_var1: Word40, var2: Word16) -> Word40;
}
extern "C" {
    pub fn Mpy_32_16_ss(
        L_var1: Word32,
        var2: Word16,
        L_varout_h: *mut Word32,
        varout_l: *mut UWord16,
    );
}
extern "C" {
    pub fn Mpy_32_32_ss(
        L_var1: Word32,
        L_var2: Word32,
        L_varout_h: *mut Word32,
        L_varout_l: *mut UWord32,
    );
}
extern "C" {
    pub fn L40_lshl(L40_var1: Word40, var2: Word16) -> Word40;
}
extern "C" {
    pub fn L40_lshr(L40_var1: Word40, var2: Word16) -> Word40;
}
extern "C" {
    pub fn L40_add(L40_var1: Word40, L40_var2: Word40) -> Word40;
}
extern "C" {
    pub fn L40_sub(L40_var1: Word40, L40_var2: Word40) -> Word40;
}
extern "C" {
    pub fn L40_abs(L40_var1: Word40) -> Word40;
}
extern "C" {
    pub fn L40_negate(L40_var1: Word40) -> Word40;
}
extern "C" {
    pub fn L40_max(L40_var1: Word40, L40_var2: Word40) -> Word40;
}
extern "C" {
    pub fn L40_min(L40_var1: Word40, L40_var2: Word40) -> Word40;
}
extern "C" {
    pub fn L_saturate40(L40_var1: Word40) -> Word32;
}
extern "C" {
    pub fn norm_L40(L40_var1: Word40) -> Word16;
}
extern "C" {
    pub fn inv_sqrt(x: f32) -> f32;
}
extern "C" {
    pub fn own_random(seed: *mut ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn sign(x: f32) -> f32;
}
extern "C" {
    pub fn log2_f(x: f32) -> f32;
}
extern "C" {
    pub fn norm_ul(UL_var1: ::std::os::raw::c_uint) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn sum_s(
        vec: *const ::std::os::raw::c_short,
        lvec: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn sum_f(vec: *const f32, lvec: ::std::os::raw::c_short) -> f32;
}
extern "C" {
    pub fn sum2_f(vec: *const f32, lvec: ::std::os::raw::c_short) -> f32;
}
extern "C" {
    pub fn set_c(
        y: *mut ::std::os::raw::c_char,
        a: ::std::os::raw::c_char,
        N: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn set_s(
        y: *mut ::std::os::raw::c_short,
        a: ::std::os::raw::c_short,
        N: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn set_i(
        y: *mut ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
        N: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn set_f(y: *mut f32, a: f32, N: ::std::os::raw::c_short);
}
extern "C" {
    pub fn set_zero(vec: *mut f32, lvec: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mvr2r(x: *const f32, y: *mut f32, n: ::std::os::raw::c_short);
}
extern "C" {
    pub fn mvs2s(
        x: *const ::std::os::raw::c_short,
        y: *mut ::std::os::raw::c_short,
        n: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn mvr2s(
        x: *const f32,
        y: *mut ::std::os::raw::c_short,
        n: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn mvs2r(x: *const ::std::os::raw::c_short, y: *mut f32, n: ::std::os::raw::c_short);
}
extern "C" {
    pub fn mvi2i(
        x: *const ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn AGC_dec(x: *mut f32, mem: *mut f32, n: ::std::os::raw::c_short);
}
extern "C" {
    pub fn maximum(
        vec: *const f32,
        lvec: ::std::os::raw::c_short,
        max: *mut f32,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn minimum(
        vec: *const f32,
        lvec: ::std::os::raw::c_short,
        min: *mut f32,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn emaximum(
        vec: *const f32,
        lvec: ::std::os::raw::c_short,
        ener_max: *mut f32,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn mean(vec: *const f32, lvec: ::std::os::raw::c_short) -> f32;
}
extern "C" {
    pub fn dotp(x: *const f32, y: *const f32, n: ::std::os::raw::c_short) -> f32;
}
extern "C" {
    pub fn conv(x: *const f32, h: *const f32, y: *mut f32, L: ::std::os::raw::c_short);
}
extern "C" {
    pub fn fir(
        x: *const f32,
        h: *const f32,
        y: *mut f32,
        mem: *mut f32,
        L: ::std::os::raw::c_short,
        K: ::std::os::raw::c_short,
        upd: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn v_add(x1: *const f32, x2: *const f32, y: *mut f32, N: ::std::os::raw::c_short);
}
extern "C" {
    pub fn v_sub(x1: *const f32, x2: *const f32, y: *mut f32, N: ::std::os::raw::c_short);
}
extern "C" {
    pub fn v_mult(x1: *const f32, x2: *const f32, y: *mut f32, N: ::std::os::raw::c_short);
}
extern "C" {
    pub fn v_multc(x: *const f32, c: f32, y: *mut f32, N: ::std::os::raw::c_short);
}
extern "C" {
    pub fn squant(
        x: f32,
        xq: *mut f32,
        cb: *const f32,
        cbsize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vquant(
        x: *mut f32,
        x_mean: *const f32,
        xq: *mut f32,
        cb: *const f32,
        dim: ::std::os::raw::c_int,
        cbsize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn w_vquant(
        x: *mut f32,
        x_mean: *const f32,
        weights: *const ::std::os::raw::c_short,
        xq: *mut f32,
        cb: *const f32,
        dim: ::std::os::raw::c_int,
        cbsize: ::std::os::raw::c_int,
        reverse: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usquant(
        x: f32,
        xq: *mut f32,
        qlow: f32,
        delta: f32,
        cbsize: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn usdequant(idx: ::std::os::raw::c_int, qlow: f32, delta: f32) -> f32;
}
extern "C" {
    pub fn v_sort(r: *mut f32, lo: ::std::os::raw::c_short, up: ::std::os::raw::c_short);
}
extern "C" {
    pub fn var(x: *const f32, len: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn std_dev(x: *const f32, len: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn dot_product_mat(x: *const f32, A: *const f32, m: ::std::os::raw::c_short) -> f32;
}
extern "C" {
    pub fn root_a(a: f32) -> f32;
}
extern "C" {
    pub fn root_a_over_b(a: f32, b: f32) -> f32;
}
extern "C" {
    pub fn polezero_filter(
        in_: *const f32,
        out: *mut f32,
        N: ::std::os::raw::c_short,
        b: *const f32,
        a: *const f32,
        order: ::std::os::raw::c_short,
        mem: *mut f32,
    );
}
extern "C" {
    pub fn rint_new(x: f64) -> f64;
}
extern "C" {
    pub fn anint(x: f64) -> f64;
}
extern "C" {
    pub fn is_numeric_float(x: f32) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn push_indice(
        st: *mut Encoder_State,
        id: ::std::os::raw::c_short,
        value: ::std::os::raw::c_ushort,
        nb_bits: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn push_next_indice(
        st: *mut Encoder_State,
        value: ::std::os::raw::c_ushort,
        nb_bits: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn push_next_bits(
        st: *mut Encoder_State,
        bits: *mut ::std::os::raw::c_int,
        nb_bits: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn get_next_indice(
        st: *mut Decoder_State,
        nb_bits: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn get_next_indice_1(st: *mut Decoder_State) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn get_next_indice_tmp(st: *mut Decoder_State, nb_bits: ::std::os::raw::c_short);
}
extern "C" {
    pub fn get_indice(
        st: *mut Decoder_State,
        pos: ::std::os::raw::c_short,
        nb_bits: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn get_indice_1(
        st: *mut Decoder_State,
        pos: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn reset_indices_enc(st: *mut Encoder_State);
}
extern "C" {
    pub fn reset_indices_dec(st: *mut Decoder_State);
}
extern "C" {
    pub fn write_indices(
        st: *mut Encoder_State,
        file: *mut FILE,
        pFrame: *mut UWord8,
        pFrame_size: Word16,
    );
}
extern "C" {
    pub fn read_indices(
        st: *mut Decoder_State,
        file: *mut FILE,
        rew_flag: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn read_indices_mime(st: *mut Decoder_State, file: *mut FILE, rew_flag: Word16) -> Word16;
}
extern "C" {
    pub fn indices_to_serial(
        st: *const Encoder_State,
        pFrame: *mut UWord8,
        pFrame_size: *mut Word16,
    );
}
extern "C" {
    pub fn indices_to_serial_generic(
        ind_list: *const Indice,
        num_indices: Word16,
        pFrame: *mut UWord8,
        pFrame_size: *mut Word16,
    );
}
extern "C" {
    pub fn evs_dec_previewFrame(
        bitstream: *mut ::std::os::raw::c_uchar,
        bitstreamSize: ::std::os::raw::c_int,
        partialCopyFrameType: *mut ::std::os::raw::c_short,
        partialCopyOffset: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn read_indices_from_djb(
        st: *mut Decoder_State,
        pt_stream: *mut ::std::os::raw::c_uchar,
        nbits: ::std::os::raw::c_int,
        isAMRWB_IOmode: Word16,
        core_mode: Word16,
        qbit: Word16,
        partialframe: ::std::os::raw::c_short,
        next_coder_type: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn getPartialCopyInfo(
        st: *mut Decoder_State,
        coder_type: *mut ::std::os::raw::c_short,
        sharpFlag: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn get_NextCoderType(
        bitsteam: *mut ::std::os::raw::c_uchar,
        next_coder_type: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn print_disclaimer(fPtr: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn autocorr(
        x: *const f32,
        r: *mut f32,
        m: ::std::os::raw::c_short,
        len: ::std::os::raw::c_short,
        wind: *const f32,
        rev_flag: ::std::os::raw::c_short,
        sym_flag: ::std::os::raw::c_short,
        no_thr: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn lev_dur(
        a: *mut f32,
        r: *const f32,
        m: ::std::os::raw::c_short,
        epsP: *mut f32,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn get_delay(what_delay: ::std::os::raw::c_short, io_fs: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn decision_matrix_enc(
        st: *mut Encoder_State,
        sp_aud_decision1: ::std::os::raw::c_short,
        sp_aud_decision2: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        vad_flag: ::std::os::raw::c_short,
        hq_core_type: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn signalling_enc(
        st: *mut Encoder_State,
        coder_type: ::std::os::raw::c_short,
        sharpFlag: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn signalling_mode1_tcx20_enc(
        st: *mut Encoder_State,
        push: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn decision_matrix_dec(
        st: *mut Decoder_State,
        coder_type: *mut ::std::os::raw::c_short,
        sharpFlag: *mut ::std::os::raw::c_short,
        hq_core_type: *mut ::std::os::raw::c_short,
        core_switching_flag: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn lsf_stab(
        lsf: *const f32,
        lsfold: *const f32,
        Opt_AMR_WB: ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
    ) -> f32;
}
extern "C" {
    pub fn hf_synth_amr_wb_init(
        prev_r: *mut f32,
        fmerit_w_sm: *mut f32,
        mem_syn_hf: *mut f32,
        frame_count: *mut ::std::os::raw::c_short,
        ne_min: *mut f32,
        fmerit_m_sm: *mut f32,
        voice_fac: *mut f32,
        unvoicing: *mut f32,
        unvoicing_sm: *mut f32,
        unvoicing_flag: *mut ::std::os::raw::c_short,
        voicing_flag: *mut ::std::os::raw::c_short,
        start_band_old: *mut ::std::os::raw::c_short,
        OptCrit_old: *mut f32,
    );
}
extern "C" {
    pub fn hf_synth_amr_wb_reset(
        seed2: *mut ::std::os::raw::c_short,
        mem_syn_hf: *mut f32,
        mem_hp_interp: *mut f32,
        prev_r: *mut f32,
        fmerit_w_sm: *mut f32,
        delay_syn_hf: *mut f32,
        frame_count: *mut ::std::os::raw::c_short,
        ne_min: *mut f32,
        fmerit_m_sm: *mut f32,
        voice_fac: *mut f32,
        unvoicing: *mut f32,
        unvoicing_sm: *mut f32,
        unvoicing_flag: *mut ::std::os::raw::c_short,
        voicing_flag: *mut ::std::os::raw::c_short,
        start_band_old: *mut ::std::os::raw::c_short,
        OptCrit_old: *mut f32,
    );
}
extern "C" {
    pub fn hf_synth_amr_wb(
        core_brate: ::std::os::raw::c_long,
        output_frame: ::std::os::raw::c_short,
        Aq: *const f32,
        exc: *const f32,
        synth: *mut f32,
        mem_syn_hf: *mut f32,
        delay_syn_hf: *mut f32,
        prev_r: *mut f32,
        fmerit_w_sm: *mut f32,
        amr_io_class: *mut ::std::os::raw::c_short,
        mem_hp_interp: *mut f32,
        synth_out: *mut f32,
        fmerit: f32,
        hf_gain: *const ::std::os::raw::c_short,
        voice_factors: *const f32,
        pitch_buf: *const f32,
        ng_ener_ST: f32,
        lsf_new: *const f32,
        frame_count: *mut ::std::os::raw::c_short,
        ne_min: *mut f32,
        fmerit_m_sm: *mut f32,
        voice_facor_sm: *mut f32,
        unvoicing: *mut f32,
        unvoicing_sm: *mut f32,
        unvoicing_flag: *mut ::std::os::raw::c_short,
        voicing_flag: *mut ::std::os::raw::c_short,
        start_band_old: *mut ::std::os::raw::c_short,
        OptCrit_old: *mut f32,
    );
}
extern "C" {
    pub fn hf_cod_init(
        mem_hp400_enc: *mut f32,
        mem_hf1_enc: *mut f32,
        mem_syn_hf_enc: *mut f32,
        mem_hf2_enc: *mut f32,
        gain_alpha: *mut f32,
    );
}
extern "C" {
    pub fn hf_cod(
        core_brate: ::std::os::raw::c_long,
        speech16k: *const f32,
        Aq: *const f32,
        exc: *const f32,
        synth: *mut f32,
        seed2_enc: *mut ::std::os::raw::c_short,
        mem_hp400_enc: *mut f32,
        mem_syn_hf_enc: *mut f32,
        mem_hf1_enc: *mut f32,
        mem_hf2_enc: *mut f32,
        dtxHangoverCount: *const ::std::os::raw::c_short,
        gain_alpha: *mut f32,
        hf_gain: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hf_synth_init(mem_hp400: *mut f32, mem_hf: *mut f32);
}
extern "C" {
    pub fn hf_synth_reset(
        seed2: *mut ::std::os::raw::c_short,
        mem_hf: *mut f32,
        mem_syn_hf: *mut f32,
        mem_hp400: *mut f32,
        mem_hp_interp: *mut f32,
        delay_syn_hf: *mut f32,
    );
}
extern "C" {
    pub fn hf_synth(
        core_brate: ::std::os::raw::c_long,
        output_frame: ::std::os::raw::c_short,
        Aq: *const f32,
        exc: *const f32,
        synth: *mut f32,
        synth16k: *mut f32,
        seed2: *mut ::std::os::raw::c_short,
        mem_hp400: *mut f32,
        mem_syn_hf: *mut f32,
        mem_hf: *mut f32,
        delay_syn_hf: *mut f32,
        mem_hp_interp: *mut f32,
    );
}
extern "C" {
    pub fn lsp_convert_poly(
        w: *mut f32,
        L_frame: ::std::os::raw::c_short,
        Opt_AMRWB: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn findpulse(
        L_frame: ::std::os::raw::c_short,
        res: *const f32,
        T0: ::std::os::raw::c_short,
        enc_dec: ::std::os::raw::c_short,
        sign: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn fft_rel(x: *mut f32, n: ::std::os::raw::c_short, m: ::std::os::raw::c_short);
}
extern "C" {
    pub fn ifft_rel(io: *mut f32, n: ::std::os::raw::c_short, m: ::std::os::raw::c_short);
}
extern "C" {
    pub fn preemph(signal: *mut f32, mu: f32, L: ::std::os::raw::c_short, mem: *mut f32);
}
extern "C" {
    pub fn cb_shape(
        preemphFlag: ::std::os::raw::c_short,
        pitchFlag: ::std::os::raw::c_short,
        scramblingFlag: ::std::os::raw::c_short,
        formantFlag: ::std::os::raw::c_short,
        formantTiltFlag: ::std::os::raw::c_short,
        g1: f32,
        g2: f32,
        p_Aq: *const f32,
        code: *mut f32,
        tilt_code: f32,
        pt_pitch: f32,
    );
}
extern "C" {
    pub fn isp2a(isp: *const f32, a: *mut f32, m: ::std::os::raw::c_short);
}
extern "C" {
    pub fn isp2isf(isp: *const f32, isf: *mut f32, m: ::std::os::raw::c_short, fs: f32);
}
extern "C" {
    pub fn isf2isp(isf: *const f32, isp: *mut f32, m: ::std::os::raw::c_short, fs: f32);
}
extern "C" {
    pub fn reorder_isf(isf: *mut f32, min_dist: f32, n: ::std::os::raw::c_short, fs: f32);
}
extern "C" {
    pub fn lsp2lsf(lsp: *const f32, lsf: *mut f32, m: ::std::os::raw::c_short, fs: f32);
}
extern "C" {
    pub fn lsf2lsp(lsf: *const f32, lsp: *mut f32, m: ::std::os::raw::c_short, fs: f32);
}
extern "C" {
    pub fn lsp2isp(
        lsp: *const f32,
        isp: *mut f32,
        stable_isp: *mut f32,
        m: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn isp2lsp(
        isp: *const f32,
        lsp: *mut f32,
        stable_lsp: *mut f32,
        m: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn reorder_lsf(lsf: *mut f32, min_dist: f32, n: ::std::os::raw::c_short, fs: f32);
}
extern "C" {
    pub fn CNG_exc(
        core_brate: ::std::os::raw::c_long,
        L_frame: ::std::os::raw::c_short,
        Enew: *mut f32,
        seed: *mut ::std::os::raw::c_short,
        exc: *mut f32,
        exc2: *mut f32,
        lp_ener: *mut f32,
        last_core_brate: ::std::os::raw::c_long,
        first_CNG: *mut ::std::os::raw::c_short,
        cng_ener_seed: *mut ::std::os::raw::c_short,
        bwe_exc: *mut f32,
        allow_cn_step: ::std::os::raw::c_short,
        last_allow_cn_step: *mut ::std::os::raw::c_short,
        num_ho: ::std::os::raw::c_short,
        q_env: *mut f32,
        lp_env: *mut f32,
        old_env: *mut f32,
        exc_mem: *mut f32,
        exc_mem1: *mut f32,
        sid_bw: *mut ::std::os::raw::c_short,
        cng_ener_seed1: *mut ::std::os::raw::c_short,
        exc3: *mut f32,
        Opt_AMR_WB: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn cng_params_upd(
        lsp_new: *const f32,
        exc2: *const f32,
        L_frame: ::std::os::raw::c_short,
        ho_circ_ptr: *mut ::std::os::raw::c_short,
        ho_ener_circ: *mut f32,
        ho_circ_size: *mut ::std::os::raw::c_short,
        ho_lsp_circ: *mut f32,
        enc_dec_flag: ::std::os::raw::c_short,
        ho_env_circ: *mut f32,
        cng_buf_cnt: *mut ::std::os::raw::c_short,
        cng_exc2_buf: *mut f32,
        cng_brate_buf: *mut ::std::os::raw::c_long,
        last_active_brate: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn cng_params_postupd(
        ho_circ_ptr: ::std::os::raw::c_short,
        cng_buf_cnt: *mut ::std::os::raw::c_short,
        cng_exc2_buf: *const f32,
        cng_brate_buf: *const ::std::os::raw::c_long,
        ho_env_circ: *mut f32,
    );
}
extern "C" {
    pub fn disf_ns_28b(indice: *mut ::std::os::raw::c_short, isf_q: *mut f32);
}
extern "C" {
    pub fn limit_T0(
        L_frame: ::std::os::raw::c_short,
        delta: ::std::os::raw::c_short,
        pit_flag: ::std::os::raw::c_short,
        limit_flag: ::std::os::raw::c_short,
        T0: ::std::os::raw::c_short,
        T0_frac: ::std::os::raw::c_short,
        T0_min: *mut ::std::os::raw::c_short,
        T0_max: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn interpolation(
        x: *const f32,
        win: *const f32,
        frac: ::std::os::raw::c_short,
        up_samp: ::std::os::raw::c_short,
        nb_coef: ::std::os::raw::c_short,
    ) -> f32;
}
extern "C" {
    pub fn deemph(signal: *mut f32, mu: f32, L: ::std::os::raw::c_short, mem: *mut f32);
}
extern "C" {
    pub fn est_tilt(
        adpt_exc: *const f32,
        gain_pit: f32,
        fixe_exc: *const f32,
        gain_code: f32,
        voice_fac: *mut f32,
        L_subfr: ::std::os::raw::c_short,
        flag_tilt: ::std::os::raw::c_short,
    ) -> f32;
}
extern "C" {
    pub fn weight_a(a: *const f32, ap: *mut f32, gamma: f32, m: ::std::os::raw::c_short);
}
extern "C" {
    pub fn weight_a_subfr(
        nb_subfr: ::std::os::raw::c_short,
        a: *const f32,
        ap: *mut f32,
        gamma: f32,
        m: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn syn_12k8(
        L_frame: ::std::os::raw::c_short,
        Aq: *const f32,
        exc: *const f32,
        synth: *mut f32,
        mem: *mut f32,
        update_m: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn syn_filt(
        a: *const f32,
        m: ::std::os::raw::c_short,
        x: *const f32,
        y: *mut f32,
        l: ::std::os::raw::c_short,
        mem: *mut f32,
        update_m: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn synth_mem_updt2(
        L_frame: ::std::os::raw::c_short,
        last_L_frame: ::std::os::raw::c_short,
        old_exc: *mut f32,
        mem_syn_r: *mut f32,
        mem_syn2: *mut f32,
        mem_syn: *mut f32,
        dec: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn int_lsp(
        L_frame: ::std::os::raw::c_short,
        lsp_old: *const f32,
        lsp_new: *const f32,
        Aq: *mut f32,
        m: ::std::os::raw::c_short,
        int_coeffs: *const f32,
        Opt_AMR_WB: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn int_lsp4(
        L_frame: ::std::os::raw::c_short,
        lsp_old: *const f32,
        lsp_mid: *const f32,
        lsp_new: *const f32,
        Aq: *mut f32,
        m: ::std::os::raw::c_short,
        relax_prev_lsf_interp: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn modify_Fs(
        sigIn: *const f32,
        lg: ::std::os::raw::c_short,
        fin: ::std::os::raw::c_int,
        sigOut: *mut f32,
        fout: ::std::os::raw::c_int,
        mem: *mut f32,
        nblp: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pred_lt4(
        excI: *const f32,
        excO: *mut f32,
        T0: ::std::os::raw::c_short,
        frac: ::std::os::raw::c_short,
        L_subfr: ::std::os::raw::c_short,
        win: *const f32,
        nb_coef: ::std::os::raw::c_short,
        up_sample: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn pred_lt4_tc(
        exc: *mut f32,
        T0: ::std::os::raw::c_short,
        frac: ::std::os::raw::c_short,
        win: *const f32,
        imp_pos: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn residu(
        a: *const f32,
        m: ::std::os::raw::c_short,
        x: *const f32,
        y: *mut f32,
        l: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn calc_residu(
        speech: *const f32,
        res: *mut f32,
        p_Aq: *const f32,
        L_frame: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn enr_1_Az(Aq: *const f32, len: ::std::os::raw::c_short) -> f32;
}
extern "C" {
    pub fn Es_pred_enc(
        Es_pred: *mut f32,
        Es_pred_indice: *mut ::std::os::raw::c_int,
        L_frame: ::std::os::raw::c_short,
        L_subfr: ::std::os::raw::c_short,
        res: *const f32,
        voicing: *const f32,
        nb_bits: ::std::os::raw::c_short,
        no_ltp: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn init_lvq(
        offset_scale1: *mut [::std::os::raw::c_uint; 4usize],
        offset_scale2: *mut [::std::os::raw::c_uint; 4usize],
        offset_scale1_p: *mut [::std::os::raw::c_uint; 4usize],
        offset_scale2_p: *mut [::std::os::raw::c_uint; 4usize],
        no_scales: *mut [::std::os::raw::c_short; 2usize],
        no_scales_p: *mut [::std::os::raw::c_short; 2usize],
    );
}
extern "C" {
    pub fn mslvq(
        pTmp: *mut f32,
        quant: *mut f32,
        cv_out: *mut f32,
        idx_lead: *mut ::std::os::raw::c_int,
        idx_scale: *mut ::std::os::raw::c_int,
        w: *mut f32,
        mode: ::std::os::raw::c_short,
        mode_glb: ::std::os::raw::c_short,
        pred_flag: ::std::os::raw::c_int,
        no_scales: *mut [::std::os::raw::c_short; 2usize],
    ) -> f32;
}
extern "C" {
    pub fn permute(pTmp1: *mut f32, perm: *const ::std::os::raw::c_short);
}
extern "C" {
    pub fn mslvq_cng(
        idx_cv: ::std::os::raw::c_short,
        pTmp: *mut f32,
        quant: *mut f32,
        cv_out: *mut f32,
        idx_lead: *mut ::std::os::raw::c_int,
        idx_scale: *mut ::std::os::raw::c_int,
        w: *const f32,
        no_scales: *mut ::std::os::raw::c_short,
    ) -> f32;
}
extern "C" {
    pub fn deindex_lvq_cng(
        index: *mut ::std::os::raw::c_short,
        x_lvq: *mut f32,
        idx_cv: ::std::os::raw::c_short,
        no_bits: ::std::os::raw::c_int,
        p_offset_scale1: *mut ::std::os::raw::c_uint,
        p_offset_scale2: *mut ::std::os::raw::c_uint,
        p_no_scales: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn multiply32_32_64(
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
        res: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn deindex_lvq(
        index: *mut ::std::os::raw::c_short,
        x_lvq: *mut f32,
        mode: ::std::os::raw::c_short,
        sf_flag: ::std::os::raw::c_short,
        no_bits: ::std::os::raw::c_short,
        p_offset_scale1: *mut ::std::os::raw::c_uint,
        p_offset_scale2: *mut ::std::os::raw::c_uint,
        p_no_scales: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn vq_dec_lvq(
        sf_flag: ::std::os::raw::c_short,
        x: *mut f32,
        indices: *mut ::std::os::raw::c_short,
        stages: ::std::os::raw::c_short,
        N: ::std::os::raw::c_short,
        mode: ::std::os::raw::c_short,
        no_bits: ::std::os::raw::c_short,
        p_offset_scale1: *mut ::std::os::raw::c_uint,
        p_offset_scale2: *mut ::std::os::raw::c_uint,
        p_offset_scale1_p: *mut ::std::os::raw::c_uint,
        p_offset_scale2_p: *mut ::std::os::raw::c_uint,
        p_no_scales: *mut ::std::os::raw::c_short,
        p_no_scales_p: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn index_lvq(
        quant: *mut f32,
        idx_lead: *mut ::std::os::raw::c_int,
        idx_scale: *mut ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        index: *mut ::std::os::raw::c_short,
        p_offset_scale1: *mut ::std::os::raw::c_uint,
        p_offset_scale2: *mut ::std::os::raw::c_uint,
        p_no_scales: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn qlsf_ARSN_tcvq_Dec_16k(
        y: *mut f32,
        indice: *mut ::std::os::raw::c_short,
        nBits: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn lsf_bctcvq_encprm(
        st: *mut Encoder_State,
        param_lpc: *mut ::std::os::raw::c_int,
        bits_param_lpc: *mut ::std::os::raw::c_short,
        no_indices: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lsf_bctcvq_decprm(
        st: *mut Decoder_State,
        param_lpc: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lsf_allocate(
        nBits: ::std::os::raw::c_short,
        framemode: ::std::os::raw::c_short,
        framemode_p: ::std::os::raw::c_short,
        stages0: *mut ::std::os::raw::c_short,
        stages1: *mut ::std::os::raw::c_short,
        levels0: *mut ::std::os::raw::c_short,
        levels1: *mut ::std::os::raw::c_short,
        bits0: *mut ::std::os::raw::c_short,
        bits1: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn disf_2s_36b(
        indice: *mut ::std::os::raw::c_short,
        isf_q: *mut f32,
        mem_AR: *mut f32,
        mem_MA: *mut f32,
    );
}
extern "C" {
    pub fn disf_2s_46b(
        indice: *mut ::std::os::raw::c_short,
        isf_q: *mut f32,
        mem_AR: *mut f32,
        mem_MA: *mut f32,
    );
}
extern "C" {
    pub fn re8_k2y(
        k: *const ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn re8_PPV(x: *mut f32, y: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn enhancer(
        codec_mode: ::std::os::raw::c_short,
        core_brate: ::std::os::raw::c_long,
        cbk_index: ::std::os::raw::c_short,
        Opt_AMR_WB: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
        voice_fac: f32,
        stab_fac: f32,
        norm_gain_code: f32,
        gain_inov: f32,
        gc_threshold: *mut f32,
        code: *mut f32,
        exc2: *mut f32,
        gain_pit: f32,
        dispMem: *mut f32,
    );
}
extern "C" {
    pub fn phase_dispersion(
        gain_code: f32,
        gain_pit: f32,
        code: *mut f32,
        mode: ::std::os::raw::c_short,
        disp_mem: *mut f32,
    );
}
extern "C" {
    pub fn re8_vor(
        y: *mut ::std::os::raw::c_int,
        n: *mut ::std::os::raw::c_int,
        k: *mut ::std::os::raw::c_int,
        c: *mut ::std::os::raw::c_int,
        ka: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn edct(x: *const f32, y: *mut f32, length: ::std::os::raw::c_short);
}
extern "C" {
    pub fn edst(x: *const f32, y: *mut f32, length: ::std::os::raw::c_short);
}
extern "C" {
    pub fn iedct_short(in_: *const f32, out: *mut f32, segment_length: ::std::os::raw::c_short);
}
extern "C" {
    pub fn DoRTFT480(x: *mut f32, y: *mut f32);
}
extern "C" {
    pub fn DoRTFT320(x: *mut f32, y: *mut f32);
}
extern "C" {
    pub fn DoRTFT160(x: *mut f32, y: *mut f32);
}
extern "C" {
    pub fn DoRTFT128(x: *mut f32, y: *mut f32);
}
extern "C" {
    pub fn DoRTFT120(x: *mut f32, y: *mut f32);
}
extern "C" {
    pub fn DoRTFT80(x: *mut f32, y: *mut f32);
}
extern "C" {
    pub fn DoRTFT20(x: *mut f32, y: *mut f32);
}
extern "C" {
    pub fn DoRTFT40(x: *mut f32, y: *mut f32);
}
extern "C" {
    pub fn DoRTFTn(x: *mut f32, y: *mut f32, n: ::std::os::raw::c_short);
}
extern "C" {
    pub fn BASOP_cfft(re: *mut Word32, im: *mut Word32, s: Word16, scale: *mut Word16);
}
extern "C" {
    pub fn sinq(tmp: f32, phi: f32, N: ::std::os::raw::c_short, x: *mut f32);
}
extern "C" {
    pub fn edct2(
        n: ::std::os::raw::c_short,
        isgn: ::std::os::raw::c_short,
        in_: *mut f32,
        a: *mut f32,
        ip: *const ::std::os::raw::c_short,
        w: *const f32,
    );
}
extern "C" {
    pub fn stat_noise_uv_mod(
        coder_type: ::std::os::raw::c_short,
        noisiness: f32,
        isp_old: *const f32,
        isp_new: *const f32,
        isp_mid: *const f32,
        Aq: *mut f32,
        exc2: *mut f32,
        bfi: ::std::os::raw::c_short,
        ge_sm: *mut f32,
        uv_count: *mut ::std::os::raw::c_short,
        act_count: *mut ::std::os::raw::c_short,
        lspold_s: *mut f32,
        noimix_seed: *mut ::std::os::raw::c_short,
        st_min_alpha: *mut f32,
        exc_pe: *mut f32,
        bitrate: ::std::os::raw::c_long,
        bwidth: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn SWB_TBE_describe_envelope(yos: *const f32, SWB_env_gain: *mut f32);
}
extern "C" {
    pub fn dct2(in_: *const f32, out: *mut f32);
}
extern "C" {
    pub fn idct2(in_: *const f32, out: *mut f32);
}
extern "C" {
    pub fn pre_echo_att(
        Last_frame_ener: *mut f32,
        exc: *mut f32,
        attack_flag: ::std::os::raw::c_short,
        last_coder_type: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hq_swb_harmonic_calc_norm_envelop(
        SWB_signal: *mut f32,
        envelope: *mut f32,
        L_swb_norm: ::std::os::raw::c_int,
        SWB_flength: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn limit_band_noise_level_calc(
        wnorm: *mut ::std::os::raw::c_short,
        limit: *mut ::std::os::raw::c_short,
        core_brate: ::std::os::raw::c_long,
        noise_level: *mut f32,
    );
}
extern "C" {
    pub fn peak_avrg_ratio(
        total_brate: ::std::os::raw::c_long,
        input_hi: *const f32,
        N: ::std::os::raw::c_short,
        mode_count: *mut ::std::os::raw::c_short,
        mode_count1: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn build_nf_codebook(
        flag_32K_env_ho: ::std::os::raw::c_short,
        coeff: *const f32,
        sfm_start: *const ::std::os::raw::c_short,
        sfmsize: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
        R: *const ::std::os::raw::c_short,
        CodeBook: *mut f32,
        CodeBook_mod: *mut f32,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn apply_noisefill_HQ(
        R: *const ::std::os::raw::c_short,
        length: ::std::os::raw::c_short,
        flag_32K_env_ho: ::std::os::raw::c_short,
        core_brate: ::std::os::raw::c_long,
        last_sfm: ::std::os::raw::c_short,
        CodeBook: *const f32,
        CodeBook_mod: *const f32,
        cb_size: ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        sfmsize: *const ::std::os::raw::c_short,
        coeff: *mut f32,
    );
}
extern "C" {
    pub fn harm_bwe_fine(
        R: *const ::std::os::raw::c_short,
        last_sfm: ::std::os::raw::c_short,
        high_sfm: ::std::os::raw::c_short,
        num_sfm: ::std::os::raw::c_short,
        norm: *const ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        prev_L_swb_norm: *mut ::std::os::raw::c_short,
        coeff: *mut f32,
        coeff_out: *mut f32,
        coeff_fine: *mut f32,
    );
}
extern "C" {
    pub fn hvq_bwe_fine(
        last_sfm: ::std::os::raw::c_short,
        num_sfm: ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        peak_idx: *const ::std::os::raw::c_short,
        Npeaks: ::std::os::raw::c_short,
        peak_pos: *mut ::std::os::raw::c_short,
        prev_L_swb_norm: *mut ::std::os::raw::c_short,
        coeff: *mut f32,
        bwe_peaks: *mut ::std::os::raw::c_short,
        coeff_fine: *mut f32,
    );
}
extern "C" {
    pub fn hq_fold_bwe(
        last_sfm: ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        num_sfm: ::std::os::raw::c_short,
        coeff: *mut f32,
    );
}
extern "C" {
    pub fn apply_nf_gain(
        nf_idx: ::std::os::raw::c_short,
        last_sfm: ::std::os::raw::c_short,
        R: *const ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        coeff: *mut f32,
    );
}
extern "C" {
    pub fn hq_generic_fine(
        coeff: *mut f32,
        last_sfm: ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        bwe_seed: *mut ::std::os::raw::c_short,
        coeff_out1: *mut f32,
    );
}
extern "C" {
    pub fn harm_bwe(
        coeff_fine: *const f32,
        coeff: *const f32,
        num_sfm: ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        last_sfm: ::std::os::raw::c_short,
        high_sfm: ::std::os::raw::c_short,
        R: *const ::std::os::raw::c_short,
        prev_hq_mode: ::std::os::raw::c_short,
        norm: *mut ::std::os::raw::c_short,
        noise_level: *mut f32,
        prev_noise_level: *mut f32,
        bwe_seed: *mut ::std::os::raw::c_short,
        coeff_out: *mut f32,
    );
}
extern "C" {
    pub fn hvq_bwe(
        coeff: *const f32,
        coeff_fine: *const f32,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        sfm_len: *const ::std::os::raw::c_short,
        last_sfm: ::std::os::raw::c_short,
        prev_hq_mode: ::std::os::raw::c_short,
        bwe_peaks: *const ::std::os::raw::c_short,
        bin_th: ::std::os::raw::c_short,
        num_sfm: ::std::os::raw::c_short,
        core_brate: ::std::os::raw::c_long,
        R: *const ::std::os::raw::c_short,
        norm: *mut ::std::os::raw::c_short,
        noise_level: *mut f32,
        prev_noise_level: *mut f32,
        bwe_seed: *mut ::std::os::raw::c_short,
        coeff_out: *mut f32,
    );
}
extern "C" {
    pub fn hvq_concat_bands(
        pvq_bands: ::std::os::raw::c_short,
        sel_bnds: *const ::std::os::raw::c_short,
        n_sel_bnds: ::std::os::raw::c_short,
        hvq_band_start: *mut ::std::os::raw::c_short,
        hvq_band_width: *mut ::std::os::raw::c_short,
        hvq_band_end: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hq_generic_bwe(
        HQ_mode: ::std::os::raw::c_short,
        coeff_out1: *mut f32,
        hq_generic_fenv: *const f32,
        coeff_out: *mut f32,
        hq_generic_offset: ::std::os::raw::c_short,
        prev_L_swb_norm: *mut ::std::os::raw::c_short,
        hq_generic_exc_clas: ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        num_sfm: ::std::os::raw::c_short,
        num_env_bands: ::std::os::raw::c_short,
        R: *const ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn logqnorm_2(
        env_fl: *const f32,
        L: ::std::os::raw::c_short,
        n_env_band: ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
        ynrm: *mut ::std::os::raw::c_short,
        normqlg2: *mut ::std::os::raw::c_short,
        thren: *const f32,
    );
}
extern "C" {
    pub fn map_hq_generic_fenv_norm(
        hqswb_clas: ::std::os::raw::c_short,
        hq_generic_fenv: *const f32,
        ynrm: *mut ::std::os::raw::c_short,
        normqlg2: *mut ::std::os::raw::c_short,
        num_env_bands: ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
        hq_generic_offset: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn calc_nor_delta_hf(
        st: *mut Encoder_State,
        t_audio: *const f32,
        ynrm: *mut ::std::os::raw::c_short,
        Rsubband: *mut ::std::os::raw::c_short,
        num_env_bands: ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
        sfmsize: *const ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        core_sfm: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn get_nor_delta_hf(
        st: *mut Decoder_State,
        ynrm: *mut ::std::os::raw::c_short,
        Rsubband: *mut ::std::os::raw::c_short,
        num_env_bands: ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
        core_sfm: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn hq_wb_nf_bwe(
        coeff: *const f32,
        is_transient: ::std::os::raw::c_short,
        prev_bfi: ::std::os::raw::c_short,
        normq_v: *const f32,
        num_sfm: ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        sfmsize: *const ::std::os::raw::c_short,
        last_sfm: ::std::os::raw::c_short,
        R: *const ::std::os::raw::c_short,
        prev_is_transient: ::std::os::raw::c_short,
        prev_normq: *mut f32,
        prev_env: *mut f32,
        bwe_seed: *mut ::std::os::raw::c_short,
        prev_coeff_out: *mut f32,
        prev_R: *mut ::std::os::raw::c_short,
        coeff_out: *mut f32,
    );
}
extern "C" {
    pub fn encode_envelope_indices(
        st: *mut Encoder_State,
        num_sfm: ::std::os::raw::c_short,
        numnrmibits: ::std::os::raw::c_short,
        difidx: *mut ::std::os::raw::c_short,
        LCmode: *mut ::std::os::raw::c_short,
        flag_pack: ::std::os::raw::c_short,
        flag_HQ2: ::std::os::raw::c_short,
        is_transient: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn diff_envelope_coding(
        is_transient: ::std::os::raw::c_short,
        num_env_bands: ::std::os::raw::c_short,
        start_norm: ::std::os::raw::c_short,
        ynrm: *mut ::std::os::raw::c_short,
        normqlg2: *mut ::std::os::raw::c_short,
        difidx: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn decode_envelope_indices(
        st: *mut Decoder_State,
        start_norm: ::std::os::raw::c_short,
        num_sfm: ::std::os::raw::c_short,
        numnrmibits: ::std::os::raw::c_short,
        ynrm: *mut ::std::os::raw::c_short,
        flag_HQ2: ::std::os::raw::c_short,
        is_transient: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dequantize_norms(
        st: *mut Decoder_State,
        start_norm: ::std::os::raw::c_short,
        num_sfm: ::std::os::raw::c_short,
        is_transient: ::std::os::raw::c_short,
        ynrm: *mut ::std::os::raw::c_short,
        normqlg2: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hq_configure(
        length: ::std::os::raw::c_short,
        hqswb_clas: ::std::os::raw::c_short,
        brate: ::std::os::raw::c_long,
        num_sfm: *mut ::std::os::raw::c_short,
        nb_sfm: *mut ::std::os::raw::c_short,
        start_norm: *mut ::std::os::raw::c_short,
        num_sde_norm: *mut ::std::os::raw::c_short,
        numnrmibits: *mut ::std::os::raw::c_short,
        hq_generic_offset: *mut ::std::os::raw::c_short,
        sfmsize: *mut *const ::std::os::raw::c_short,
        sfm_start: *mut *const ::std::os::raw::c_short,
        sfm_end: *mut *const ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hvq_enc(
        st: *mut Encoder_State,
        brate: ::std::os::raw::c_long,
        hvq_bits: ::std::os::raw::c_short,
        Npeaks: ::std::os::raw::c_short,
        ynrm: *const ::std::os::raw::c_short,
        R: *mut ::std::os::raw::c_short,
        peaks: *mut ::std::os::raw::c_short,
        nf_gains: *mut f32,
        noise_level: *mut f32,
        pe_gains: *const f32,
        coefs: *const f32,
        coefs_out: *mut f32,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn hq_classifier_enc(
        st: *mut Encoder_State,
        length: ::std::os::raw::c_short,
        coefs: *const f32,
        is_transient: ::std::os::raw::c_short,
        Npeaks: *mut ::std::os::raw::c_short,
        peaks: *mut ::std::os::raw::c_short,
        pe_gains: *mut f32,
        nf_gains: *mut f32,
        hqswb_clas: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn hq_classifier_dec(
        st: *mut Decoder_State,
        core_brate: ::std::os::raw::c_long,
        length: ::std::os::raw::c_short,
        is_transient: *mut ::std::os::raw::c_short,
        hqswb_clas: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn hq_bit_allocation(
        core_brate: ::std::os::raw::c_long,
        length: ::std::os::raw::c_short,
        hqswb_clas: ::std::os::raw::c_short,
        num_bits: *mut ::std::os::raw::c_short,
        normqlg2: *const ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
        sfmsize: *const ::std::os::raw::c_short,
        noise_level: *mut f32,
        R: *mut ::std::os::raw::c_short,
        Rsubband: *mut ::std::os::raw::c_short,
        sum: *mut ::std::os::raw::c_short,
        core_sfm: *mut ::std::os::raw::c_short,
        num_env_bands: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn enforce_zero_for_min_envelope(
        hqswb_clas: ::std::os::raw::c_short,
        ynrm: *const ::std::os::raw::c_short,
        coefsq: *mut f32,
        nb_sfm: ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn assign_gain_bits(
        core: ::std::os::raw::c_short,
        BANDS: ::std::os::raw::c_short,
        band_width: *const ::std::os::raw::c_short,
        Rk: *mut ::std::os::raw::c_short,
        gain_bits_array: *mut ::std::os::raw::c_short,
        Rcalc: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn apply_envelope(
        coeff: *const f32,
        norm: *const ::std::os::raw::c_short,
        norm_adj: *const f32,
        num_sfm: ::std::os::raw::c_short,
        last_sfm: ::std::os::raw::c_short,
        HQ_mode: ::std::os::raw::c_short,
        length: ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        normq_v: *mut f32,
        coeff_out: *mut f32,
        coeff_out1: *mut f32,
    );
}
extern "C" {
    pub fn mpvq_encode_vec(
        vec_in: *const ::std::os::raw::c_short,
        dim_in: ::std::os::raw::c_short,
        k_val_local: ::std::os::raw::c_short,
    ) -> PvqEntry;
}
extern "C" {
    pub fn get_size_mpvq_calc_offset(
        dim_in: ::std::os::raw::c_short,
        k_val_in: ::std::os::raw::c_short,
        h_mem: *mut ::std::os::raw::c_uint,
    ) -> PvqEntry;
}
extern "C" {
    pub fn mpvq_decode_vec(
        entry: *const PvqEntry,
        h_mem: *mut ::std::os::raw::c_uint,
        vec_out: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn UMult_32_32(
        UL_var1: ::std::os::raw::c_uint,
        UL_var2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn UL_inverse(
        UL_val: ::std::os::raw::c_uint,
        exp: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ratio(numer: Word32, denom: Word32, expo: *mut Word16) -> Word16;
}
extern "C" {
    pub fn atan2_fx(y: Word32, x: Word32) -> Word16;
}
extern "C" {
    pub fn encode_energies(
        st: *mut Encoder_State,
        coefs: *const f32,
        Np: ::std::os::raw::c_short,
        dim_part: *mut ::std::os::raw::c_short,
        E_part: *mut f32,
        bits_part: *mut ::std::os::raw::c_short,
        g_part: *mut ::std::os::raw::c_short,
        qband: ::std::os::raw::c_short,
        bits_left: *mut ::std::os::raw::c_short,
        enr: f32,
        n: ::std::os::raw::c_short,
        strict_bits: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn decode_energies(
        st: *mut Decoder_State,
        Np: ::std::os::raw::c_short,
        dim_part: *mut ::std::os::raw::c_short,
        bits_part: *mut ::std::os::raw::c_short,
        g_part: *mut ::std::os::raw::c_short,
        qband: ::std::os::raw::c_short,
        bits_left: *mut ::std::os::raw::c_short,
        n: ::std::os::raw::c_short,
        strict_bits: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn pvq_encode_frame(
        st: *mut Encoder_State,
        coefs_norm: *const f32,
        coefs_quant: *mut f32,
        gopt: *mut f32,
        npulses: *mut ::std::os::raw::c_short,
        pulse_vector: *mut ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        sfmsize: *const ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
        R: *const ::std::os::raw::c_short,
        pvq_bits: ::std::os::raw::c_short,
        core: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn pvq_decode_frame(
        st: *mut Decoder_State,
        coefs_quant: *mut f32,
        npulses: *mut ::std::os::raw::c_short,
        pulse_vector: *mut ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        sfmsize: *const ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
        R: *const ::std::os::raw::c_short,
        pvq_bits: ::std::os::raw::c_short,
        core: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn srt_vec_ind(
        linear: *const ::std::os::raw::c_short,
        srt: *mut ::std::os::raw::c_short,
        I: *mut ::std::os::raw::c_short,
        length: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn srt_vec_ind_f(
        linear: *const f32,
        srt: *mut f32,
        I: *mut ::std::os::raw::c_short,
        length: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn floor_sqrt_exact(input: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn fine_gain_quant(
        st: *mut Encoder_State,
        ord: *const ::std::os::raw::c_short,
        num_sfm: ::std::os::raw::c_short,
        gain_bits: *const ::std::os::raw::c_short,
        fg_pred: *mut f32,
        gopt: *const f32,
    );
}
extern "C" {
    pub fn apply_gain(
        ord: *const ::std::os::raw::c_short,
        band_start: *const ::std::os::raw::c_short,
        band_end: *const ::std::os::raw::c_short,
        num_sfm: ::std::os::raw::c_short,
        gains: *const f32,
        xq: *mut f32,
    );
}
extern "C" {
    pub fn fine_gain_pred(
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        sfm_size: *const ::std::os::raw::c_short,
        i_sort: *const ::std::os::raw::c_short,
        K: *const ::std::os::raw::c_short,
        maxpulse: *const ::std::os::raw::c_short,
        R: *const ::std::os::raw::c_short,
        num_sfm: ::std::os::raw::c_short,
        xq: *mut f32,
        y: *mut ::std::os::raw::c_short,
        fg_pred: *mut f32,
        core: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn fine_gain_dec(
        st: *mut Decoder_State,
        ord: *const ::std::os::raw::c_short,
        num_sfm: ::std::os::raw::c_short,
        gain_bits: *const ::std::os::raw::c_short,
        fg_pred: *mut f32,
    );
}
extern "C" {
    pub fn get_max_pulses(
        band_start: *const ::std::os::raw::c_short,
        band_end: *const ::std::os::raw::c_short,
        k_sort: *const ::std::os::raw::c_short,
        npulses: *const ::std::os::raw::c_short,
        BANDS: ::std::os::raw::c_short,
        inp_vector: *mut ::std::os::raw::c_short,
        maxpulse: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn ar_div(num: Word32, denum: Word32) -> Word32;
}
extern "C" {
    pub fn ar_encoder_start(arInst: PARCODEC, bsInst: PBITSTREAM, max_bits: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ar_decoder_start(arInst: PARCODEC, bsInst: PBITSTREAM);
}
extern "C" {
    pub fn ar_encoder_done(arInst: PARCODEC);
}
extern "C" {
    pub fn ar_decoder_done(arInst: PARCODEC);
}
extern "C" {
    pub fn GetISCScale(
        quants: *mut f32,
        size: ::std::os::raw::c_int,
        bits_fx: Word32,
        magn: *mut f32,
        qscale: *mut f32,
        surplus_fx: *mut Word32,
        pulses: *mut f32,
        savedstates: *mut ::std::os::raw::c_int,
        noTCQ: ::std::os::raw::c_int,
        nzpout: *mut ::std::os::raw::c_int,
        bcount: *mut ::std::os::raw::c_short,
        abuffer: *mut f32,
        mbuffer: *mut f32,
        sbuffer: *mut f32,
    ) -> f32;
}
extern "C" {
    pub fn Mult_32_16(a: Word32, b: Word16) -> Word32;
}
extern "C" {
    pub fn Mult_32_32(a: Word32, b: Word32) -> Word32;
}
extern "C" {
    pub fn decode_position_ari_fx(
        pardec: PARCODEC,
        size: Word16,
        npulses: Word16,
        nz: *mut Word16,
        position: *mut Word32,
    );
}
extern "C" {
    pub fn decode_magnitude_usq_fx(
        pardec: *mut ARCODEC,
        size: Word16,
        npulses: Word16,
        nzpos: Word16,
        positions: *mut Word32,
        out: *mut Word32,
    );
}
extern "C" {
    pub fn decode_mangitude_tcq_fx(
        pardec: *mut ARCODEC,
        size: Word16,
        npulses: Word16,
        nzpos: Word16,
        positions: *mut Word32,
        out: *mut Word32,
        surplus_fx: *mut Word32,
    );
}
extern "C" {
    pub fn decode_signs_fx(pardec: *mut ARCODEC, size: Word16, out: *mut Word32);
}
extern "C" {
    pub fn srt_vec_ind_fx(linear: *const Word32, srt: *mut Word32, I: *mut Word16, length: Word16);
}
extern "C" {
    pub fn GetScale_fx(blen: Word16, bits_fx: Word32, surplus_fx: *mut Word32) -> Word16;
}
extern "C" {
    pub fn bit_allocation_second_fx(
        Rk: *mut Word32,
        Rk_sort: *mut Word32,
        BANDS: Word16,
        band_width: *const Word16,
        k_sort: *mut Word16,
        k_num: *mut Word16,
        p2a_flags: *const Word16,
        p2a_bands: Word16,
        last_bitalloc: *const Word16,
        input_frame: Word16,
    );
}
extern "C" {
    pub fn encode_position_ari_fx(
        parenc: PARCODEC,
        quants: *mut f32,
        size: Word16,
        est_bits_frame_fx: *mut Word32,
    ) -> Word32;
}
extern "C" {
    pub fn encode_magnitude_tcq_fx(
        parenc: *mut ARCODEC,
        magn_fx: *mut f32,
        size: Word16,
        npulses: Word16,
        nzpos: Word16,
        savedstates: *mut Word32,
        est_frame_bits_fx: *mut Word32,
    ) -> Word32;
}
extern "C" {
    pub fn encode_signs_fx(
        parenc: *mut ARCODEC,
        magn: *mut f32,
        size: Word16,
        npos: Word16,
        est_frame_bits_fx: *mut Word32,
    ) -> Word32;
}
extern "C" {
    pub fn encode_magnitude_usq_fx(
        parenc: *mut ARCODEC,
        magn_fx: *mut f32,
        size: Word16,
        npulses: Word16,
        nzpos: Word16,
        est_frame_bits_fx: *mut Word32,
    ) -> Word32;
}
extern "C" {
    pub fn tcq_core_LR_enc(
        st: *mut Encoder_State,
        inp_vector: *mut ::std::os::raw::c_int,
        coefs_norm: *const f32,
        coefs_quant: *mut f32,
        bit_budget: ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        sfmsize: *const ::std::os::raw::c_short,
        Rk_fx: *mut Word32,
        npulses: *mut ::std::os::raw::c_int,
        k_sort: *mut ::std::os::raw::c_short,
        p2a_flags: *const ::std::os::raw::c_short,
        p2a_bands: ::std::os::raw::c_short,
        last_bitalloc: *const ::std::os::raw::c_short,
        input_frame: ::std::os::raw::c_short,
        adjustFlag: ::std::os::raw::c_short,
        is_transient: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn tcq_core_LR_dec(
        st: *mut Decoder_State,
        inp_vector: *mut ::std::os::raw::c_int,
        bit_budget: ::std::os::raw::c_short,
        bands: ::std::os::raw::c_short,
        band_start: *const ::std::os::raw::c_short,
        band_width: *const ::std::os::raw::c_short,
        Rk_fx: *mut Word32,
        npulses: *mut ::std::os::raw::c_int,
        k_sort: *mut ::std::os::raw::c_short,
        p2a_flags: *const ::std::os::raw::c_short,
        p2a_bands: ::std::os::raw::c_short,
        last_bitalloc: *const ::std::os::raw::c_short,
        input_frame: ::std::os::raw::c_short,
        adjustFlag: ::std::os::raw::c_short,
        is_transient: *const ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn InitLSBTCQ(bcount: *mut ::std::os::raw::c_short);
}
extern "C" {
    pub fn TCQLSB(
        bcount: ::std::os::raw::c_short,
        abuffer: *mut f32,
        mbuffer: *mut f32,
        sbuffer: *mut f32,
        dpath: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn RestoreTCQ(
        magn: *mut f32,
        size: ::std::os::raw::c_int,
        bcount: *mut ::std::os::raw::c_short,
        mbuffer: *mut f32,
    );
}
extern "C" {
    pub fn SaveTCQdata(
        arInst: PARCODEC,
        dpath: *mut ::std::os::raw::c_short,
        bcount: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn LoadTCQdata(
        arInst: PARCODEC,
        dpath: *mut ::std::os::raw::c_short,
        bcount: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn RestoreTCQdec(
        magn: *mut ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        bcount: *mut ::std::os::raw::c_short,
        mbuffer: *mut f32,
    );
}
extern "C" {
    pub fn TCQLSBdec(
        dpath: *mut ::std::os::raw::c_short,
        mbuffer: *mut f32,
        bcount: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn io_ini_enc(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        f_input: *mut *mut FILE,
        f_stream: *mut *mut FILE,
        f_rate: *mut *mut FILE,
        f_bwidth: *mut *mut FILE,
        f_rf: *mut *mut FILE,
        quietMode: *mut ::std::os::raw::c_short,
        noDelayCmp: *mut ::std::os::raw::c_short,
        st: *mut Encoder_State,
    );
}
extern "C" {
    pub fn read_next_rfparam(
        rf_fec_offset: *mut ::std::os::raw::c_short,
        rf_fec_indicator: *mut ::std::os::raw::c_short,
        f_rf: *mut FILE,
    );
}
extern "C" {
    pub fn read_next_brate(
        total_brate: *mut ::std::os::raw::c_long,
        last_total_brate: ::std::os::raw::c_int,
        f_rate: *mut FILE,
        input_Fs: ::std::os::raw::c_int,
        Opt_AMR_WB: *mut ::std::os::raw::c_short,
        Opt_SC_VBR: *mut ::std::os::raw::c_short,
        codec_mode: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn read_next_bwidth(
        max_bwidth: *mut ::std::os::raw::c_short,
        f_bwidth: *mut FILE,
        bwidth_profile_cnt: *mut ::std::os::raw::c_long,
        input_Fs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn init_encoder(st: *mut Encoder_State);
}
extern "C" {
    pub fn destroy_encoder(st: *mut Encoder_State);
}
extern "C" {
    pub fn evs_enc(
        st: *mut Encoder_State,
        data: *const ::std::os::raw::c_short,
        n_samples: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn amr_wb_enc(
        st: *mut Encoder_State,
        data: *const ::std::os::raw::c_short,
        n_samples: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn pre_proc(
        st: *mut Encoder_State,
        input_frame: ::std::os::raw::c_short,
        signal_in: *const f32,
        old_inp_12k8: *mut f32,
        old_inp_16k: *mut f32,
        inp: *mut *mut f32,
        sp_aud_decision1: *mut ::std::os::raw::c_short,
        sp_aud_decision2: *mut ::std::os::raw::c_short,
        fr_bands: *mut f32,
        vad_flag: *mut ::std::os::raw::c_short,
        localVAD: *mut ::std::os::raw::c_short,
        Etot: *mut f32,
        ener: *mut f32,
        pitch: *mut ::std::os::raw::c_short,
        voicing: *mut f32,
        A: *mut f32,
        Aw: *mut f32,
        epsP: *mut f32,
        lsp_new: *mut f32,
        lsp_mid: *mut f32,
        coder_type: *mut ::std::os::raw::c_short,
        sharpFlag: *mut ::std::os::raw::c_short,
        vad_hover_flag: *mut ::std::os::raw::c_short,
        attack_flag: *mut ::std::os::raw::c_short,
        new_inp_resamp16k: *mut f32,
        Voicing_flag: *mut ::std::os::raw::c_short,
        realBuffer: *mut [f32; 60usize],
        imagBuffer: *mut [f32; 60usize],
        hq_core_type: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn mdct_classifier(
        Y: *const f32,
        st: *mut Encoder_State,
        vadflag: ::std::os::raw::c_short,
        cldfbBuf_Ener: *mut f32,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn MDCT_selector(
        st: *mut Encoder_State,
        sp_floor: f32,
        Etot: f32,
        cor_map_sum: f32,
        voicing: *const f32,
        enerBuffer: *const f32,
        vadflag: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn MDCT_selector_reset(st: *mut Encoder_State);
}
extern "C" {
    pub fn acelp_core_enc(
        st: *mut Encoder_State,
        mem: *mut LPD_state,
        inp: *const f32,
        vad_flag: ::std::os::raw::c_short,
        ener: f32,
        pitch: *const ::std::os::raw::c_short,
        voicing: *const f32,
        A: *mut f32,
        Aw: *mut f32,
        epsP: *const f32,
        lsp_new: *mut f32,
        lsp_mid: *mut f32,
        coder_type: ::std::os::raw::c_short,
        sharpFlag: ::std::os::raw::c_short,
        vad_hover_flag: ::std::os::raw::c_short,
        attack_flag: ::std::os::raw::c_short,
        bwe_exc_extended: *mut f32,
        voice_factors: *mut f32,
        old_syn_12k8_16k: *mut f32,
        pitch_buf: *mut f32,
        unbits: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn acelp_core_switch_dec_bfi(
        st: *mut Decoder_State,
        synth_out: *mut f32,
        coder_type: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn acelp_core_switch_enc(
        st: *mut Encoder_State,
        mem: *mut LPD_state,
        inp12k8: *const f32,
        inp16k: *const f32,
        T_op: *const ::std::os::raw::c_short,
        voicing: *const f32,
        A: *const f32,
    );
}
extern "C" {
    pub fn modify_Fs_intcub3m_sup(
        sigIn: *const f32,
        lg: ::std::os::raw::c_short,
        fin: ::std::os::raw::c_int,
        sigOut: *mut f32,
        fout: ::std::os::raw::c_int,
        delayout: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn core_switching_OLA(
        mem_over_hp: *const f32,
        last_L_frame: ::std::os::raw::c_short,
        output_Fs: ::std::os::raw::c_int,
        synth: *mut f32,
        synth_subfr_out: *const f32,
        synth_subfr_bwe: *mut f32,
        output_frame: ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn retro_interp4_5(syn: *const f32, pst_old_syn: *mut f32);
}
extern "C" {
    pub fn retro_interp5_4(pst_old_syn: *mut f32);
}
extern "C" {
    pub fn core_switching_hq_prepare_enc(
        st: *mut Encoder_State,
        num_bits: *mut ::std::os::raw::c_short,
        input_frame: ::std::os::raw::c_short,
        wtda_audio: *mut f32,
        audio: *const f32,
    );
}
extern "C" {
    pub fn core_switching_hq_prepare_dec(
        st: *mut Decoder_State,
        num_bits: *mut ::std::os::raw::c_short,
        input_frame: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn acelp_core_switch_dec(
        st: *mut Decoder_State,
        synth_subfr_out: *mut f32,
        tmp_synth_bwe: *mut f32,
        output_frame: ::std::os::raw::c_short,
        core_switching_flag: ::std::os::raw::c_short,
        mem_synth: *mut f32,
    );
}
extern "C" {
    pub fn space_lsfs(lsfs: *mut f32, order: ::std::os::raw::c_short);
}
extern "C" {
    pub fn lsp2a(pc_in: *mut f32, freq: *mut f32, order: ::std::os::raw::c_short);
}
extern "C" {
    pub fn lsp_weights(lsps: *const f32, weight: *mut f32, order: ::std::os::raw::c_short);
}
extern "C" {
    pub fn a2lsp_stab(a: *const f32, lsp: *mut f32, old_lsp: *const f32);
}
extern "C" {
    pub fn lsp2a_stab(lsp: *const f32, a: *mut f32, m: ::std::os::raw::c_short);
}
extern "C" {
    pub fn isf2lsf(
        isf: *const f32,
        lsf: *mut f32,
        stable_lsp: *mut f32,
        m: ::std::os::raw::c_short,
        int_fs: f32,
    );
}
extern "C" {
    pub fn lsf2isf(
        lsf: *const f32,
        isf: *mut f32,
        stable_isp: *mut f32,
        m: ::std::os::raw::c_short,
        int_fs: f32,
    );
}
extern "C" {
    pub fn a2lsp(
        freq: *mut f32,
        a: *const f32,
        order: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ResetSHBbuffer_Enc(st: *mut Encoder_State);
}
extern "C" {
    pub fn ResetSHBbuffer_Dec(st: *mut Decoder_State);
}
extern "C" {
    pub fn calc_st_filt(
        apond2: *const f32,
        apond1: *const f32,
        parcor0: *mut f32,
        sig_ltp_ptr: *mut f32,
        mem_zero: *mut f32,
        L_subfr: ::std::os::raw::c_short,
        extl: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn scale_st(
        sig_in: *const f32,
        sig_out: *mut f32,
        gain_prec: *mut f32,
        L_subfr: ::std::os::raw::c_short,
        extl: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn filt_mu(
        sig_in: *const f32,
        sig_out: *mut f32,
        parcor0: f32,
        L_subfr: ::std::os::raw::c_short,
        extl: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn PostShortTerm(
        sig_in: *mut f32,
        lpccoeff: *mut f32,
        sig_out: *mut f32,
        mem_stp: *mut f32,
        ptr_mem_stp: *mut f32,
        ptr_gain_prec: *mut f32,
        mem_zero: *mut f32,
        formant_fac: f32,
    );
}
extern "C" {
    pub fn swb_formant_fac(lpc_shb2: f32, tilt_mem: *mut f32) -> f32;
}
extern "C" {
    pub fn GenShapedSHBExcitation(
        excSHB: *mut f32,
        lpc_shb: *const f32,
        exc16kWhtnd: *mut f32,
        mem_csfilt: *mut f32,
        mem_genSHBexc_filt_down_shb: *mut f32,
        state_lpc_syn: *mut f32,
        coder_type: ::std::os::raw::c_short,
        bwe_exc_extended: *const f32,
        bwe_seed: *mut ::std::os::raw::c_short,
        voice_factors: *mut f32,
        extl: ::std::os::raw::c_short,
        tbe_demph: *mut f32,
        tbe_premph: *mut f32,
        lpc_shb_sf: *mut f32,
        shb_ener_sf: *mut f32,
        shb_res_gshape: *mut f32,
        shb_res: *mut f32,
        vf_ind: *mut ::std::os::raw::c_short,
        formant_fac: f32,
        fb_state_lpc_syn: *mut f32,
        fb_tbe_demph: *mut f32,
        bitrate: ::std::os::raw::c_long,
        prev_bfi: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn GenSHBSynth(
        shb_target_speech: *const f32,
        shb_syn_speech_32k: *mut f32,
        Hilbert_Mem: *mut f32,
        state_lsyn_filt_shb_local: *mut f32,
        L_frame: ::std::os::raw::c_short,
        syn_dm_phase: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn ScaleShapedSHB(
        length: ::std::os::raw::c_short,
        synSHB: *mut f32,
        overlap: *mut f32,
        subgain: *const f32,
        frame_gain: f32,
        win: *const f32,
        subwin: *const f32,
    );
}
extern "C" {
    pub fn Interpolate_allpass_steep(
        in_: *const f32,
        state: *mut f32,
        N: ::std::os::raw::c_short,
        out: *mut f32,
    );
}
extern "C" {
    pub fn Decimate_allpass_steep(
        in_: *const f32,
        state: *mut f32,
        N: ::std::os::raw::c_short,
        out: *mut f32,
    );
}
extern "C" {
    pub fn interpolate_3_over_2_allpass(
        input: *const f32,
        len: ::std::os::raw::c_short,
        out: *mut f32,
        mem: *mut f32,
        filt_coeff: *const f32,
    );
}
extern "C" {
    pub fn decimate_2_over_3_allpass(
        input: *const f32,
        len: ::std::os::raw::c_short,
        out: *mut f32,
        mem: *mut f32,
        filt_coeff: *const f32,
        lp_num: *const f32,
        lp_den: *const f32,
        lp_mem: *mut f32,
    );
}
extern "C" {
    pub fn interpolate_3_over_1_allpass(
        input: *const f32,
        len: ::std::os::raw::c_short,
        out: *mut f32,
        mem: *mut f32,
        filt_coeff: *const f32,
    );
}
extern "C" {
    pub fn InitSWBencBuffer(st: *mut Encoder_State);
}
extern "C" {
    pub fn swb_tbe_enc(
        st: *mut Encoder_State,
        coder_type: ::std::os::raw::c_short,
        new_speech: *mut f32,
        bwe_exc_extended: *const f32,
        voice_factors: *const f32,
        White_exc16k: *mut f32,
        voicing: *const f32,
        pitch_buf: *const f32,
    );
}
extern "C" {
    pub fn InitSWBdecBuffer(swb_dnc: *mut Decoder_State);
}
extern "C" {
    pub fn swb_tbe_dec(
        st: *mut Decoder_State,
        coder_type: ::std::os::raw::c_short,
        bwe_exc_extended: *const f32,
        voice_factors: *const f32,
        old_syn_12k8_16k: *const f32,
        White_exc16k: *mut f32,
        synth: *mut f32,
        pitch_buf: *mut f32,
    );
}
extern "C" {
    pub fn flip_and_downmix_generic(
        input: *mut f32,
        output: *mut f32,
        length: ::std::os::raw::c_short,
        mem1_ext: *mut f32,
        mem2_ext: *mut f32,
        mem3_ext: *mut f32,
        phase_state: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn non_linearity(
        input: *const f32,
        output: *mut f32,
        old_bwe_exc_extended: *mut f32,
        length: ::std::os::raw::c_short,
        prev_scale: *mut f32,
        coder_type: ::std::os::raw::c_short,
        voice_factors: *mut f32,
        L_frame: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn interp_code_5over2(
        inp_code: *const f32,
        interp_code: *mut f32,
        inp_length: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn interp_code_4over2(
        inp_code: *const f32,
        interp_code: *mut f32,
        inp_length: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn flip_spectrum_and_decimby4(
        input: *const f32,
        output: *mut f32,
        length: ::std::os::raw::c_short,
        mem1: *mut f32,
        mem2: *mut f32,
        ramp_flag: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn GenShapedWBExcitation(
        excSHB: *mut f32,
        lpc_shb: *const f32,
        exc4kWhtnd: *mut f32,
        mem_csfilt: *mut f32,
        mem_genSHBexc_filt_down1: *mut f32,
        mem_genSHBexc_filt_down2: *mut f32,
        mem_genSHBexc_filt_down3: *mut f32,
        state_lpc_syn: *mut f32,
        coder_type: ::std::os::raw::c_short,
        bwe_exc_extended: *const f32,
        bwe_seed: *mut ::std::os::raw::c_short,
        voice_factors: *const f32,
        uv_flag: ::std::os::raw::c_short,
        igf_flag: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn GenWBSynth(
        input_synspeech: *const f32,
        shb_syn_speech_16k: *mut f32,
        state_lsyn_filt_shb1: *mut f32,
        state_lsyn_filt_shb2: *mut f32,
    );
}
extern "C" {
    pub fn wb_tbe_enc(
        st: *mut Encoder_State,
        coder_type: ::std::os::raw::c_short,
        hb_speech: *const f32,
        bwe_exc_extended: *const f32,
        voice_factors: *const f32,
        pitch_buf: *const f32,
        voicing: *const f32,
    );
}
extern "C" {
    pub fn wb_tbe_dec(
        st: *mut Decoder_State,
        coder_type: ::std::os::raw::c_short,
        bwe_exc_extended: *const f32,
        voice_factors: *const f32,
        synth: *mut f32,
    );
}
extern "C" {
    pub fn tbe_write_bitstream(st: *mut Encoder_State);
}
extern "C" {
    pub fn tbe_read_bitstream(st: *mut Decoder_State);
}
extern "C" {
    pub fn GenTransition(
        input: *const f32,
        old_hb_synth: *const f32,
        length: ::std::os::raw::c_short,
        output: *mut f32,
        Hilbert_Mem: *mut f32,
        state_lsyn_filt_shb_local: *mut f32,
        mem_resamp_HB_32k: *mut f32,
        syn_dm_phase: *mut ::std::os::raw::c_short,
        output_Fs: ::std::os::raw::c_int,
        up_mem: *mut f32,
        rf_flag: ::std::os::raw::c_int,
        bitrate: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GenTransition_WB(
        input: *const f32,
        old_hb_synth: *const f32,
        length: ::std::os::raw::c_short,
        output: *mut f32,
        state_lsyn_filt_shb1: *mut f32,
        state_lsyn_filt_shb2: *mut f32,
        output_Fs: ::std::os::raw::c_int,
        up_mem: *mut f32,
    );
}
extern "C" {
    pub fn TBEreset_enc(st: *mut Encoder_State, bandwidth: ::std::os::raw::c_short);
}
extern "C" {
    pub fn TBEreset_dec(st: *mut Decoder_State, bandwidth: ::std::os::raw::c_short);
}
extern "C" {
    pub fn get_tbe_bits(
        bitrate: ::std::os::raw::c_short,
        bandwidth: ::std::os::raw::c_short,
        rf_mode: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn fb_tbe_enc(st: *mut Encoder_State, new_input: *const f32, fb_exc: *const f32);
}
extern "C" {
    pub fn fb_tbe_dec(st: *mut Decoder_State, fb_exc: *const f32, hb_synth: *mut f32);
}
extern "C" {
    pub fn calc_tilt_bwe(sp: *const f32, tilt: *mut f32, N: ::std::os::raw::c_short);
}
extern "C" {
    pub fn wtda_BWE(new_audio: *const f32, old_wtda: *mut f32, L: ::std::os::raw::c_short);
}
extern "C" {
    pub fn swb_pre_proc(
        st: *mut Encoder_State,
        input: *const f32,
        new_swb_speech: *mut f32,
        shb_speech: *mut f32,
        realBuffer: *mut [f32; 60usize],
        imagBuffer: *mut [f32; 60usize],
    );
}
extern "C" {
    pub fn wb_pre_proc(st: *mut Encoder_State, new_inp_resamp16k: *const f32, hb_speech: *mut f32);
}
extern "C" {
    pub fn wb_bwe_enc(
        st: *mut Encoder_State,
        new_wb_speech: *const f32,
        coder_type: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn wb_bwe_dec(
        synth: *mut f32,
        hb_synth: *mut f32,
        output_frame: ::std::os::raw::c_short,
        st: *mut Decoder_State,
        coder_type: ::std::os::raw::c_short,
        voice_factors: *mut f32,
        pitch_buf: *const f32,
    );
}
extern "C" {
    pub fn swb_bwe_enc(
        st: *mut Encoder_State,
        old_input_12k8: *const f32,
        old_input_16k: *const f32,
        old_syn_12k8_16k: *const f32,
        new_swb_speech: *const f32,
        shb_speech: *const f32,
        coder_type: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn swb_bwe_enc_hr(
        st: *mut Encoder_State,
        new_input: *const f32,
        input_frame: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        unbits: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn swb_bwe_dec(
        st: *mut Decoder_State,
        synth: *const f32,
        hb_synth: *mut f32,
        output_frame: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn swb_bwe_dec_hr(
        st: *mut Decoder_State,
        syn_12k8_16k: *const f32,
        hb_synth: *mut f32,
        output_frame: ::std::os::raw::c_short,
        unbits: ::std::os::raw::c_short,
        pitch_buf: *const f32,
    );
}
extern "C" {
    pub fn swb_hr_noise_fill(
        is_transient: ::std::os::raw::c_short,
        spect_start: ::std::os::raw::c_short,
        spect_end: ::std::os::raw::c_short,
        tilt_wb: f32,
        pitch: f32,
        nq: *const ::std::os::raw::c_short,
        Nsv: ::std::os::raw::c_short,
        bwe_highrate_seed: *mut ::std::os::raw::c_short,
        t_audio: *mut f32,
    );
}
extern "C" {
    pub fn td_postprocess(
        hb_synth: *mut f32,
        input_frame: ::std::os::raw::c_short,
        last_extl: ::std::os::raw::c_short,
    ) -> f32;
}
extern "C" {
    pub fn calc_normal_length(
        core: ::std::os::raw::c_short,
        sp: *const f32,
        mode: ::std::os::raw::c_short,
        extl: ::std::os::raw::c_short,
        L_swb_norm: *mut ::std::os::raw::c_short,
        prev_L_swb_norm: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn calc_norm_envelop(
        SWB_signal: *const f32,
        envelope: *mut f32,
        L_swb_norm: ::std::os::raw::c_short,
        SWB_flength: ::std::os::raw::c_short,
        st_offset: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn time_envelop_shaping(werr: *mut f32, SWB_tenv: *mut f32, L: ::std::os::raw::c_short);
}
extern "C" {
    pub fn time_reduce_pre_echo(
        synth: *const f32,
        error: *mut f32,
        prev_td_energy: f32,
        L: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn WB_BWE_gain_pred(
        WB_fenv: *mut f32,
        core_dec_freq: *const f32,
        coder_type: ::std::os::raw::c_short,
        prev_code_type: ::std::os::raw::c_short,
        prev_WB_fenv: f32,
        voice_factors: *mut f32,
        pitch_buf: *const f32,
        last_core_brate: ::std::os::raw::c_long,
        last_wb_bwe_ener: f32,
        last_extl: ::std::os::raw::c_short,
        tilt: f32,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn WB_BWE_decoding(
        core_dec_freq: *const f32,
        WB_fenv: *mut f32,
        WB_signal: *mut f32,
        WB_flength: ::std::os::raw::c_short,
        mode: ::std::os::raw::c_short,
        last_extl: ::std::os::raw::c_short,
        prev_Energy: *mut f32,
        prev_WB_fenv: *mut f32,
        prev_L_wb_norm: *mut ::std::os::raw::c_short,
        extl: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        total_brate: ::std::os::raw::c_long,
        Seed: *mut ::std::os::raw::c_short,
        prev_flag: *mut ::std::os::raw::c_short,
        prev_coder_type: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn SWB_BWE_decoding(
        core_dec_freq: *const f32,
        SWB_fenv: *mut f32,
        SWB_signal: *mut f32,
        SWB_flength: ::std::os::raw::c_short,
        mode: ::std::os::raw::c_short,
        frica_flag: *mut ::std::os::raw::c_short,
        prev_Energy: *mut f32,
        prev_SWB_fenv: *mut f32,
        prev_L_swb_norm: *mut ::std::os::raw::c_short,
        tilt_nb: f32,
        Seed: *mut ::std::os::raw::c_short,
        st_offset: ::std::os::raw::c_short,
        prev_weight: *mut f32,
        extl: ::std::os::raw::c_short,
        last_extl: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn CNG_reset_enc(
        st: *mut Encoder_State,
        mem: *mut LPD_state,
        pitch_buf: *mut f32,
        voice_factors: *mut f32,
        VBR_cng_reset_flag: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn a2isp(a: *const f32, isp: *mut f32, old_isp: *const f32);
}
extern "C" {
    pub fn a2isf(
        a: *mut f32,
        isf: *mut f32,
        old_isf: *const f32,
        lpcOrder: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn a2rc(a: *const f32, refl: *mut f32, lpcorder: ::std::os::raw::c_short);
}
extern "C" {
    pub fn lp_filt_exc_enc(
        codec_mode: ::std::os::raw::c_short,
        core_brate: ::std::os::raw::c_long,
        Opt_AMR_WB: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        exc: *mut f32,
        h1: *const f32,
        xn: *const f32,
        y1: *mut f32,
        xn2: *mut f32,
        L_subfr: ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
        g_corr: *mut f32,
        clip_gain: ::std::os::raw::c_short,
        gain_pit: *mut f32,
        lp_flag: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn updt_tar(
        x: *const f32,
        x2: *mut f32,
        y: *const f32,
        gain: f32,
        L: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn analy_sp(
        speech: *mut f32,
        Bin_E: *mut f32,
        Bin_E_old: *mut f32,
        fr_bands: *mut f32,
        lf_E: *mut f32,
        Etot: *mut f32,
        min_band: ::std::os::raw::c_short,
        max_band: ::std::os::raw::c_short,
        band_ener: *mut f32,
        PS: *mut f32,
        fft_buff: *mut f32,
    );
}
extern "C" {
    pub fn CNG_enc(
        st: *mut Encoder_State,
        L_frame: ::std::os::raw::c_short,
        Aq: *mut f32,
        speech: *const f32,
        enr: f32,
        lsp_new: *mut f32,
        lsf_new: *mut f32,
        allow_cn_step: *mut ::std::os::raw::c_short,
        burst_ho_cnt: ::std::os::raw::c_short,
        q_env: *mut f32,
        sid_bw: *mut ::std::os::raw::c_short,
        exc_mem2: *mut f32,
    );
}
extern "C" {
    pub fn swb_CNG_enc(st: *mut Encoder_State, shb_speech: *const f32, syn_12k8_16k: *const f32);
}
extern "C" {
    pub fn lsf_enc(
        st: *mut Encoder_State,
        L_frame: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        lsf_new: *mut f32,
        lsp_new: *mut f32,
        lsp_mid: *mut f32,
        Aq: *mut f32,
        stab_fac: *mut f32,
        Nb_ACELP_frames: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn isf_enc_amr_wb(
        st: *mut Encoder_State,
        isf_new: *mut f32,
        isp_new: *mut f32,
        Aq: *mut f32,
        stab_fac: *mut f32,
    );
}
extern "C" {
    pub fn find_targets(
        speech: *const f32,
        mem_syn: *const f32,
        i_subfr: ::std::os::raw::c_short,
        mem_w0: *mut f32,
        p_Aq: *const f32,
        res: *const f32,
        L_subfr: ::std::os::raw::c_short,
        Ap: *const f32,
        tilt_fac: f32,
        xn: *mut f32,
        cn: *mut f32,
        h1: *mut f32,
    );
}
extern "C" {
    pub fn inov_encode(
        st: *mut Encoder_State,
        core_brate: ::std::os::raw::c_long,
        Opt_AMR_WB: ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
        last_L_frame: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
        sharpFlag: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        tc_subfr: ::std::os::raw::c_short,
        p_Aq: *const f32,
        gain_pit: f32,
        cn: *mut f32,
        exc: *const f32,
        h1: *mut f32,
        tilt_code: f32,
        pt_pitch: f32,
        xn2: *const f32,
        code: *mut f32,
        y2: *mut f32,
        unbits: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn acelp_1t64(
        st: *mut Encoder_State,
        dn: *const f32,
        h: *const f32,
        code: *mut f32,
        y: *mut f32,
    );
}
extern "C" {
    pub fn acelp_2t32(
        st: *mut Encoder_State,
        dn: *const f32,
        h: *const f32,
        code: *mut f32,
        y: *mut f32,
    );
}
extern "C" {
    pub fn acelp_4t64(
        st: *mut Encoder_State,
        dn: *mut f32,
        cn: *const f32,
        H: *const f32,
        R: *mut f32,
        acelpautoc: ::std::os::raw::c_short,
        code: *mut f32,
        y: *mut f32,
        nbbits: ::std::os::raw::c_short,
        cmpl_flag: ::std::os::raw::c_short,
        Opt_AMR_WB: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn corr_xh(x: *const f32, y: *mut f32, h: *const f32, L_subfr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn find_tilt(
        fr_bands: *const f32,
        bckr: *const f32,
        ee: *mut f32,
        pitch: *const ::std::os::raw::c_short,
        voicing: *const f32,
        lf_E: *const f32,
        corr_shift: f32,
        bwidth: ::std::os::raw::c_short,
        max_band: ::std::os::raw::c_short,
        hp_E: *mut f32,
        codec_mode: ::std::os::raw::c_short,
        bckr_tilt_lt: *mut f32,
        Opt_vbr_mode: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn init_gp_clip(mem: *mut f32);
}
extern "C" {
    pub fn gp_clip(
        core_brate: ::std::os::raw::c_long,
        voicing: *const f32,
        i_subfr: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        xn: *const f32,
        mem: *mut f32,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn gp_clip_test_lsf(
        core_brate: ::std::os::raw::c_long,
        lsf: *const f32,
        mem: *mut f32,
        Opt_AMR_WB: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn gp_clip_test_gain_pit(core_brate: ::std::os::raw::c_long, gain_pit: f32, mem: *mut f32);
}
extern "C" {
    pub fn analy_lp(
        speech: *const f32,
        L_frame: ::std::os::raw::c_short,
        L_look: ::std::os::raw::c_short,
        ener: *mut f32,
        A: *mut f32,
        epsP: *mut f32,
        lsp_new: *mut f32,
        lsp_mid: *mut f32,
        lsp_old: *mut f32,
        Top: *const ::std::os::raw::c_short,
        Tnc: *const f32,
        sr_core: f32,
    );
}
extern "C" {
    pub fn analy_lp_AMR_WB(
        speech: *const f32,
        ener: *mut f32,
        A: *mut f32,
        epsP: *mut f32,
        isp_new: *mut f32,
        isp_old: *mut f32,
        isf_new: *mut f32,
        Top: ::std::os::raw::c_int,
        Tnc: f32,
    );
}
extern "C" {
    pub fn noise_est_init(
        totalNoise: *mut f32,
        first_noise_updt: *mut ::std::os::raw::c_short,
        bckr: *mut f32,
        enrO: *mut f32,
        ave_enr: *mut f32,
        pitO: *mut ::std::os::raw::c_short,
        aEn: *mut ::std::os::raw::c_short,
        st_harm_cor_cnt: *mut ::std::os::raw::c_short,
        bg_cnt: *mut ::std::os::raw::c_short,
        lt_tn_track: *mut f32,
        lt_tn_dist: *mut f32,
        lt_Ellp_dist: *mut f32,
        lt_haco_ev: *mut f32,
        low_tn_track_cnt: *mut ::std::os::raw::c_short,
        Etot_st_est: *mut f32,
        Etot_sq_st_est: *mut f32,
    );
}
extern "C" {
    pub fn long_enr(
        st: *mut Encoder_State,
        Etot: f32,
        localVAD_HE_SAD: ::std::os::raw::c_short,
        high_lpn_flag: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn noise_est_pre(
        Etot: f32,
        ini_frame: ::std::os::raw::c_short,
        Etot_l: *mut f32,
        Etot_h: *mut f32,
        Etot_l_lp: *mut f32,
        Etot_last: *mut f32,
        Etot_v_h2: *mut f32,
        sign_dyn_lp: *mut f32,
        harm_cor_cnt: ::std::os::raw::c_short,
        Etot_lp: *mut f32,
    );
}
extern "C" {
    pub fn noise_est_down(
        fr_bands: *const f32,
        bckr: *mut f32,
        tmpN: *mut f32,
        enr: *mut f32,
        min_band: ::std::os::raw::c_short,
        max_band: ::std::os::raw::c_short,
        totalNoise: *mut f32,
        Etot: f32,
        Etot_last: *mut f32,
        Etot_v_h2: *mut f32,
    );
}
extern "C" {
    pub fn noise_est(
        st: *mut Encoder_State,
        tmpN: *const f32,
        pitch: *const ::std::os::raw::c_short,
        voicing: *const f32,
        epsP: *const f32,
        Etot: f32,
        relE: f32,
        corr_shift: f32,
        enr: *const f32,
        fr_bands: *mut f32,
        cor_map_sum: *mut f32,
        sp_div: *mut f32,
        non_staX: *mut f32,
        loc_harm: *mut ::std::os::raw::c_short,
        lf_E: *const f32,
        st_harm_cor_cnt: *mut ::std::os::raw::c_short,
        Etot_l_lp: f32,
        sp_floor: *mut f32,
    );
}
extern "C" {
    pub fn vad_param_updt(
        st: *mut Encoder_State,
        pitch: *const ::std::os::raw::c_short,
        voicing: *const f32,
        old_pitch1: ::std::os::raw::c_short,
        corr_shift: f32,
        A: *const f32,
    );
}
extern "C" {
    pub fn multi_harm(
        Bin_E: *const f32,
        old_S: *mut f32,
        cor_map_LT: *mut f32,
        multi_harm_limit: *mut f32,
        total_brate: ::std::os::raw::c_long,
        bwidth: ::std::os::raw::c_short,
        cor_strong_limit: *mut ::std::os::raw::c_short,
        st_mean_avr_dyn: *mut f32,
        st_last_sw_dyn: *mut f32,
        cor_map_sum: *mut f32,
        sp_floor: *mut f32,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn lp_gain_updt(
        i_subfr: ::std::os::raw::c_short,
        gain_pit: f32,
        norm_gain_code: f32,
        lp_gainp: *mut f32,
        lp_gainc: *mut f32,
        L_frame: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn enc_pit_exc(
        st: *mut Encoder_State,
        mem: *mut LPD_state,
        speech: *const f32,
        Aw: *const f32,
        Aq: *const f32,
        Es_pred: f32,
        T_op: *const ::std::os::raw::c_short,
        voicing: *const f32,
        res: *const f32,
        synth: *mut f32,
        exc: *mut f32,
        T0: *mut ::std::os::raw::c_short,
        T0_frac: *mut ::std::os::raw::c_short,
        pitch_buf: *mut f32,
        nb_subfr: ::std::os::raw::c_short,
        gpit: *mut f32,
    );
}
extern "C" {
    pub fn encod_audio(
        st: *mut Encoder_State,
        mem: *mut LPD_state,
        speech: *const f32,
        Aw: *const f32,
        Aq: *const f32,
        T_op: *const ::std::os::raw::c_short,
        voicing: *const f32,
        res: *const f32,
        synth: *mut f32,
        exc: *mut f32,
        pitch_buf: *mut f32,
        voice_factors: *mut f32,
        bwe_exc: *mut f32,
        attack_flag: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        lsf_new: *mut f32,
        tmp_noise: *mut f32,
    );
}
extern "C" {
    pub fn Pit_exc_contribution_len(
        st: *mut Encoder_State,
        dct_res: *const f32,
        dct_pitex: *mut f32,
        pitch_buf: *mut f32,
        hangover: *mut ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn stab_est(
        etot: f32,
        lt_diff_etot: *mut f32,
        mem_etot: *mut f32,
        nb_thr_3: *mut ::std::os::raw::c_short,
        nb_thr_1: *mut ::std::os::raw::c_short,
        thresh: *mut f32,
        last_music_flag: *mut ::std::os::raw::c_short,
        vad_flag: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn gsc_gainQ(
        st: *mut Encoder_State,
        y_gain4: *const f32,
        y_gainQ: *mut f32,
        core_brate: ::std::os::raw::c_long,
        coder_type: ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
    ) -> f32;
}
extern "C" {
    pub fn Ener_per_band_comp(
        exc_diff: *const f32,
        y_gain4: *mut f32,
        Mband: ::std::os::raw::c_short,
        Eflag: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn Comp_and_apply_gain(
        exc_diffQ: *mut f32,
        Ener_per_bd_iQ: *mut f32,
        Ener_per_bd_yQ: *mut f32,
        Mbands_gn: ::std::os::raw::c_short,
        ReUseGain: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn bands_and_bit_alloc(
        cor_strong_limit: ::std::os::raw::c_short,
        noise_lev: ::std::os::raw::c_short,
        core_brate: ::std::os::raw::c_long,
        Diff_len: ::std::os::raw::c_short,
        bits_used: ::std::os::raw::c_short,
        bit: *mut ::std::os::raw::c_short,
        ener_vec: *mut f32,
        max_ener_band: *mut ::std::os::raw::c_short,
        bits_per_bands_s: *mut ::std::os::raw::c_short,
        nb_subbands: *mut ::std::os::raw::c_short,
        exc_diff: *const f32,
        concat_in: *mut f32,
        pvq_len: *mut ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
        GSC_noisy_speech: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn gsc_gaindec(
        st: *mut Decoder_State,
        y_gainQ: *mut f32,
        core_brate: ::std::os::raw::c_long,
        old_y_gain: *mut f32,
        coder_type: ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
    ) -> f32;
}
extern "C" {
    pub fn freq_dnw_scaling(
        cor_strong_limit: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        noise_lev: ::std::os::raw::c_short,
        core_brate: ::std::os::raw::c_long,
        fy_norm: *mut f32,
    );
}
extern "C" {
    pub fn decod_audio(
        st: *mut Decoder_State,
        dct_epit: *mut f32,
        Aq: *const f32,
        coder_type: ::std::os::raw::c_short,
        tmp_noise: *mut f32,
        pitch_buf: *mut f32,
        voice_factors: *mut f32,
        exc_dct_in: *mut f32,
        exc2: *mut f32,
        bwe_exc: *mut f32,
        lsf_new: *mut f32,
        gain_buf: *mut f32,
    );
}
extern "C" {
    pub fn gsc_dec(
        st: *mut Decoder_State,
        exc_dct_in: *mut f32,
        pit_band_idx: ::std::os::raw::c_short,
        Diff_len: ::std::os::raw::c_short,
        bits_used: ::std::os::raw::c_short,
        nb_subfr: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        last_bin: *mut ::std::os::raw::c_short,
        lsf_new: *mut f32,
        exc_wo_nf: *mut f32,
        tmp_noise: *mut f32,
    );
}
extern "C" {
    pub fn dec_pit_exc(
        st: *mut Decoder_State,
        L_frame: ::std::os::raw::c_short,
        Aq: *const f32,
        Es_pred: f32,
        pitch_buf: *mut f32,
        code: *mut f32,
        exc: *mut f32,
        nb_subfr: ::std::os::raw::c_short,
        gain_buf: *mut f32,
    );
}
extern "C" {
    pub fn highband_exc_dct_in(
        core_brate: ::std::os::raw::c_long,
        mfreq_bindiv_loc: *const ::std::os::raw::c_short,
        last_bin: ::std::os::raw::c_short,
        Diff_len: ::std::os::raw::c_short,
        noise_lev: ::std::os::raw::c_short,
        pit_band_idx: ::std::os::raw::c_short,
        exc_diffQ: *mut f32,
        seed_tcx: *mut ::std::os::raw::c_short,
        Ener_per_bd_iQ: *mut f32,
        nb_subfr: ::std::os::raw::c_short,
        exc_dct_in: *mut f32,
        last_coder_type: ::std::os::raw::c_short,
        bitallocation_band: *mut ::std::os::raw::c_short,
        lsf_new: *mut f32,
        last_exc_dct_in: *mut f32,
        last_ener: *mut f32,
        last_bitallocation_band: *mut ::std::os::raw::c_short,
        bitallocation_exc: *mut ::std::os::raw::c_short,
        bfi: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
        exc_wo_nf: *mut f32,
        GSC_noisy_speech: ::std::os::raw::c_short,
        lt_ener_per_band_fx: *mut f32,
    );
}
extern "C" {
    pub fn inact_switch_ematch(
        exc2: *mut f32,
        dct_exc_tmp: *mut f32,
        lt_ener_per_band: *mut f32,
        coder_type: ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
        core_brate: ::std::os::raw::c_long,
        bfi: ::std::os::raw::c_short,
        last_core: ::std::os::raw::c_short,
        last_codec_mode: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn LD_music_post_filter(
        dtc_in: *const f32,
        dtc_out: *mut f32,
        core_brate: ::std::os::raw::c_long,
        last_music_flag: *mut ::std::os::raw::c_short,
        thresh: *mut f32,
        nb_thr_1: *mut ::std::os::raw::c_short,
        nb_thr_3: *mut ::std::os::raw::c_short,
        lt_diff_etot: *mut f32,
        mem_etot: *mut f32,
        min_ns_gain: f32,
        bckr: *mut f32,
        lf_EO: *mut f32,
        lp_gbin: *mut f32,
        filt_lfE: *mut f32,
        last_nonfull_music: *mut ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        Last_coder_type: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn Post_music_postP(
        dct_buffer_in: *mut f32,
        exc_buffer_out: *mut f32,
        exc2: *mut f32,
        mem_tmp: *const f32,
        st_mem_syn2: *mut f32,
        Aq: *const f32,
        syn: *mut f32,
    );
}
extern "C" {
    pub fn Prep_music_postP(
        exc_buffer_in: *mut f32,
        dct_buffer_out: *mut f32,
        filt_lfE: *mut f32,
        last_core: ::std::os::raw::c_short,
        pitch_buf: *const f32,
        LDm_enh_lp_gbin: *mut f32,
    );
}
extern "C" {
    pub fn speech_music_classif(
        st: *mut Encoder_State,
        sp_aud_decision0: *mut ::std::os::raw::c_short,
        sp_aud_decision1: *mut ::std::os::raw::c_short,
        sp_aud_decision2: *mut ::std::os::raw::c_short,
        new_inp: *const f32,
        inp: *const f32,
        vad_flag: ::std::os::raw::c_short,
        localVAD: ::std::os::raw::c_short,
        localVAD_HE_SAD: ::std::os::raw::c_short,
        pitch: *const ::std::os::raw::c_short,
        voicing: *const f32,
        lsp_new: *const f32,
        cor_map_sum: f32,
        epsP: *const f32,
        PS: *const f32,
        Etot: f32,
        old_cor: f32,
        coder_type: *mut ::std::os::raw::c_short,
        attack_flag: *mut ::std::os::raw::c_short,
        non_staX: f32,
        relE: f32,
        high_lpn_flag: *mut ::std::os::raw::c_short,
        flag_spitch: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn find_wsp(
        L_frame: ::std::os::raw::c_short,
        L_subfr: ::std::os::raw::c_short,
        nb_subfr: ::std::os::raw::c_short,
        A: *const f32,
        Aw: *mut f32,
        speech: *const f32,
        tilt_fact: f32,
        wsp: *mut f32,
        mem_wsp: *mut f32,
        gamma: f32,
        L_look: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn pitch_ol_init(
        old_thres: *mut f32,
        old_pitch: *mut ::std::os::raw::c_short,
        delta_pit: *mut ::std::os::raw::c_short,
        old_corr: *mut f32,
    );
}
extern "C" {
    pub fn pitch_ol(
        pitch: *mut ::std::os::raw::c_short,
        voicing: *mut f32,
        old_pitch: *mut ::std::os::raw::c_short,
        old_corr: *mut f32,
        corr_shift: f32,
        old_thres: *mut f32,
        delta_pit: *mut ::std::os::raw::c_short,
        st_old_wsp2: *mut f32,
        wsp: *const f32,
        mem_decim2: *mut f32,
        relE: f32,
        L_look: ::std::os::raw::c_short,
        last_class: ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
        Opt_SC_VBR: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn pitch_ol2(
        pit_min: ::std::os::raw::c_short,
        pitch_ol: ::std::os::raw::c_short,
        pitch_fr: *mut f32,
        voicing_fr: *mut f32,
        pos: ::std::os::raw::c_short,
        wsp: *const f32,
        delta: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn StableHighPitchDetect(
        flag_spitch: *mut ::std::os::raw::c_short,
        pitch: *mut ::std::os::raw::c_short,
        voicing: *const f32,
        Bin_E: *const f32,
        wsp: *const f32,
        localVAD: ::std::os::raw::c_short,
        voicing_sm: *mut f32,
        voicing0_sm: *mut f32,
        LF_EnergyRatio_sm: *mut f32,
        predecision_flag: *mut ::std::os::raw::c_short,
        diff_sm: *mut f32,
        energy_sm: *mut f32,
    );
}
extern "C" {
    pub fn pitchDoubling_det(
        wspeech: *mut f32,
        pitch_ol: *mut ::std::os::raw::c_short,
        pitch_fr: *mut f32,
        voicing_fr: *mut f32,
    );
}
extern "C" {
    pub fn gain_enc_amr_wb(
        st: *mut Encoder_State,
        xn: *const f32,
        y1: *const f32,
        y2: *const f32,
        code: *const f32,
        core_brate: ::std::os::raw::c_long,
        gain_pit: *mut f32,
        gain_code: *mut f32,
        gain_inov: *mut f32,
        norm_gain_code: *mut f32,
        coeff: *mut f32,
        clip_gain: ::std::os::raw::c_short,
        past_qua_en: *mut f32,
    );
}
extern "C" {
    pub fn gain_enc_lbr(
        st: *mut Encoder_State,
        core_brate: ::std::os::raw::c_long,
        coder_type: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        xn: *const f32,
        y1: *const f32,
        y2: *const f32,
        code: *const f32,
        gain_pit: *mut f32,
        gain_code: *mut f32,
        gain_inov: *mut f32,
        norm_gain_code: *mut f32,
        g_corr: *mut f32,
        gains_mem: *mut f32,
        clip_gain: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn gain_enc_mless(
        st: *mut Encoder_State,
        core_brate: ::std::os::raw::c_long,
        L_frame: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        tc_subfr: ::std::os::raw::c_short,
        xn: *const f32,
        y1: *const f32,
        y2: *const f32,
        code: *const f32,
        Es_pred: f32,
        gain_pit: *mut f32,
        gain_code: *mut f32,
        gain_inov: *mut f32,
        norm_gain_code: *mut f32,
        coeff: *mut f32,
        clip_gain: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn gain_enc_SQ(
        st: *mut Encoder_State,
        core_brate: ::std::os::raw::c_long,
        coder_type: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        tc_subfr: ::std::os::raw::c_short,
        xn: *const f32,
        yy1: *const f32,
        y2: *const f32,
        code: *const f32,
        Es_pred: f32,
        gain_pit: *mut f32,
        gain_code: *mut f32,
        gain_inov: *mut f32,
        norm_gain_code: *mut f32,
        g_corr: *mut f32,
        clip_gain: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn gain_enc_gaus(
        gain: *mut f32,
        bits: ::std::os::raw::c_short,
        lowBound: f32,
        topBound: f32,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn E_corr_xy2(
        xn: *const f32,
        y1: *const f32,
        y2: *const f32,
        g_corr: *mut f32,
        L_subfr: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn pit_encode(
        st: *mut Encoder_State,
        core_brate: ::std::os::raw::c_long,
        Opt_AMR_WB: ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        limit_flag: *mut ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        exc: *mut f32,
        L_subfr: ::std::os::raw::c_short,
        T_op: *const ::std::os::raw::c_short,
        T0_min: *mut ::std::os::raw::c_short,
        T0_max: *mut ::std::os::raw::c_short,
        T0: *mut ::std::os::raw::c_short,
        T0_frac: *mut ::std::os::raw::c_short,
        h1: *const f32,
        xn: *const f32,
    ) -> f32;
}
extern "C" {
    pub fn find_uv(
        st: *mut Encoder_State,
        pitch_fr: *const f32,
        voicing_fr: *const f32,
        voicing: *const f32,
        speech: *const f32,
        localVAD: ::std::os::raw::c_short,
        ee: *const f32,
        corr_shift: f32,
        relE: f32,
        Etot: f32,
        hp_E: *const f32,
        flag_spitch: *mut ::std::os::raw::c_short,
        voicing_sm: f32,
        last_core_orig: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn signal_clas(
        st: *mut Encoder_State,
        coder_type: *mut ::std::os::raw::c_short,
        voicing: *const f32,
        speech: *const f32,
        localVAD: ::std::os::raw::c_short,
        pit: *const ::std::os::raw::c_short,
        ee: *const f32,
        relE: f32,
        L_look: ::std::os::raw::c_short,
        uc_clas: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn wb_vad_init(
        nb_active_frames: *mut ::std::os::raw::c_short,
        hangover_cnt: *mut ::std::os::raw::c_short,
        lp_speech: *mut f32,
        nb_active_frames_he: *mut ::std::os::raw::c_short,
        hangover_cnt_he: *mut ::std::os::raw::c_short,
        bcg_flux: *mut f32,
        soft_hangover: *mut ::std::os::raw::c_short,
        voiced_burst: *mut ::std::os::raw::c_short,
        bcg_flux_init: *mut ::std::os::raw::c_short,
        nb_active_frames_he1: *mut ::std::os::raw::c_short,
        hangover_cnt_he1: *mut ::std::os::raw::c_short,
        vad_flag_reg_H: *mut ::std::os::raw::c_long,
        vad_flag_reg_L: *mut ::std::os::raw::c_long,
        vad_prim_reg: *mut ::std::os::raw::c_long,
        vad_flag_cnt_50: *mut ::std::os::raw::c_short,
        vad_prim_cnt_16: *mut ::std::os::raw::c_short,
        hangover_cnt_dtx: *mut ::std::os::raw::c_short,
        flag_noisy_speech_snr: *mut ::std::os::raw::c_short,
        hangover_cnt_music: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn dtx_hangover_addition(
        st: *mut Encoder_State,
        localVAD: ::std::os::raw::c_short,
        vad_flag: ::std::os::raw::c_short,
        snr: f32,
        cldfb_subtraction: ::std::os::raw::c_short,
        vad_hover_flag: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn wb_vad(
        st: *mut Encoder_State,
        fr_bands: *const f32,
        localVAD: *mut ::std::os::raw::c_short,
        noisy_speech_HO: *mut ::std::os::raw::c_short,
        clean_speech_HO: *mut ::std::os::raw::c_short,
        NB_speech_HO: *mut ::std::os::raw::c_short,
        snr_sum_he: *mut f32,
        localVAD_HE_SAD: *mut ::std::os::raw::c_short,
        flag_noisy_speech_snr: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn bw_detect(
        st: *mut Encoder_State,
        signal_in: *const f32,
        localVAD: ::std::os::raw::c_short,
        enerBuffer: *mut f32,
    );
}
extern "C" {
    pub fn gaus_encode(
        st: *mut Encoder_State,
        i_subfr: ::std::os::raw::c_short,
        h1: *const f32,
        xn: *const f32,
        exc: *mut f32,
        mem_w0: *mut f32,
        gp_clip_mem: *mut f32,
        tilt_code: *mut f32,
        code: *mut f32,
        gain_code: *mut f32,
        y2: *mut f32,
        gain_inov: *mut f32,
        voice_fac: *mut f32,
        gain_pit: *mut f32,
        norm_gain_code: *mut f32,
        core_brate: ::std::os::raw::c_long,
    ) -> f32;
}
extern "C" {
    pub fn dtx(st: *mut Encoder_State, vad: ::std::os::raw::c_short, speech: *const f32);
}
extern "C" {
    pub fn dtx_hangover_control(st: *mut Encoder_State, lsp_new: *const f32);
}
extern "C" {
    pub fn updt_enc(
        st: *mut Encoder_State,
        L_frame: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        old_exc: *const f32,
        pitch_buf: *const f32,
        Es_pred: f32,
        Aq: *const f32,
        lsf_new: *const f32,
        lsp_new: *const f32,
        old_bwe_exc: *const f32,
    );
}
extern "C" {
    pub fn updt_IO_switch_enc(st: *mut Encoder_State, input_frame: ::std::os::raw::c_short);
}
extern "C" {
    pub fn transition_enc(
        st: *mut Encoder_State,
        core_brate: ::std::os::raw::c_long,
        L_frame: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        tc_subfr: *mut ::std::os::raw::c_short,
        Jopt_flag: *mut ::std::os::raw::c_short,
        position: *mut ::std::os::raw::c_short,
        voicing: *const f32,
        T_op: *const ::std::os::raw::c_short,
        T0: *mut ::std::os::raw::c_short,
        T0_frac: *mut ::std::os::raw::c_short,
        T0_min: *mut ::std::os::raw::c_short,
        T0_max: *mut ::std::os::raw::c_short,
        exc: *mut f32,
        y1: *mut f32,
        res: *const f32,
        h1: *const f32,
        xn: *const f32,
        xn2: *mut f32,
        gp_cl: *mut f32,
        gain_pit: *mut f32,
        g_corr: *mut f32,
        clip_gain: *mut ::std::os::raw::c_short,
        pt_pitch: *mut *mut f32,
        bwe_exc: *mut f32,
    );
}
extern "C" {
    pub fn set_impulse(
        xn: *const f32,
        h_orig: *const f32,
        exc: *mut f32,
        y1: *mut f32,
        imp_shape: *mut ::std::os::raw::c_short,
        imp_pos: *mut ::std::os::raw::c_short,
        gain_trans: *mut f32,
    );
}
extern "C" {
    pub fn gain_enc_tc(
        st: *mut Encoder_State,
        core_brate: ::std::os::raw::c_long,
        L_frame: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        tc_subfr: ::std::os::raw::c_short,
        xn: *const f32,
        y2: *const f32,
        code: *const f32,
        Es_pred: f32,
        gain_pit: *mut f32,
        gain_code: *mut f32,
        gain_inov: *mut f32,
        norm_gain_code: *mut f32,
    );
}
extern "C" {
    pub fn corr_xy1(
        xn: *const f32,
        y1: *const f32,
        g_corr: *mut f32,
        L_subfr: ::std::os::raw::c_short,
        norm_flag: ::std::os::raw::c_short,
    ) -> f32;
}
extern "C" {
    pub fn norm_corr(
        exc: *const f32,
        xn: *const f32,
        h: *const f32,
        t_min: ::std::os::raw::c_short,
        t_max: ::std::os::raw::c_short,
        corr_norm: *mut f32,
        L_subfr: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn pitch_fr4(
        exc: *const f32,
        xn: *const f32,
        h: *const f32,
        t0_min: ::std::os::raw::c_short,
        t0_max: ::std::os::raw::c_short,
        pit_frac: *mut ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        limit_flag: ::std::os::raw::c_short,
        t0_fr2: ::std::os::raw::c_short,
        t0_fr1: ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
        L_subfr: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pit_Q_enc(
        st: *mut Encoder_State,
        Opt_AMR_WB: ::std::os::raw::c_short,
        nBits: ::std::os::raw::c_short,
        delta: ::std::os::raw::c_short,
        pit_flag: ::std::os::raw::c_short,
        limit_flag: ::std::os::raw::c_short,
        T0: ::std::os::raw::c_short,
        T0_frac: ::std::os::raw::c_short,
        T0_min: *mut ::std::os::raw::c_short,
        T0_max: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn pit16k_Q_enc(
        st: *mut Encoder_State,
        nBits: ::std::os::raw::c_short,
        limit_flag: ::std::os::raw::c_short,
        T0: ::std::os::raw::c_short,
        T0_frac: ::std::os::raw::c_short,
        T0_min: *mut ::std::os::raw::c_short,
        T0_max: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn abs_pit_enc(
        fr_steps: ::std::os::raw::c_short,
        limit_flag: ::std::os::raw::c_short,
        T0: ::std::os::raw::c_short,
        T0_frac: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn delta_pit_enc(
        fr_steps: ::std::os::raw::c_short,
        T0: ::std::os::raw::c_short,
        T0_frac: ::std::os::raw::c_short,
        T0_min: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn AVQ_cod(
        xri: *const f32,
        xriq: *mut ::std::os::raw::c_int,
        nb_bits: ::std::os::raw::c_short,
        Nsv: ::std::os::raw::c_short,
    ) -> f32;
}
extern "C" {
    pub fn AVQ_encmux(
        st: *mut Encoder_State,
        extl: ::std::os::raw::c_short,
        xriq: *mut ::std::os::raw::c_int,
        nb_bits: *mut ::std::os::raw::c_short,
        Nsv: ::std::os::raw::c_short,
        nq: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn re8_cod(
        x: *mut ::std::os::raw::c_int,
        n: *mut ::std::os::raw::c_int,
        I: *mut ::std::os::raw::c_long,
        k: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pre_exc(
        Opt_AMR_WB: ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
        speech: *const f32,
        p_Aq: *const f32,
        p_A: *const f32,
        coder_type: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        Ap: *mut f32,
        res: *const f32,
        h1: *mut f32,
        xn: *mut f32,
        cn: *mut f32,
        mem_syn: *mut f32,
        mem_w0: *mut f32,
        L_subfr: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn encod_unvoiced(
        st: *mut Encoder_State,
        mem: *mut LPD_state,
        speech: *const f32,
        Aw: *const f32,
        Aq: *const f32,
        vad_flag: ::std::os::raw::c_short,
        res: *const f32,
        syn: *mut f32,
        tmp_noise: *mut f32,
        exc: *mut f32,
        pitch_buf: *mut f32,
        voice_factors: *mut f32,
        bwe_exc: *mut f32,
    );
}
extern "C" {
    pub fn encod_gen_voic(
        st: *mut Encoder_State,
        mem: *mut LPD_state,
        L_frame: ::std::os::raw::c_short,
        sharpFlag: ::std::os::raw::c_short,
        speech: *const f32,
        Aw: *const f32,
        Aq: *const f32,
        coder_type: ::std::os::raw::c_short,
        Es_pred: f32,
        T_op: *const ::std::os::raw::c_short,
        voicing: *const f32,
        res: *const f32,
        syn: *mut f32,
        exc: *mut f32,
        exc2: *mut f32,
        pitch_buf: *mut f32,
        voice_factors: *mut f32,
        bwe_exc: *mut f32,
        unbits: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn encod_tran(
        st: *mut Encoder_State,
        mem: *mut LPD_state,
        L_frame: ::std::os::raw::c_short,
        speech: *const f32,
        Aw: *const f32,
        Aq: *const f32,
        coder_type: ::std::os::raw::c_short,
        Es_pred: f32,
        T_op: *const ::std::os::raw::c_short,
        voicing: *const f32,
        res: *const f32,
        syn: *mut f32,
        exc: *mut f32,
        exc2: *mut f32,
        pitch_buf: *mut f32,
        voice_factors: *mut f32,
        bwe_exc: *mut f32,
        attack_flag: ::std::os::raw::c_short,
        unbits: *mut ::std::os::raw::c_short,
        sharpFlag: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn encod_amr_wb(
        st: *mut Encoder_State,
        mem: *mut LPD_state,
        speech: *const f32,
        Aw: *const f32,
        Aq: *const f32,
        pitch: *const ::std::os::raw::c_short,
        voicing: *const f32,
        res: *const f32,
        syn: *mut f32,
        exc: *mut f32,
        exc2: *mut f32,
        pitch_buf: *mut f32,
        hf_gain: *mut ::std::os::raw::c_short,
        speech16k: *const f32,
    );
}
extern "C" {
    pub fn stat_noise_uv_enc(
        st: *mut Encoder_State,
        coder_type: ::std::os::raw::c_short,
        epsP: *const f32,
        lsp_new: *mut f32,
        lsp_mid: *mut f32,
        Aq: *mut f32,
        exc2: *mut f32,
    );
}
extern "C" {
    pub fn re8_compute_base_index(
        x: *const ::std::os::raw::c_int,
        ka: ::std::os::raw::c_int,
        I: *mut ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn transf_cdbk_enc(
        st: *mut Encoder_State,
        core_brate: ::std::os::raw::c_long,
        extl: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        harm_flag_acelp: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        tc_subfr: ::std::os::raw::c_short,
        cn: *mut f32,
        exc: *mut f32,
        p_Aq: *const f32,
        Ap: *const f32,
        h1: *const f32,
        xn: *mut f32,
        xn2: *mut f32,
        y1: *mut f32,
        y2: *const f32,
        Es_pred: f32,
        gain_pit: *mut f32,
        gain_code: f32,
        g_corr: *mut f32,
        clip_gain: ::std::os::raw::c_short,
        mem_deemp: *mut f32,
        mem_preemp: *mut f32,
        gain_preQ: *mut f32,
        code_preQ: *mut f32,
        unbits: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn gain_quant(
        gain: *mut f32,
        min: f32,
        max: f32,
        bits: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn deemph_lpc(
        p_Aq_cuerr: *mut f32,
        p_Aq_old: *mut f32,
        LPC_de_curr: *mut f32,
        LPC_de_old: *mut f32,
        deemph_old: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn Interpol_delay(
        out: *mut f32,
        last: *mut f32,
        current: *mut f32,
        SubNum: ::std::os::raw::c_short,
        frac: *const f32,
    );
}
extern "C" {
    pub fn dequantize_uvg(
        iG1: ::std::os::raw::c_int,
        iG2: *mut ::std::os::raw::c_int,
        G: *mut f32,
        bwidth: ::std::os::raw::c_short,
    ) -> f32;
}
extern "C" {
    pub fn generate_nelp_excitation(
        seed: *mut ::std::os::raw::c_short,
        Gains: *mut f32,
        output: *mut f32,
        gain_fac: f32,
    );
}
extern "C" {
    pub fn nelp_encoder(
        st: *mut Encoder_State,
        in_: *mut f32,
        exc: *mut f32,
        reduce_gains: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn encod_nelp(
        st: *mut Encoder_State,
        mem: *mut LPD_state,
        speech: *const f32,
        Aw: *const f32,
        Aq: *const f32,
        res: *mut f32,
        synth: *mut f32,
        tmp_noise: *mut f32,
        exc: *mut f32,
        exc2: *mut f32,
        pitch_buf: *mut f32,
        voice_factors: *mut f32,
        bwe_exc: *mut f32,
    );
}
extern "C" {
    pub fn realft(data: *mut f32, n: ::std::os::raw::c_short, isign: ::std::os::raw::c_short);
}
extern "C" {
    pub fn DTFS_new() -> *mut DTFS_STRUCTURE;
}
extern "C" {
    pub fn DTFS_copy(Xout: *mut DTFS_STRUCTURE, Xinp: DTFS_STRUCTURE);
}
extern "C" {
    pub fn DTFS_sub(X1: DTFS_STRUCTURE, X2: DTFS_STRUCTURE) -> DTFS_STRUCTURE;
}
extern "C" {
    pub fn DTFS_to_fs(
        x: *const f32,
        N: ::std::os::raw::c_int,
        X: *mut DTFS_STRUCTURE,
        Fs: ::std::os::raw::c_short,
        FR_flag: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn DTFS_fs_inv(X: *mut DTFS_STRUCTURE, x: *mut f32, N: ::std::os::raw::c_int, ph0: f32);
}
extern "C" {
    pub fn DTFS_fast_fs_inv(X1_DTFS: *mut DTFS_STRUCTURE, out: *mut f32, N: ::std::os::raw::c_int);
}
extern "C" {
    pub fn DTFS_car2pol(X: *mut DTFS_STRUCTURE);
}
extern "C" {
    pub fn DTFS_pol2car(X: *mut DTFS_STRUCTURE);
}
extern "C" {
    pub fn DTFS_setEngyHarm(
        f1: f32,
        f2: f32,
        g1: f32,
        g2: f32,
        en2: f32,
        X: *mut DTFS_STRUCTURE,
    ) -> f32;
}
extern "C" {
    pub fn DTFS_to_erb(X: DTFS_STRUCTURE, out: *mut f32);
}
extern "C" {
    pub fn DTFS_zeroPadd(N: ::std::os::raw::c_int, X: *mut DTFS_STRUCTURE);
}
extern "C" {
    pub fn DTFS_getEngy(X: DTFS_STRUCTURE) -> f32;
}
extern "C" {
    pub fn DTFS_getEngy_band(X: DTFS_STRUCTURE, lband: f32, hband: f32) -> f32;
}
extern "C" {
    pub fn DTFS_getEngy_band_wb(X: DTFS_STRUCTURE, lband: f32, hband: f32) -> f32;
}
extern "C" {
    pub fn DTFS_freq_corr(X1: DTFS_STRUCTURE, X2: DTFS_STRUCTURE, lband: f32, hband: f32) -> f64;
}
extern "C" {
    pub fn DTFS_setEngy(X_DTFS: *mut DTFS_STRUCTURE, en2: f32) -> f32;
}
extern "C" {
    pub fn DTFS_adjustLag(X_DTFS: *mut DTFS_STRUCTURE, N: ::std::os::raw::c_int);
}
extern "C" {
    pub fn DTFS_poleFilter(X: *mut DTFS_STRUCTURE, LPC: *const f32, N: ::std::os::raw::c_int);
}
extern "C" {
    pub fn DTFS_zeroFilter(X: *mut DTFS_STRUCTURE, LPC: *const f32, N: ::std::os::raw::c_int);
}
extern "C" {
    pub fn DTFS_alignment_full(
        X1_DTFS: DTFS_STRUCTURE,
        X2_DTFS: DTFS_STRUCTURE,
        num_steps: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn DTFS_alignment_extract(
        refX1_DTFS: DTFS_STRUCTURE,
        X2_DTFS: DTFS_STRUCTURE,
        Eshift: f32,
        LPC2: *const f32,
    ) -> f32;
}
extern "C" {
    pub fn DTFS_alignment_weight(
        refX1_DTFS: DTFS_STRUCTURE,
        X2_DTFS: DTFS_STRUCTURE,
        Eshift: f32,
        LPC1: *const f32,
        LPC2: *const f32,
    ) -> f32;
}
extern "C" {
    pub fn DTFS_alignment_fine_new(
        X1_DTFS: DTFS_STRUCTURE,
        X2_DTFS: DTFS_STRUCTURE,
        Eshift: f32,
    ) -> f32;
}
extern "C" {
    pub fn DTFS_phaseShift(X: *mut DTFS_STRUCTURE, ph: f32);
}
extern "C" {
    pub fn DTFS_erb_inv(
        in_: *mut f32,
        slot: *mut ::std::os::raw::c_int,
        mfreq: *mut f32,
        X: *mut DTFS_STRUCTURE,
        num_erb: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn DTFS_quant_cw(
        X: *mut DTFS_STRUCTURE,
        pl: ::std::os::raw::c_int,
        curr_lpc: *const f32,
        POWER_IDX: *mut ::std::os::raw::c_int,
        AMP_IDX: *mut ::std::os::raw::c_int,
        lastLgainE: *mut f32,
        lastHgainE: *mut f32,
        lasterbE: *mut f32,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn DTFS_dequant_cw(
        pl: ::std::os::raw::c_int,
        POWER_IDX: ::std::os::raw::c_int,
        AMP_IDX: *const ::std::os::raw::c_int,
        lastLgainD: *mut f32,
        lastHgainD: *mut f32,
        lasterbD: *mut f32,
        X: *mut DTFS_STRUCTURE,
        num_erb: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn DTFS_transform(
        X: DTFS_STRUCTURE,
        X2: DTFS_STRUCTURE,
        phase: *const f32,
        out: *mut f32,
        N: ::std::os::raw::c_int,
        FR_flag: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn DTFS_getSpEngyFromResAmp(
        X: DTFS_STRUCTURE,
        lband: f32,
        hband: f32,
        curr_lsp: *const f32,
    ) -> f32;
}
extern "C" {
    pub fn DTFS_peaktoaverage(X: DTFS_STRUCTURE, pos: *mut f32, neg: *mut f32);
}
extern "C" {
    pub fn ppp_extract_pitch_period(
        in_: *const f32,
        out: *mut f32,
        l: ::std::os::raw::c_int,
        out_of_bound: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ppp_quarter_encoder(
        st: *mut Encoder_State,
        CURRCW_Q: *mut DTFS_STRUCTURE,
        TARGETCW: *mut DTFS_STRUCTURE,
        prevCW_lag: ::std::os::raw::c_int,
        vCURRCW_NQ: DTFS_STRUCTURE,
        curr_lpc: *const f32,
        lastLgainE: *mut f32,
        lastHgainE: *mut f32,
        lasterbE: *mut f32,
        PREV_CW_E: DTFS_STRUCTURE,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn WIsyn(
        PREVCW: DTFS_STRUCTURE,
        CURR_CW_DTFS: *mut DTFS_STRUCTURE,
        curr_lpc: *const f32,
        ph_offset: *mut f32,
        out: *mut f32,
        N: ::std::os::raw::c_int,
        FR_flag: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn set_ppp_mode(
        st: *mut Encoder_State,
        coder_type: *mut ::std::os::raw::c_short,
        noisy_speech_HO: ::std::os::raw::c_short,
        clean_speech_HO: ::std::os::raw::c_short,
        NB_speech_HO: ::std::os::raw::c_short,
        localVAD: ::std::os::raw::c_short,
        localVAD_he: ::std::os::raw::c_short,
        vad_flag: *mut ::std::os::raw::c_short,
        T_op: *mut ::std::os::raw::c_short,
        sp_aud_decision1: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn lsf_syn_mem_backup(
        st: *mut Encoder_State,
        LPDmem: *mut LPD_state,
        btilt_code: *mut f32,
        bgc_threshold: *mut f32,
        clip_var_bck: *mut f32,
        next_force_sf_bck: *mut ::std::os::raw::c_short,
        lsp_new: *mut f32,
        lsp_mid: *mut f32,
        clip_var: *mut f32,
        mem_AR: *mut f32,
        mem_MA: *mut f32,
        lsp_new_bck: *mut f32,
        lsp_mid_bck: *mut f32,
        mCb1: *mut ::std::os::raw::c_short,
        Bin_E: *mut f32,
        Bin_E_old: *mut f32,
        mem_syn_bck: *mut f32,
        mem_w0_bck: *mut f32,
        streaklimit: *mut f32,
        pstreaklen: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn lsf_syn_mem_restore(
        st: *mut Encoder_State,
        LPDmem: *mut LPD_state,
        btilt_code: f32,
        gc_threshold: f32,
        clip_var_bck: *mut f32,
        next_force_sf_bck: ::std::os::raw::c_short,
        lsp_new: *mut f32,
        lsp_mid: *mut f32,
        clip_var: f32,
        mem_AR: *mut f32,
        mem_MA: *mut f32,
        lsp_new_bck: *mut f32,
        lsp_mid_bck: *mut f32,
        mCb1: ::std::os::raw::c_short,
        Bin_E: *mut f32,
        Bin_E_old: *mut f32,
        mem_syn_bck: *mut f32,
        mem_w0_bck: f32,
        streaklimit: f32,
        pstreaklen: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn ppp_voiced_encoder(
        st: *mut Encoder_State,
        in_: *mut f32,
        out: *mut f32,
        delay: ::std::os::raw::c_short,
        lpc1: *mut f32,
        lpc2: *mut f32,
        exc: *mut f32,
        pitch: *mut f32,
        vadsnr: f32,
    );
}
extern "C" {
    pub fn encod_ppp(
        st: *mut Encoder_State,
        mem: *mut LPD_state,
        speech: *const f32,
        Aw: *const f32,
        Aq: *const f32,
        coder_type: *mut ::std::os::raw::c_short,
        sharpFlag: ::std::os::raw::c_short,
        T_op: *const ::std::os::raw::c_short,
        voicing: *const f32,
        res: *mut f32,
        synth: *mut f32,
        exc: *mut f32,
        exc2: *mut f32,
        pitch_buf: *mut f32,
        voice_factors: *mut f32,
        bwe_exc: *mut f32,
    );
}
extern "C" {
    pub fn reset_rf_indices(st: *mut Encoder_State);
}
extern "C" {
    pub fn signalling_enc_rf(st: *mut Encoder_State);
}
extern "C" {
    pub fn acelp_core_dec(
        st: *mut Decoder_State,
        synth_out: *mut f32,
        bwe_exc_extended: *mut f32,
        voice_factors: *mut f32,
        old_syn_12k8_16k: *mut f32,
        coder_type: ::std::os::raw::c_short,
        sharpFlag: ::std::os::raw::c_short,
        pitch_buf: *mut f32,
        unbits: *mut ::std::os::raw::c_short,
        sid_bw: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn bass_psfilter_init(old_syn: *mut f32, mem_deemph_err: *mut f32, lp_ener: *mut f32);
}
extern "C" {
    pub fn bass_psfilter(
        Opt_AMR_WB: ::std::os::raw::c_short,
        synth_in: *const f32,
        L_frame: ::std::os::raw::c_short,
        pitch_buf: *const f32,
        old_syn: *mut f32,
        mem_deemph_err: *mut f32,
        lp_ener: *mut f32,
        bpf_off: ::std::os::raw::c_short,
        v_stab: f32,
        v_stab_smooth: *mut f32,
        mem_mean_pit: *mut f32,
        Track_on_hist: *mut ::std::os::raw::c_short,
        vibrato_hist: *mut ::std::os::raw::c_short,
        psf_att: *mut f32,
        coder_type: ::std::os::raw::c_short,
        bpf_noise_buf: *mut f32,
    );
}
extern "C" {
    pub fn CNG_reset_dec(st: *mut Decoder_State, pitch_buf: *mut f32, voice_factors: *mut f32);
}
extern "C" {
    pub fn updt_dec(
        st: *mut Decoder_State,
        L_frame: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        old_exc: *const f32,
        pitch_buf: *const f32,
        Es_pred: f32,
        Aq: *const f32,
        lsf_new: *const f32,
        lsp_new: *const f32,
        voice_factors: *const f32,
        old_bwe_exc: *const f32,
        gain_buf: *const f32,
    );
}
extern "C" {
    pub fn updt_IO_switch_dec(output_frame: ::std::os::raw::c_short, st: *mut Decoder_State);
}
extern "C" {
    pub fn updt_dec_common(
        st: *mut Decoder_State,
        hq_core_type: ::std::os::raw::c_short,
        synth: *const f32,
    );
}
extern "C" {
    pub fn CNG_dec(
        st: *mut Decoder_State,
        L_frame: ::std::os::raw::c_short,
        Aq: *mut f32,
        core_brate: ::std::os::raw::c_long,
        lsp_new: *mut f32,
        lsf_new: *mut f32,
        allow_cn_step: *mut ::std::os::raw::c_short,
        sid_bw: *mut ::std::os::raw::c_short,
        q_env: *mut f32,
    );
}
extern "C" {
    pub fn swb_CNG_dec(
        st: *mut Decoder_State,
        synth: *const f32,
        shb_synth: *mut f32,
        sid_bw: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn lsf_dec(
        st: *mut Decoder_State,
        tc_subfr: ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
        Aq: *mut f32,
        LSF_Q_prediction: *mut ::std::os::raw::c_short,
        lsf_new: *mut f32,
        lsp_new: *mut f32,
        lsp_mid: *mut f32,
    );
}
extern "C" {
    pub fn isf_dec_amr_wb(
        st: *mut Decoder_State,
        Aq: *mut f32,
        isf_new: *mut f32,
        isp_new: *mut f32,
    );
}
extern "C" {
    pub fn Es_pred_dec(
        Es_pred: *mut f32,
        enr_idx: ::std::os::raw::c_int,
        nb_bits: ::std::os::raw::c_short,
        no_ltp: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn gaus_dec(
        st: *mut Decoder_State,
        core_brate: ::std::os::raw::c_long,
        i_subfr: ::std::os::raw::c_short,
        code: *mut f32,
        norm_gain_code: *mut f32,
        lp_gainp: *mut f32,
        lp_gainc: *mut f32,
        gain_inov: *mut f32,
        tilt_code: *mut f32,
        voice_fac: *mut f32,
        gain_pit: *mut f32,
        pt_pitch: *mut f32,
        exc: *mut f32,
        gain_code: *mut f32,
        exc2: *mut f32,
    );
}
extern "C" {
    pub fn gain_dec_amr_wb(
        st: *mut Decoder_State,
        core_brate: ::std::os::raw::c_long,
        gain_pit: *mut f32,
        gain_code: *mut f32,
        past_qua_en: *mut f32,
        gain_inov: *mut f32,
        code: *const f32,
        norm_gain_code: *mut f32,
    );
}
extern "C" {
    pub fn gain_dec_lbr(
        st: *mut Decoder_State,
        core_brate: ::std::os::raw::c_long,
        coder_type: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        code: *const f32,
        gain_pit: *mut f32,
        gain_code: *mut f32,
        gain_inov: *mut f32,
        norm_gain_code: *mut f32,
        gains_mem: *mut f32,
    );
}
extern "C" {
    pub fn gain_dec_mless(
        st: *mut Decoder_State,
        core_brate: ::std::os::raw::c_long,
        L_frame: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        tc_subfr: ::std::os::raw::c_short,
        code: *const f32,
        Es_pred: f32,
        gain_pit: *mut f32,
        gain_code: *mut f32,
        gain_inov: *mut f32,
        norm_gain_code: *mut f32,
    );
}
extern "C" {
    pub fn gain_dec_SQ(
        st: *mut Decoder_State,
        core_brate: ::std::os::raw::c_long,
        coder_type: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        tc_subfr: ::std::os::raw::c_short,
        code: *const f32,
        Es_pred: f32,
        gain_pit: *mut f32,
        gain_code: *mut f32,
        gain_inov: *mut f32,
        norm_gain_code: *mut f32,
    );
}
extern "C" {
    pub fn gain_dec_gaus(
        index: ::std::os::raw::c_short,
        bits: ::std::os::raw::c_short,
        lowBound: f32,
        topBound: f32,
        gain_inov: f32,
        norm_gain_code: *mut f32,
    ) -> f32;
}
extern "C" {
    pub fn pit_decode(
        st: *mut Decoder_State,
        core_brate: ::std::os::raw::c_long,
        Opt_AMR_WB: ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        limit_flag: *mut ::std::os::raw::c_short,
        T0: *mut ::std::os::raw::c_short,
        T0_frac: *mut ::std::os::raw::c_short,
        T0_min: *mut ::std::os::raw::c_short,
        T0_max: *mut ::std::os::raw::c_short,
        L_subfr: ::std::os::raw::c_short,
    ) -> f32;
}
extern "C" {
    pub fn abs_pit_dec(
        fr_steps: ::std::os::raw::c_short,
        pitch_index: ::std::os::raw::c_short,
        limit_flag: ::std::os::raw::c_short,
        T0: *mut ::std::os::raw::c_short,
        T0_frac: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn delta_pit_dec(
        fr_steps: ::std::os::raw::c_short,
        pitch_index: ::std::os::raw::c_short,
        T0: *mut ::std::os::raw::c_short,
        T0_frac: *mut ::std::os::raw::c_short,
        T0_min: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn pit_Q_dec(
        Opt_AMR_WB: ::std::os::raw::c_short,
        pitch_index: ::std::os::raw::c_short,
        nBits: ::std::os::raw::c_short,
        delta: ::std::os::raw::c_short,
        pit_flag: ::std::os::raw::c_short,
        limit_flag: ::std::os::raw::c_short,
        T0: *mut ::std::os::raw::c_short,
        T0_frac: *mut ::std::os::raw::c_short,
        T0_min: *mut ::std::os::raw::c_short,
        T0_max: *mut ::std::os::raw::c_short,
        BER_detect: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn pit16k_Q_dec(
        pitch_index: ::std::os::raw::c_short,
        nBits: ::std::os::raw::c_short,
        limit_flag: ::std::os::raw::c_short,
        T0: *mut ::std::os::raw::c_short,
        T0_frac: *mut ::std::os::raw::c_short,
        T0_min: *mut ::std::os::raw::c_short,
        T0_max: *mut ::std::os::raw::c_short,
        BER_detect: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn lp_filt_exc_dec(
        st: *mut Decoder_State,
        codec_mode: ::std::os::raw::c_short,
        core_brate: ::std::os::raw::c_long,
        Opt_AMR_WB: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        L_subfr: ::std::os::raw::c_short,
        L_Frame: ::std::os::raw::c_short,
        lp_flag: ::std::os::raw::c_short,
        exc: *mut f32,
    );
}
extern "C" {
    pub fn inov_decode(
        st: *mut Decoder_State,
        core_brate: ::std::os::raw::c_long,
        Opt_AMR_WB: ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        sharpFlag: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        tc_subfr: ::std::os::raw::c_short,
        p_Aq: *const f32,
        tilt_code: f32,
        pt_pitch: f32,
        code: *mut f32,
    );
}
extern "C" {
    pub fn dec_acelp_1t64(st: *mut Decoder_State, code: *mut f32);
}
extern "C" {
    pub fn dec_acelp_2t32(st: *mut Decoder_State, code: *mut f32);
}
extern "C" {
    pub fn dec_acelp_4t64(
        st: *mut Decoder_State,
        nbbits: ::std::os::raw::c_short,
        code: *mut f32,
        Opt_AMR_WB: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn syn_output(
        synth: *mut f32,
        output_frame: ::std::os::raw::c_short,
        synth_out: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn FEC_exc_estim(
        st: *mut Decoder_State,
        L_frame: ::std::os::raw::c_short,
        old_exc: *mut f32,
        exc2: *mut f32,
        exc_dct_in: *mut f32,
        pitch_buf: *mut f32,
        tmp_tc: *mut f32,
        voice_factors: *mut f32,
        bwe_exc: *mut f32,
        lsf_new: *mut f32,
        tmp_noise: *mut f32,
    );
}
extern "C" {
    pub fn FEC_lsf2lsp_interp(
        st: *mut Decoder_State,
        L_frame: ::std::os::raw::c_short,
        Aq: *mut f32,
        lsf: *mut f32,
        lsp: *mut f32,
    );
}
extern "C" {
    pub fn FEC_lsf_estim_enc(
        st: *mut Encoder_State,
        L_frame: ::std::os::raw::c_short,
        lsf: *mut f32,
    );
}
extern "C" {
    pub fn frame_energy(
        L_frame: ::std::os::raw::c_short,
        pitch: *const f32,
        speech: *const f32,
        lp_speech: f32,
        frame_ener: *mut f32,
    ) -> f32;
}
extern "C" {
    pub fn FEC_SinOnset(
        exc: *mut f32,
        puls_pos: ::std::os::raw::c_short,
        T0: ::std::os::raw::c_short,
        enr_q: f32,
        Aq: *mut f32,
        L_frame: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn FEC_enhACB(
        L_frame: ::std::os::raw::c_short,
        last_L_frame: ::std::os::raw::c_short,
        exc_io: *mut f32,
        new_pit: ::std::os::raw::c_short,
        puls_pos: ::std::os::raw::c_short,
        bfi_pitch: f32,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn FEC_scale_syn(
        L_frame: ::std::os::raw::c_short,
        clas: ::std::os::raw::c_short,
        last_good: ::std::os::raw::c_short,
        synth: *mut f32,
        pitch: *const f32,
        enr_old: f32,
        enr_q: f32,
        coder_type: ::std::os::raw::c_short,
        LSF_Q_prediction: ::std::os::raw::c_short,
        scaling_flag: *mut ::std::os::raw::c_short,
        lp_ener_FEC_av: *mut f32,
        lp_ener_FEC_max: *mut f32,
        bfi: ::std::os::raw::c_short,
        total_brate: ::std::os::raw::c_long,
        prev_bfi: ::std::os::raw::c_short,
        last_core_brate: ::std::os::raw::c_long,
        exc: *mut f32,
        exc2: *mut f32,
        Aq: *const f32,
        old_enr_LP: *mut f32,
        mem_tmp: *const f32,
        mem_syn: *mut f32,
        avoid_lpc_burst_on_recovery: ::std::os::raw::c_int,
        force_scaling: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn FEC_pitch_estim(
        Opt_AMR_WB: ::std::os::raw::c_short,
        last_core: ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
        clas: ::std::os::raw::c_short,
        last_good: ::std::os::raw::c_short,
        pitch_buf: *const f32,
        old_pitch_buf: *const f32,
        bfi_pitch: *mut f32,
        bfi_pitch_frame: *mut ::std::os::raw::c_short,
        upd_cnt: *mut ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn FEC_encode(
        st: *mut Encoder_State,
        synth: *const f32,
        coder_type: ::std::os::raw::c_short,
        clas: ::std::os::raw::c_short,
        fpit: *const f32,
        res: *const f32,
        last_pulse_pos: *mut ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
        total_brate: ::std::os::raw::c_long,
        core_brate: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn FEC_pos_dec(
        st: *mut Decoder_State,
        coder_type: ::std::os::raw::c_short,
        last_good: ::std::os::raw::c_short,
        last_pulse_pos: *mut ::std::os::raw::c_short,
        clas: *mut ::std::os::raw::c_short,
        enr_q: *mut f32,
        core_brate: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn improv_amr_wb_gs(
        clas: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        core_brate: ::std::os::raw::c_long,
        seed_tcx: *mut ::std::os::raw::c_short,
        old_Aq: *mut f32,
        mem_syn2: *mut f32,
        lt_voice_fac: f32,
        locattack: ::std::os::raw::c_short,
        Aq: *mut f32,
        exc2: *mut f32,
        mem_tmp: *mut f32,
        syn: *mut f32,
        pitch_buf: *const f32,
        Last_ener: f32,
        rate_switching_reset: ::std::os::raw::c_short,
        last_coder_type: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn tc_classif(
        st: *mut Decoder_State,
        L_frame: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn transition_dec(
        st: *mut Decoder_State,
        core_brate: ::std::os::raw::c_long,
        Opt_AMR_WB: ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        tc_subfr: ::std::os::raw::c_short,
        Jopt_flag: *mut ::std::os::raw::c_short,
        exc: *mut f32,
        T0: *mut ::std::os::raw::c_short,
        T0_frac: *mut ::std::os::raw::c_short,
        T0_min: *mut ::std::os::raw::c_short,
        T0_max: *mut ::std::os::raw::c_short,
        pt_pitch: *mut *mut f32,
        position: *mut ::std::os::raw::c_short,
        bwe_exc: *mut f32,
    );
}
extern "C" {
    pub fn gain_dec_tc(
        st: *mut Decoder_State,
        core_brate: ::std::os::raw::c_long,
        L_frame: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        tc_subfr: ::std::os::raw::c_short,
        Es_pred: f32,
        code: *const f32,
        gain_pit: *mut f32,
        gain_code: *mut f32,
        gain_inov: *mut f32,
        norm_gain_code: *mut f32,
    );
}
extern "C" {
    pub fn stat_noise_uv_dec(
        st: *mut Decoder_State,
        coder_type: ::std::os::raw::c_short,
        lsp_new: *mut f32,
        lsp_mid: *mut f32,
        Aq: *mut f32,
        exc2: *mut f32,
    );
}
extern "C" {
    pub fn decod_nelp(
        st: *mut Decoder_State,
        coder_type: ::std::os::raw::c_short,
        tmp_noise: *mut f32,
        pitch_buf: *mut f32,
        exc: *mut f32,
        exc2: *mut f32,
        voice_factors: *mut f32,
        bwe_exc: *mut f32,
        bfi: ::std::os::raw::c_short,
        gain_buf: *mut f32,
    );
}
extern "C" {
    pub fn nelp_decoder(
        st: *mut Decoder_State,
        exc_nelp: *mut f32,
        exc: *mut f32,
        bfi: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        gain_buf: *mut f32,
    );
}
extern "C" {
    pub fn decod_ppp(
        st: *mut Decoder_State,
        Aq: *const f32,
        pitch_buf: *mut f32,
        exc: *mut f32,
        exc2: *mut f32,
        voice_factors: *mut f32,
        bwe_exc: *mut f32,
        gain_buf: *mut f32,
        bfi: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn ppp_quarter_decoder(
        st: *mut Decoder_State,
        CURRCW_Q_DTFS: *mut DTFS_STRUCTURE,
        prevCW_lag: ::std::os::raw::c_int,
        lastLgainD: *mut f32,
        lastHgainD: *mut f32,
        lasterbD: *mut f32,
        bfi: ::std::os::raw::c_short,
        PREV_CW_D: DTFS_STRUCTURE,
    );
}
extern "C" {
    pub fn ppp_voiced_decoder(
        st: *mut Decoder_State,
        out: *mut f32,
        lpc2: *const f32,
        exc: *mut f32,
        pitch: *mut f32,
        bfi: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn AVQ_demuxdec(
        st: *mut Decoder_State,
        xriq: *mut ::std::os::raw::c_int,
        nb_bits: *mut ::std::os::raw::c_short,
        Nsv: ::std::os::raw::c_short,
        nq_out: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn re8_dec(
        nq: ::std::os::raw::c_int,
        I: ::std::os::raw::c_long,
        kv: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn re8_decode_base_index(
        n: ::std::os::raw::c_int,
        I: ::std::os::raw::c_long,
        x: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Init_post_filter(pfstat: *mut PFSTAT);
}
extern "C" {
    pub fn nb_post_filt(
        L_frame: ::std::os::raw::c_short,
        L_subfr: ::std::os::raw::c_short,
        pfstat: *mut PFSTAT,
        lp_noise: *mut f32,
        tmp_noise: f32,
        synth: *mut f32,
        Aq: *const f32,
        pitch_buf: *const f32,
        coder_type: ::std::os::raw::c_short,
        BER_detect: ::std::os::raw::c_short,
        disable_hpf: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn decod_unvoiced(
        st: *mut Decoder_State,
        Aq: *const f32,
        coder_type: ::std::os::raw::c_short,
        tmp_noise: *mut f32,
        pitch_buf: *mut f32,
        voice_factors: *mut f32,
        exc: *mut f32,
        exc2: *mut f32,
        bwe_exc: *mut f32,
        gain_buf: *mut f32,
    );
}
extern "C" {
    pub fn decod_tran(
        st: *mut Decoder_State,
        L_frame: ::std::os::raw::c_short,
        tc_subfr: ::std::os::raw::c_short,
        Aq: *const f32,
        coder_type: ::std::os::raw::c_short,
        Es_pred: f32,
        pitch_buf: *mut f32,
        voice_factors: *mut f32,
        exc: *mut f32,
        exc2: *mut f32,
        bwe_exc: *mut f32,
        unbits: *mut ::std::os::raw::c_short,
        sharpFlag: ::std::os::raw::c_short,
        gain_buf: *mut f32,
    );
}
extern "C" {
    pub fn decod_gen_voic(
        st: *mut Decoder_State,
        L_frame: ::std::os::raw::c_short,
        sharpFlag: ::std::os::raw::c_short,
        Aq: *const f32,
        coder_type: ::std::os::raw::c_short,
        Es_pred: f32,
        do_WI: ::std::os::raw::c_short,
        pitch_buf: *mut f32,
        voice_factors: *mut f32,
        exc: *mut f32,
        exc2: *mut f32,
        bwe_exc: *mut f32,
        unbits: *mut ::std::os::raw::c_short,
        gain_buf: *mut f32,
    );
}
extern "C" {
    pub fn decod_amr_wb(
        st: *mut Decoder_State,
        Aq: *const f32,
        pitch_buf: *mut f32,
        exc: *mut f32,
        exc2: *mut f32,
        hf_gain: *mut ::std::os::raw::c_short,
        voice_factors: *mut f32,
        gain_buf: *mut f32,
    );
}
extern "C" {
    pub fn io_ini_dec(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        f_stream: *mut *mut FILE,
        f_synth: *mut *mut FILE,
        quietMode: *mut ::std::os::raw::c_short,
        noDelayCmp: *mut ::std::os::raw::c_short,
        st: *mut Decoder_State,
        jbmTraceFileName: *mut *mut ::std::os::raw::c_char,
        jbmFECoffsetFileName: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn init_decoder(st: *mut Decoder_State);
}
extern "C" {
    pub fn destroy_decoder(st: *mut Decoder_State);
}
extern "C" {
    pub fn evs_dec(st: *mut Decoder_State, output: *mut f32, frameMode: frameMode);
}
extern "C" {
    pub fn decodeVoip(
        st: *mut Decoder_State,
        f_stream: *mut FILE,
        f_synth: *mut FILE,
        jbmTraceFileName: *const ::std::os::raw::c_char,
        jbmFECoffsetFileName: *const ::std::os::raw::c_char,
        quietMode: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_next_frame_parameters(st: *mut Decoder_State);
}
extern "C" {
    pub fn amr_wb_dec(st: *mut Decoder_State, output_sp: *mut f32);
}
extern "C" {
    pub fn transf_cdbk_dec(
        st: *mut Decoder_State,
        core_brate: ::std::os::raw::c_long,
        coder_type: ::std::os::raw::c_short,
        harm_flag_acelp: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        tc_subfr: ::std::os::raw::c_short,
        Es_pred: f32,
        gain_code: f32,
        mem_preemp_preQ: *mut f32,
        gain_preQ: *mut f32,
        norm_gain_preQ: *mut f32,
        code_preQ: *mut f32,
        unbits: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn gain_dequant(
        index: ::std::os::raw::c_short,
        min: f32,
        max: f32,
        bits: ::std::os::raw::c_short,
    ) -> f32;
}
extern "C" {
    pub fn hq_core_enc(
        st: *mut Encoder_State,
        audio: *const f32,
        input_frame: ::std::os::raw::c_short,
        hq_core_type: ::std::os::raw::c_short,
        Voicing_flag: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn detect_transient(
        in_: *const f32,
        st: *mut Encoder_State,
        L: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn wtda(
        new_audio: *const f32,
        wtda_audio: *mut f32,
        old_wtda: *mut f32,
        left_mode: ::std::os::raw::c_short,
        right_mode: ::std::os::raw::c_short,
        L: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn tcx_get_windows_mode1(
        left_mode: ::std::os::raw::c_short,
        right_mode: ::std::os::raw::c_short,
        left_win: *mut f32,
        right_win: *mut f32,
        left_win_int: *mut f32,
        right_win_int: *mut f32,
        L: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn direct_transform(
        in32: *const f32,
        out32: *mut f32,
        is_transient: ::std::os::raw::c_short,
        L: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn noise_adjust(
        coeffs_norm: *const f32,
        bitalloc: *const ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        core_sfm: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn interleave_spectrum(coefs: *mut f32, length: ::std::os::raw::c_short);
}
extern "C" {
    pub fn hq_hr_enc(
        st: *mut Encoder_State,
        coefs: *mut f32,
        length: ::std::os::raw::c_short,
        num_bits: *mut ::std::os::raw::c_short,
        is_transient: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn logqnorm(
        x: *const f32,
        k: *mut ::std::os::raw::c_short,
        L: ::std::os::raw::c_short,
        N: ::std::os::raw::c_short,
        thren: *const f32,
    );
}
extern "C" {
    pub fn huff_dec(
        st: *mut Decoder_State,
        N: ::std::os::raw::c_short,
        buffer_len: ::std::os::raw::c_short,
        num_lengths: ::std::os::raw::c_short,
        thres: *const ::std::os::raw::c_short,
        offset: *const ::std::os::raw::c_short,
        huff_tab: *const ::std::os::raw::c_short,
        index: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn calc_norm(
        x: *const f32,
        norm: *mut ::std::os::raw::c_short,
        normlg: *mut ::std::os::raw::c_short,
        start_band: ::std::os::raw::c_short,
        num_bands: ::std::os::raw::c_short,
        band_len: *const ::std::os::raw::c_short,
        band_start: *const ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn reordernorm(
        ynrm: *const ::std::os::raw::c_short,
        normqlg2: *const ::std::os::raw::c_short,
        idxbuf: *mut ::std::os::raw::c_short,
        normbuf: *mut ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn diffcod(
        N: ::std::os::raw::c_short,
        y: *mut ::std::os::raw::c_short,
        difidx: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn diffcod_lrmdct(
        N: ::std::os::raw::c_short,
        be_ref: ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        difidx: *mut ::std::os::raw::c_int,
        is_transient: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn normalizecoefs(
        coefs: *mut f32,
        ynrm: *const ::std::os::raw::c_short,
        num_bands: ::std::os::raw::c_short,
        band_start: *const ::std::os::raw::c_short,
        band_end: *const ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn bitallocsum(
        R: *mut ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
        sum: *mut ::std::os::raw::c_short,
        Rsubband: *mut ::std::os::raw::c_short,
        v: ::std::os::raw::c_short,
        length: ::std::os::raw::c_short,
        sfmsize: *const ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hq_generic_hf_encoding(
        coefs: *const f32,
        hq_generic_fenv: *mut f32,
        hq_generic_offset: ::std::os::raw::c_short,
        st: *mut Encoder_State,
        hq_generic_clas: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn swb_bwe_gain_deq(
        st: *mut Decoder_State,
        core: ::std::os::raw::c_short,
        SWB_tenv: *mut f32,
        SWB_fenv: *mut f32,
        hr_flag: ::std::os::raw::c_short,
        hqswb_clas: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn save_old_syn(
        L_frame: ::std::os::raw::c_short,
        syn: *const f32,
        old_syn: *mut f32,
        old_syn_12k8_16k: *mut f32,
        preemph_fac: f32,
        mem_deemph: *mut f32,
    );
}
extern "C" {
    pub fn hq_generic_hf_decoding(
        HQ_mode: ::std::os::raw::c_short,
        coeff_out1: *mut f32,
        hq_generic_fenv: *const f32,
        coeff_out: *mut f32,
        hq_generic_offset: ::std::os::raw::c_short,
        prev_L_swb_norm: *mut ::std::os::raw::c_short,
        hq_swb_bwe_exc_clas: ::std::os::raw::c_short,
        R: *const ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hq_core_dec(
        st: *mut Decoder_State,
        out: *mut f32,
        output_frame: ::std::os::raw::c_short,
        hq_core_type: ::std::os::raw::c_short,
        core_switching_flag: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hq_hr_dec(
        st: *mut Decoder_State,
        coefsq: *mut f32,
        length: ::std::os::raw::c_short,
        num_bits: ::std::os::raw::c_short,
        ynrm: *mut ::std::os::raw::c_short,
        is_transient: *mut ::std::os::raw::c_short,
        hqswb_clas: *mut ::std::os::raw::c_short,
        SWB_fenv: *mut f32,
    );
}
extern "C" {
    pub fn hdecnrm_context(
        st: *mut Decoder_State,
        N: ::std::os::raw::c_short,
        index: *mut ::std::os::raw::c_short,
        n_length: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hdecnrm_tran(
        st: *mut Decoder_State,
        N: ::std::os::raw::c_short,
        index: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hdecnrm_resize(
        st: *mut Decoder_State,
        N: ::std::os::raw::c_short,
        index: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hdecnrm(
        st: *mut Decoder_State,
        N: ::std::os::raw::c_short,
        index: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn find_last_band(
        bitalloc: *const ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn fill_spectrum(
        coeff: *mut f32,
        R: *mut ::std::os::raw::c_short,
        is_transient: ::std::os::raw::c_short,
        norm: *mut ::std::os::raw::c_short,
        hq_generic_fenv: *const f32,
        hq_generic_offset: ::std::os::raw::c_short,
        nf_idx: ::std::os::raw::c_short,
        length: ::std::os::raw::c_short,
        env_stab: f32,
        no_att_hangover: *mut ::std::os::raw::c_short,
        energy_lt: *mut f32,
        bwe_seed: *mut ::std::os::raw::c_short,
        hq_generic_exc_clas: ::std::os::raw::c_short,
        core_sfm: ::std::os::raw::c_short,
        HQ_mode: ::std::os::raw::c_short,
        noise_level: *mut f32,
        core_brate: ::std::os::raw::c_long,
        prev_noise_level: *mut f32,
        prev_R: *mut ::std::os::raw::c_short,
        prev_coeff_out: *mut f32,
        peak_idx: *const ::std::os::raw::c_short,
        Npeaks: ::std::os::raw::c_short,
        npulses: *const ::std::os::raw::c_short,
        prev_is_transient: ::std::os::raw::c_short,
        prev_normq: *mut f32,
        prev_env: *mut f32,
        prev_bfi: ::std::os::raw::c_short,
        sfmsize: *const ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        prev_L_swb_norm: *mut ::std::os::raw::c_short,
        prev_hq_mode: ::std::os::raw::c_short,
        num_sfm: ::std::os::raw::c_short,
        num_env_bands: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn env_stab_transient_detect(
        is_transient: ::std::os::raw::c_short,
        length: ::std::os::raw::c_short,
        norm: *const ::std::os::raw::c_short,
        no_att_hangover: *mut ::std::os::raw::c_short,
        energy_lt: *mut f32,
        HQ_mode: ::std::os::raw::c_short,
        bin_th: ::std::os::raw::c_short,
        coeff: *const f32,
    );
}
extern "C" {
    pub fn de_interleave_spectrum(coefs: *mut f32, length: ::std::os::raw::c_short);
}
extern "C" {
    pub fn inverse_transform(
        InMDCT: *const f32,
        Out: *mut f32,
        IsTransient: ::std::os::raw::c_short,
        L: ::std::os::raw::c_short,
        L_inner: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn window_ola(
        ImdctOut: *const f32,
        auOut: *mut f32,
        OldauOut: *mut f32,
        L: ::std::os::raw::c_short,
        left_mode: ::std::os::raw::c_short,
        right_mode: ::std::os::raw::c_short,
        use_bfi_win: ::std::os::raw::c_short,
        oldHqVoicing: ::std::os::raw::c_short,
        oldgapsynth: *mut f32,
    );
}
extern "C" {
    pub fn map_quant_weight(
        normqlg2: *const ::std::os::raw::c_short,
        wnorm: *mut ::std::os::raw::c_short,
        is_transient: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn recovernorm(
        idxbuf: *mut ::std::os::raw::c_short,
        ynrm: *mut ::std::os::raw::c_short,
        normqlg2: *mut ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn reordvct(
        y: *mut ::std::os::raw::c_short,
        N: ::std::os::raw::c_short,
        idx: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn bitalloc(
        y: *mut ::std::os::raw::c_short,
        idx: *mut ::std::os::raw::c_short,
        sum: ::std::os::raw::c_short,
        N: ::std::os::raw::c_short,
        K: ::std::os::raw::c_short,
        r: *mut ::std::os::raw::c_short,
        sfmsize: *const ::std::os::raw::c_short,
        hqswb_clas: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn BitAllocF(
        y: *mut ::std::os::raw::c_short,
        bit_rate: ::std::os::raw::c_long,
        B: ::std::os::raw::c_short,
        N: ::std::os::raw::c_short,
        R: *mut ::std::os::raw::c_short,
        Rsubband: *mut ::std::os::raw::c_short,
        hqswb_clas: ::std::os::raw::c_short,
        num_env_bands: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn BitAllocWB(
        y: *mut ::std::os::raw::c_short,
        B: ::std::os::raw::c_short,
        N: ::std::os::raw::c_short,
        R: *mut ::std::os::raw::c_short,
        Rsubband: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn hvq_pvq_bitalloc(
        num_bits: ::std::os::raw::c_short,
        brate: ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
        ynrm: *const ::std::os::raw::c_short,
        manE_peak: ::std::os::raw::c_int,
        expE_peak: ::std::os::raw::c_short,
        Rk: *mut ::std::os::raw::c_short,
        R: *mut ::std::os::raw::c_short,
        sel_bands: *mut ::std::os::raw::c_short,
        n_sel_bands: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn floating_point_add(
        mx: *mut ::std::os::raw::c_int,
        ex: *mut ::std::os::raw::c_short,
        my: ::std::os::raw::c_int,
        ey: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn rc_get_bits2(
        N: ::std::os::raw::c_short,
        range: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn rc_enc_init(st: *mut Encoder_State, tot_bits: ::std::os::raw::c_short);
}
extern "C" {
    pub fn rc_encode(
        st: *mut Encoder_State,
        cum_freq: ::std::os::raw::c_uint,
        sym_freq: ::std::os::raw::c_uint,
        tot: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rc_enc_finish(st: *mut Encoder_State);
}
extern "C" {
    pub fn rc_enc_bits(
        st: *mut Encoder_State,
        value: ::std::os::raw::c_uint,
        bits: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn rc_enc_uniform(
        st: *mut Encoder_State,
        value: ::std::os::raw::c_uint,
        tot: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rc_dec_init(st: *mut Decoder_State, tot_bits: ::std::os::raw::c_short);
}
extern "C" {
    pub fn rc_decode(st: *mut Decoder_State, tot: ::std::os::raw::c_uint)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rc_dec_update(
        st: *mut Decoder_State,
        cum_freq: ::std::os::raw::c_uint,
        sym_freq: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rc_dec_bits(
        st: *mut Decoder_State,
        bits: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rc_dec_uniform(
        st: *mut Decoder_State,
        tot: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rc_dec_finish(st: *mut Decoder_State);
}
extern "C" {
    pub fn pvq_core_enc(
        st: *mut Encoder_State,
        coefs_norm: *mut f32,
        coefs_quant: *mut f32,
        bit_budget: ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
        sfmsize: *const ::std::os::raw::c_short,
        R: *mut ::std::os::raw::c_short,
        Rs: *mut ::std::os::raw::c_short,
        npulses: *mut ::std::os::raw::c_short,
        maxpulse: *mut ::std::os::raw::c_short,
        core: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pvq_core_dec(
        st: *mut Decoder_State,
        band_start: *const ::std::os::raw::c_short,
        band_end: *const ::std::os::raw::c_short,
        band_width: *const ::std::os::raw::c_short,
        coefs_quant: *mut f32,
        bits_tot: ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
        R: *mut ::std::os::raw::c_short,
        Rs: *mut ::std::os::raw::c_short,
        npulses: *mut ::std::os::raw::c_short,
        maxpulse: *mut ::std::os::raw::c_short,
        core: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn pvq_encode(
        st: *mut Encoder_State,
        x: *const f32,
        y: *mut ::std::os::raw::c_short,
        xq: *mut f32,
        pulses: ::std::os::raw::c_short,
        N: ::std::os::raw::c_short,
        gain: f32,
    );
}
extern "C" {
    pub fn pvq_decode(
        st: *mut Decoder_State,
        xq: *mut f32,
        y: *mut ::std::os::raw::c_short,
        K: ::std::os::raw::c_short,
        N: ::std::os::raw::c_short,
        gain: f32,
    );
}
extern "C" {
    pub fn rangeCoderFinalizationFBits(
        Brc: ::std::os::raw::c_short,
        INTrc: ::std::os::raw::c_uint,
        FBits: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn bandBitsAdjustment(
        Brc: ::std::os::raw::c_short,
        INTrc: ::std::os::raw::c_uint,
        Bavail: ::std::os::raw::c_short,
        Nbands: ::std::os::raw::c_short,
        D: ::std::os::raw::c_short,
        L: ::std::os::raw::c_short,
        Bband: ::std::os::raw::c_short,
        Breserv: ::std::os::raw::c_short,
        Bband_adj: *mut ::std::os::raw::c_short,
        Brem: *mut ::std::os::raw::c_short,
        Breservplus: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn conservativeL1Norm(
        L: ::std::os::raw::c_short,
        Qvec: ::std::os::raw::c_short,
        Fcons: ::std::os::raw::c_short,
        Qavail: ::std::os::raw::c_short,
        Qreserv: ::std::os::raw::c_short,
        Dspec: ::std::os::raw::c_short,
        Dvec: *mut ::std::os::raw::c_short,
        Qspare: *mut ::std::os::raw::c_short,
        Qreservplus: *mut ::std::os::raw::c_short,
        Dspecplus: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn NearOppSplitAdjustment(
        qband: ::std::os::raw::c_short,
        qzero: ::std::os::raw::c_short,
        Qac: ::std::os::raw::c_short,
        INTac: ::std::os::raw::c_uint,
        qglobal: ::std::os::raw::c_short,
        FlagCons: ::std::os::raw::c_short,
        Np: ::std::os::raw::c_short,
        Nhead: ::std::os::raw::c_short,
        Ntail: ::std::os::raw::c_short,
        Nnear: ::std::os::raw::c_short,
        Nopp: ::std::os::raw::c_short,
        oppRQ3: ::std::os::raw::c_short,
        qnear: *mut ::std::os::raw::c_short,
        qopp: *mut ::std::os::raw::c_short,
        qglobalupd: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn dsDirac2Dirac(
        dsDiracIndex: ::std::os::raw::c_short,
        diracs: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn intLimCDivPos(
        NUM: ::std::os::raw::c_int,
        DEN: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intLimCDivSigned(
        NUM: ::std::os::raw::c_int,
        DEN: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shrtCDivSignedApprox(
        num: ::std::os::raw::c_short,
        den: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn dsDiracPerQuanta(
        td: ::std::os::raw::c_short,
        t_quanta: ::std::os::raw::c_short,
        dsm: ::std::os::raw::c_short,
        frQuanta: *const *const ::std::os::raw::c_uchar,
        DsIdx: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn QuantaPerDsDirac(
        td: ::std::os::raw::c_short,
        dsDiracIndex: ::std::os::raw::c_short,
        dimFrQuanta: *const *const ::std::os::raw::c_uchar,
        Quanta: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn Ratio_rQ3(
        opp: ::std::os::raw::c_short,
        near: ::std::os::raw::c_short,
        result: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn obtainEnergyQuantizerDensity(
        L: ::std::os::raw::c_short,
        R: ::std::os::raw::c_short,
        Density: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn densityAngle2RmsProjDec(
        D: ::std::os::raw::c_short,
        indexphi: ::std::os::raw::c_short,
        oppQ15: *mut ::std::os::raw::c_short,
        nearQ15: *mut ::std::os::raw::c_short,
        oppRatioQ3: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn densityAngle2RmsProjEnc(
        D: ::std::os::raw::c_short,
        phiQ14uq: ::std::os::raw::c_short,
        indexphi: *mut ::std::os::raw::c_short,
        oppQ15: *mut ::std::os::raw::c_short,
        nearQ15: *mut ::std::os::raw::c_short,
        oppRatioQ3: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn subband_gain_bits(
        Rk: *const ::std::os::raw::c_short,
        N: ::std::os::raw::c_short,
        bits: *mut ::std::os::raw::c_short,
        sfmsize: *const ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn env_adj(
        pulses: *const ::std::os::raw::c_short,
        length: ::std::os::raw::c_short,
        last_sfm: ::std::os::raw::c_short,
        adj: *mut f32,
        env_stab: f32,
        sfmsize: *const ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn env_stability(
        ynrm: *const ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
        mem_norm: *mut ::std::os::raw::c_short,
        mem_env_delta: *mut ::std::os::raw::c_short,
    ) -> f32;
}
extern "C" {
    pub fn env_stab_smo(
        env_stab: f32,
        env_stab_state_p: *mut f32,
        ho_cnt: *mut ::std::os::raw::c_short,
    ) -> f32;
}
extern "C" {
    pub fn core_switching_pre_enc(
        st: *mut Encoder_State,
        mem: *mut LPD_state,
        old_inp_12k8: *const f32,
        old_inp_16k: *const f32,
    );
}
extern "C" {
    pub fn core_switching_post_enc(
        st: *mut Encoder_State,
        old_inp_12k8: *const f32,
        old_inp_16k: *const f32,
        pitch: *const ::std::os::raw::c_short,
        voicing: *const f32,
        A: *const f32,
    );
}
extern "C" {
    pub fn core_switching_post_dec(
        st: *mut Decoder_State,
        synth: *mut f32,
        output_frame: ::std::os::raw::c_short,
        core_switching_flag: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn core_switching_pre_dec(st: *mut Decoder_State, output_frame: ::std::os::raw::c_short);
}
extern "C" {
    pub fn bandwidth_switching_detect(st: *mut Decoder_State);
}
extern "C" {
    pub fn bw_switching_pre_proc(st: *mut Decoder_State, old_syn_12k8_16k: *const f32);
}
extern "C" {
    pub fn updt_bw_switching(st: *mut Decoder_State, synth: *const f32);
}
extern "C" {
    pub fn swb_tbe_reset(
        mem_csfilt: *mut f32,
        mem_genSHBexc_filt_down_shb: *mut f32,
        state_lpc_syn: *mut f32,
        syn_overlap: *mut f32,
        state_syn_shbexc: *mut f32,
        tbe_demph: *mut f32,
        tbe_premph: *mut f32,
        mem_stp_swb: *mut f32,
        gain_prec_swb: *mut f32,
    );
}
extern "C" {
    pub fn swb_tbe_reset_synth(
        genSHBsynth_Hilbert_Mem: *mut f32,
        genSHBsynth_state_lsyn_filt_shb_local: *mut f32,
    );
}
extern "C" {
    pub fn fb_tbe_reset_enc(elliptic_bpf_2_48k_mem: *mut [f32; 4usize], prev_fb_energy: *mut f32);
}
extern "C" {
    pub fn fb_tbe_reset_synth(fbbwe_hpf_mem: *mut [f32; 4usize], prev_fbbwe_ratio: *mut f32);
}
extern "C" {
    pub fn wb_tbe_extras_reset(
        mem_genSHBexc_filt_down_wb2: *mut f32,
        mem_genSHBexc_filt_down_wb3: *mut f32,
    );
}
extern "C" {
    pub fn wb_tbe_extras_reset_synth(
        state_lsyn_filt_shb: *mut f32,
        state_lsyn_filt_dwn_shb: *mut f32,
        mem_resamp_HB: *mut f32,
    );
}
extern "C" {
    pub fn prep_tbe_exc(
        L_frame: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        gain_pit: f32,
        gain_code: f32,
        code: *const f32,
        voice_fac: f32,
        voice_factors: *mut f32,
        bwe_exc: *mut f32,
        gain_preQ: f32,
        code_preQ: *const f32,
        T0: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        core_brate: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn synthesise_fb_high_band(
        excitation_in: *const f32,
        output: *mut f32,
        fb_exc_energy: f32,
        ratio: f32,
        L_frame: ::std::os::raw::c_short,
        bfi: ::std::os::raw::c_short,
        prev_fbbwe_ratio: *mut f32,
        bpf_memory: *mut [f32; 4usize],
    );
}
extern "C" {
    pub fn elliptic_bpf_48k_generic(
        input: *const f32,
        output: *mut f32,
        memory: *mut [f32; 4usize],
        full_band_bpf: *const [f32; 5usize],
    );
}
extern "C" {
    pub fn HQ_FEC_processing(
        st: *mut Decoder_State,
        t_audio_q: *mut f32,
        is_transient: ::std::os::raw::c_short,
        ynrm_values: *mut [f32; 7usize],
        r_p_values: *mut [f32; 2usize],
        num_Sb: ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
        Num_bands_p: *mut ::std::os::raw::c_short,
        output_frame: ::std::os::raw::c_short,
        sfm_start: *const ::std::os::raw::c_short,
        sfm_end: *const ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn HQ_FEC_Mem_update(
        st: *mut Decoder_State,
        t_audio_q: *mut f32,
        normq: *mut f32,
        ynrm: *mut ::std::os::raw::c_short,
        Num_bands_p: *mut ::std::os::raw::c_short,
        is_transient: ::std::os::raw::c_short,
        hqswb_clas: ::std::os::raw::c_short,
        c_switching_flag: ::std::os::raw::c_short,
        nb_sfm: ::std::os::raw::c_short,
        num_Sb: ::std::os::raw::c_short,
        mean_en_high: *mut f32,
        hq_core_type: ::std::os::raw::c_short,
        output_frame: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn time_domain_FEC_HQ(
        st: *mut Decoder_State,
        wtda_audio: *mut f32,
        out: *mut f32,
        mean_en_high: f32,
        output_frame: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn Next_good_after_burst_erasures(
        ImdctOut: *const f32,
        auOut: *mut f32,
        OldauOut: *mut f32,
        ol_size: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn update_average_rate(st: *mut Encoder_State);
}
extern "C" {
    pub fn reset_preecho_dec(st: *mut Decoder_State);
}
extern "C" {
    pub fn preecho_sb(
        brate: ::std::os::raw::c_long,
        wtda_audio: *const f32,
        rec_sig: *mut f32,
        output_frame: ::std::os::raw::c_short,
        memfilt_lb: *mut f32,
        mean_prev_hb: *mut f32,
        smoothmem: *mut f32,
        mean_prev: *mut f32,
        mean_prev_nc: *mut f32,
        wmold_hb: *mut f32,
        prevflag: *mut ::std::os::raw::c_short,
        pastpre: *mut ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hq2_core_configure(
        frame_length: ::std::os::raw::c_short,
        num_bits: ::std::os::raw::c_short,
        is_transient: ::std::os::raw::c_short,
        bands: *mut ::std::os::raw::c_short,
        length: *mut ::std::os::raw::c_short,
        band_width: *mut ::std::os::raw::c_short,
        band_start: *mut ::std::os::raw::c_short,
        band_end: *mut ::std::os::raw::c_short,
        L_qint: *mut Word32,
        eref_fx: *mut Word16,
        bit_alloc_weight_fx: *mut Word16,
        gqlevs: *mut ::std::os::raw::c_short,
        Ngq: *mut ::std::os::raw::c_short,
        p2a_bands: *mut ::std::os::raw::c_short,
        p2a_th: *mut f32,
        pd_thresh: *mut f32,
        ld_slope: *mut f32,
        ni_coef: *mut f32,
        ni_pd_th: *mut f32,
        bwe_br: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn hq_lr_enc(
        st: *mut Encoder_State,
        t_audio: *mut f32,
        inner_frame: ::std::os::raw::c_short,
        num_bits: *mut ::std::os::raw::c_short,
        is_transient: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hq_lr_dec(
        st: *mut Decoder_State,
        yout: *mut f32,
        inner_frame: ::std::os::raw::c_short,
        num_bits: ::std::os::raw::c_short,
        is_transient: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hq2_bit_alloc(
        band_energy: *const f32,
        bands: ::std::os::raw::c_short,
        L_Rk: *mut Word32,
        bit_budget: *mut ::std::os::raw::c_short,
        p2a_flags: *mut ::std::os::raw::c_short,
        weight_fx: Word16,
        band_width: *const ::std::os::raw::c_short,
        num_bits: ::std::os::raw::c_short,
        hqswb_clas: ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
        is_transient: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hq2_noise_inject(
        y2hat: *mut f32,
        band_start: *const ::std::os::raw::c_short,
        band_end: *const ::std::os::raw::c_short,
        band_width: *const ::std::os::raw::c_short,
        Ep: *mut f32,
        Rk: *mut f32,
        npulses: *const ::std::os::raw::c_int,
        ni_seed: ::std::os::raw::c_short,
        bands: ::std::os::raw::c_short,
        ni_start_band: ::std::os::raw::c_short,
        bw_low: ::std::os::raw::c_short,
        bw_high: ::std::os::raw::c_short,
        enerL: f32,
        enerH: f32,
        last_ni_gain: *mut f32,
        last_env: *mut f32,
        last_max_pos_pulse: *mut ::std::os::raw::c_short,
        p2a_flags: *mut ::std::os::raw::c_short,
        p2a_bands: ::std::os::raw::c_short,
        hqswb_clas: ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
        bwe_br: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn mdct_spectrum_denorm(
        inp_vector: *const ::std::os::raw::c_int,
        y2: *mut f32,
        band_start: *const ::std::os::raw::c_short,
        band_end: *const ::std::os::raw::c_short,
        band_width: *const ::std::os::raw::c_short,
        band_energy: *const f32,
        npulses: *const ::std::os::raw::c_int,
        bands: ::std::os::raw::c_short,
        ld_slope: f32,
        pd_thresh: f32,
    );
}
extern "C" {
    pub fn reverse_transient_frame_energies(band_energy: *mut f32, bands: ::std::os::raw::c_short);
}
extern "C" {
    pub fn peak_vq_enc(
        st: *mut Encoder_State,
        coefs: *const f32,
        coefs_out: *mut f32,
        brate: ::std::os::raw::c_short,
        num_bits: ::std::os::raw::c_short,
        vq_peaks: ::std::os::raw::c_short,
        ynrm: *const ::std::os::raw::c_short,
        R: *mut ::std::os::raw::c_short,
        vq_peak_idx: *mut ::std::os::raw::c_short,
        nf_gains: *mut f32,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn hvq_dec(
        st: *mut Decoder_State,
        num_bits: ::std::os::raw::c_short,
        core_brate: ::std::os::raw::c_long,
        ynrm: *const ::std::os::raw::c_short,
        R: *mut ::std::os::raw::c_short,
        noise_level: *mut f32,
        peak_idx: *mut ::std::os::raw::c_short,
        Npeaks: *mut ::std::os::raw::c_short,
        coefsq_norm: *mut f32,
        core: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hq_configure_bfi(
        nb_sfm: *mut ::std::os::raw::c_short,
        num_Sb: *mut ::std::os::raw::c_short,
        num_bands_p: *mut ::std::os::raw::c_short,
        sfmsize: *mut *const ::std::os::raw::c_short,
        sfm_start: *mut *const ::std::os::raw::c_short,
        sfm_end: *mut *const ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn peak_vq_dec(
        st: *mut Decoder_State,
        coefs_out: *mut f32,
        brate: ::std::os::raw::c_short,
        num_bits: ::std::os::raw::c_short,
        ynrm: *const ::std::os::raw::c_short,
        R: *mut ::std::os::raw::c_short,
        vq_peak_idx: *mut ::std::os::raw::c_short,
        Npeaks: *mut ::std::os::raw::c_short,
        core: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn swb_bwe_enc_lr(
        st: *mut Encoder_State,
        m_core: *const f32,
        m_orig: *const f32,
        m: *mut f32,
        total_brate: ::std::os::raw::c_long,
        BANDS: ::std::os::raw::c_short,
        band_start: *mut ::std::os::raw::c_short,
        band_end: *mut ::std::os::raw::c_short,
        band_energy: *mut f32,
        p2a_flags: *mut ::std::os::raw::c_short,
        hqswb_clas: ::std::os::raw::c_short,
        lowlength: ::std::os::raw::c_short,
        highlength: ::std::os::raw::c_short,
        prev_frm_index: *mut ::std::os::raw::c_short,
        har_bands: ::std::os::raw::c_short,
        prev_frm_hfe2: *mut ::std::os::raw::c_short,
        prev_stab_hfe2: *mut ::std::os::raw::c_short,
        band_width: *mut ::std::os::raw::c_short,
        y2_ni: *const f32,
        ni_seed: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn swb_bwe_dec_lr(
        st: *mut Decoder_State,
        m_core: *const f32,
        m: *mut f32,
        total_brate: ::std::os::raw::c_long,
        BANDS: ::std::os::raw::c_short,
        band_start: *mut ::std::os::raw::c_short,
        band_end: *mut ::std::os::raw::c_short,
        band_energy: *mut f32,
        p2a_flags: *mut ::std::os::raw::c_short,
        hqswb_clas: ::std::os::raw::c_short,
        lowlength: ::std::os::raw::c_short,
        highlength: ::std::os::raw::c_short,
        har_bands: ::std::os::raw::c_short,
        prev_frm_hfe2: *mut ::std::os::raw::c_short,
        prev_stab_hfe2: *mut ::std::os::raw::c_short,
        band_width: *mut ::std::os::raw::c_short,
        y2_ni: *const f32,
        ni_seed: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn get_usebit_npswb(hqswb_clas: ::std::os::raw::c_short) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetPredictedSignal(
        predBuf: *const f32,
        outBuf: *mut f32,
        lag: ::std::os::raw::c_short,
        fLen: ::std::os::raw::c_short,
        gain: f32,
    );
}
extern "C" {
    pub fn convert_lagIndices_pls2smp(
        lagIndices_in: *mut ::std::os::raw::c_short,
        nBands_search: ::std::os::raw::c_short,
        lagIndices_out: *mut ::std::os::raw::c_short,
        sspectra: *const f32,
        sbWidth: *const ::std::os::raw::c_short,
        fLenLow: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn FindNBiggest2_simple(
        inBuf: *const f32,
        g: *mut GainItem,
        nIdx: ::std::os::raw::c_short,
        n: *mut ::std::os::raw::c_short,
        N_NBIGGESTSEARCH: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn updat_prev_frm(
        y2: *mut f32,
        t_audio: *mut f32,
        bwe_br: ::std::os::raw::c_long,
        length: ::std::os::raw::c_short,
        inner_frame: ::std::os::raw::c_short,
        bands: ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
        is_transient: ::std::os::raw::c_short,
        hqswb_clas: ::std::os::raw::c_short,
        prev_hqswb_clas: *mut ::std::os::raw::c_short,
        prev_SWB_peak_pos: *mut ::std::os::raw::c_short,
        prev_SWB_peak_pos_tmp: *mut ::std::os::raw::c_short,
        prev_frm_hfe2: *mut ::std::os::raw::c_short,
        prev_stab_hfe2: *mut ::std::os::raw::c_short,
        bws_cnt: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hf_parinitiz(
        total_brate: ::std::os::raw::c_long,
        hqswb_clas: ::std::os::raw::c_short,
        lowlength: ::std::os::raw::c_short,
        highlength: ::std::os::raw::c_short,
        wBands: *mut ::std::os::raw::c_short,
        subband_search_offset: *mut *const ::std::os::raw::c_short,
        subband_offsets: *mut *const ::std::os::raw::c_short,
        nBands: *mut ::std::os::raw::c_short,
        nBands_search: *mut ::std::os::raw::c_short,
        swb_lowband: *mut ::std::os::raw::c_short,
        swb_highband: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn spectrumsmooth_noiseton(
        spectra: *mut f32,
        spectra_ni: *const f32,
        sspectra: *mut f32,
        sspectra_diff: *mut f32,
        sspectra_ni: *mut f32,
        fLenLow: ::std::os::raw::c_short,
        ni_seed: *mut ::std::os::raw::c_short,
    ) -> f32;
}
extern "C" {
    pub fn noiseinj_hf(
        xSynth_har: *mut f32,
        th_g: *mut f32,
        band_energy: *mut f32,
        prev_En_sb: *mut f32,
        p2a_flags: *const ::std::os::raw::c_short,
        BANDS: ::std::os::raw::c_short,
        band_start: *mut ::std::os::raw::c_short,
        band_end: *mut ::std::os::raw::c_short,
        fLenLow: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn noise_extr_corcod(
        spectra: *mut f32,
        spectra_ni: *const f32,
        sspectra: *mut f32,
        sspectra_diff: *mut f32,
        sspectra_ni: *mut f32,
        fLenLow: ::std::os::raw::c_short,
        prev_hqswb_clas: ::std::os::raw::c_short,
        prev_ni_ratio: *mut f32,
    );
}
extern "C" {
    pub fn genhf_noise(
        noise_flr: *mut f32,
        xSynth_har: *mut f32,
        predBuf: *mut f32,
        bands: ::std::os::raw::c_short,
        harmonic_band: ::std::os::raw::c_short,
        har_freq_est2: ::std::os::raw::c_short,
        pos_max_hfe2: ::std::os::raw::c_short,
        pul_res: *mut ::std::os::raw::c_short,
        pk_sf: *mut GainItem,
        fLenLow: ::std::os::raw::c_short,
        fLenHigh: ::std::os::raw::c_short,
        sbWidth: *const ::std::os::raw::c_short,
        lagIndices: *const ::std::os::raw::c_short,
        subband_offsets: *const ::std::os::raw::c_short,
        subband_search_offset: *const ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn ton_ene_est(
        xSynth_har: *mut f32,
        be_tonal: *mut f32,
        band_energy: *mut f32,
        band_start: *mut ::std::os::raw::c_short,
        band_end: *mut ::std::os::raw::c_short,
        band_width: *mut ::std::os::raw::c_short,
        fLenLow: ::std::os::raw::c_short,
        fLenHigh: ::std::os::raw::c_short,
        bands: ::std::os::raw::c_short,
        har_bands: ::std::os::raw::c_short,
        ni_lvl: f32,
        pk_sf: *mut GainItem,
        pul_res: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn Gettonl_scalfact(
        outBuf: *mut f32,
        codbuf: *const f32,
        fLenLow: ::std::os::raw::c_short,
        fLenHigh: ::std::os::raw::c_short,
        harmonic_band: ::std::os::raw::c_short,
        bands: ::std::os::raw::c_short,
        band_energy: *mut f32,
        band_start: *mut ::std::os::raw::c_short,
        band_end: *mut ::std::os::raw::c_short,
        p2aflags: *const ::std::os::raw::c_short,
        be_tonal: *mut f32,
        pk_sf: *mut GainItem,
        pul_res: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn SpectrumSmoothing_nss(inBuf: *mut f32, outBuf: *mut f32, fLen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SpectrumSmoothing(
        inBuf: *mut f32,
        outBuf: *mut f32,
        fLen: ::std::os::raw::c_short,
        th_cut: f32,
    );
}
extern "C" {
    pub fn hq2_bit_alloc_har(
        y: *mut f32,
        B: ::std::os::raw::c_int,
        N: ::std::os::raw::c_short,
        L_Rsubband: *mut Word32,
        p2a_bands: ::std::os::raw::c_short,
        core_brate: ::std::os::raw::c_long,
        p2a_flags: *mut ::std::os::raw::c_short,
        band_width: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn GetSynthesizedSpecThinOut(
        predBuf: *const f32,
        outBuf: *mut f32,
        nBands: ::std::os::raw::c_short,
        sbWidth: *const ::std::os::raw::c_short,
        lagIndices: *const ::std::os::raw::c_short,
        lagGains: *const f32,
        predBufLen: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn return_bits_normal2(
        bit_budget: *mut ::std::os::raw::c_short,
        p2a_flags: *const ::std::os::raw::c_short,
        bands: ::std::os::raw::c_short,
        bits_lagIndices: *const ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn GetlagGains(
        predBuf: *const f32,
        band_energy: *const f32,
        nBands: ::std::os::raw::c_short,
        sbWidth: *const ::std::os::raw::c_short,
        lagIndices: *const ::std::os::raw::c_short,
        predBufLen: ::std::os::raw::c_short,
        lagGains: *mut f32,
    );
}
extern "C" {
    pub fn preset_hq2_swb(
        hqswb_clas: ::std::os::raw::c_short,
        band_end: *const ::std::os::raw::c_short,
        har_bands: *mut ::std::os::raw::c_short,
        p2a_bands: ::std::os::raw::c_short,
        length: ::std::os::raw::c_short,
        bands: ::std::os::raw::c_short,
        lowlength: *mut ::std::os::raw::c_short,
        highlength: *mut ::std::os::raw::c_short,
        m: *mut f32,
    );
}
extern "C" {
    pub fn post_hq2_swb(
        m: *const f32,
        lowlength: ::std::os::raw::c_short,
        highlength: ::std::os::raw::c_short,
        hqswb_clas: ::std::os::raw::c_short,
        har_bands: ::std::os::raw::c_short,
        bands: ::std::os::raw::c_short,
        p2a_flags: *const ::std::os::raw::c_short,
        band_start: *const ::std::os::raw::c_short,
        band_end: *const ::std::os::raw::c_short,
        y2: *mut f32,
        npulses: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn har_denorm_pulcnt(
        spectra: *mut f32,
        band_start: *mut ::std::os::raw::c_short,
        band_end: *mut ::std::os::raw::c_short,
        band_energy: *mut f32,
        band_width: *mut ::std::os::raw::c_short,
        npulses: *mut ::std::os::raw::c_int,
        har_bands: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn har_est(
        spectra: *mut f32,
        N: ::std::os::raw::c_short,
        har_freq_est1: *mut ::std::os::raw::c_short,
        har_freq_est2: *mut ::std::os::raw::c_short,
        flag_dis: *mut ::std::os::raw::c_short,
        prev_frm_hfe2: *mut ::std::os::raw::c_short,
        subband_search_offset: *const ::std::os::raw::c_short,
        sbWidth: *const ::std::os::raw::c_short,
        prev_stab_hfe2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn spt_shorten_domain_pre(
        band_start: *const ::std::os::raw::c_short,
        band_end: *const ::std::os::raw::c_short,
        prev_SWB_peak_pos: *const ::std::os::raw::c_short,
        BANDS: ::std::os::raw::c_short,
        bwe_br: ::std::os::raw::c_long,
        new_band_start: *mut ::std::os::raw::c_short,
        new_band_end: *mut ::std::os::raw::c_short,
        new_band_width: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn spt_shorten_domain_band_save(
        bands: ::std::os::raw::c_short,
        band_start: *const ::std::os::raw::c_short,
        band_end: *const ::std::os::raw::c_short,
        band_width: *const ::std::os::raw::c_short,
        org_band_start: *mut ::std::os::raw::c_short,
        org_band_end: *mut ::std::os::raw::c_short,
        org_band_width: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn spt_shorten_domain_band_restore(
        bands: ::std::os::raw::c_short,
        band_start: *mut ::std::os::raw::c_short,
        band_end: *mut ::std::os::raw::c_short,
        band_width: *mut ::std::os::raw::c_short,
        org_band_start: *const ::std::os::raw::c_short,
        org_band_end: *const ::std::os::raw::c_short,
        org_band_width: *const ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn spt_swb_peakpos_tmp_save(
        y2: *const f32,
        bands: ::std::os::raw::c_short,
        band_start: *const ::std::os::raw::c_short,
        band_end: *const ::std::os::raw::c_short,
        prev_SWB_peak_pos_tmp: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn hq_ecu(
        prevsynth: *const f32,
        ecu_rec: *mut f32,
        time_offs: *mut ::std::os::raw::c_short,
        X_sav: *mut f32,
        num_p: *mut ::std::os::raw::c_short,
        plocs: *mut ::std::os::raw::c_short,
        plocsi: *mut f32,
        env_stab: f32,
        last_fec: *mut ::std::os::raw::c_short,
        ph_ecu_HqVoicing: ::std::os::raw::c_short,
        ph_ecu_active: *mut ::std::os::raw::c_short,
        gapsynth: *mut f32,
        prev_bfi: ::std::os::raw::c_short,
        old_is_transient: *const ::std::os::raw::c_short,
        mag_chg_1st: *mut f32,
        Xavg: *mut f32,
        beta_mute: *mut f32,
        output_frame: ::std::os::raw::c_short,
        st: *mut Decoder_State,
    );
}
extern "C" {
    pub fn hq_timedomain_conc(
        ecu_rec: *mut f32,
        gapsynth: *mut f32,
        output_frame: ::std::os::raw::c_short,
        prevsynth: *const f32,
        st: *mut Decoder_State,
    );
}
extern "C" {
    pub fn fft3(X: *const f32, Y: *mut f32, n: ::std::os::raw::c_short);
}
extern "C" {
    pub fn ifft3(X: *const f32, Y: *mut f32, n: ::std::os::raw::c_short);
}
extern "C" {
    pub fn minimumStatistics(
        noiseLevelMemory: *mut f32,
        noiseLevelIndex: *mut ::std::os::raw::c_int,
        currLevelIndex: *mut ::std::os::raw::c_int,
        noiseEstimate: *mut f32,
        lastFrameLevel: *mut f32,
        currentFrameLevel: f32,
        minLev: f32,
        buffSize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn E_LPC_int_lpc_tcx(lsf_old: *const f32, lsf_new: *const f32, a: *mut f32);
}
extern "C" {
    pub fn E_GAIN_closed_loop_search(
        exc: *mut Float32,
        xn: *mut Float32,
        h: *mut Float32,
        t0_min: Word32,
        t0_min_frac: Word32,
        t0_max: Word32,
        t0_max_frac: Word32,
        t0_min_max_res: Word32,
        pit_frac: *mut Word32,
        pit_res: *mut Word32,
        pit_res_max: Word32,
        i_subfr: Word32,
        pit_min: Word32,
        pit_fr2: Word32,
        pit_fr1: Word32,
        L_subfr: Word32,
    ) -> Word32;
}
extern "C" {
    pub fn E_ACELP_toeplitz_mul(R: *mut f32, c: *mut f32, d: *mut f32);
}
extern "C" {
    pub fn acelp_pulsesign(
        cn: *const f32,
        dn: *mut f32,
        dn2: *mut f32,
        sign: *mut f32,
        vec: *mut f32,
        alp: f32,
    );
}
extern "C" {
    pub fn E_ACELP_4tsearch(
        dn: *mut Float32,
        cn: *const Float32,
        H: *const Float32,
        code: *mut f32,
        config: *mut PulseConfig,
        ind: *mut Word16,
        y: *mut Float32,
    );
}
extern "C" {
    pub fn E_ACELP_4tsearchx(
        dn: *mut Float32,
        cn: *const Float32,
        Rw: *mut Float32,
        code: *mut f32,
        config: *mut PulseConfig,
        ind: *mut Word16,
    );
}
extern "C" {
    pub fn E_ACELP_indexing(
        code: *mut Float32,
        config: PulseConfig,
        num_tracks: ::std::os::raw::c_int,
        prm: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn acelp_findcandidates(
        dn2: *mut f32,
        dn2_pos: *mut ::std::os::raw::c_short,
        pos_max: *mut ::std::os::raw::c_short,
        L_subfr: ::std::os::raw::c_int,
        tracks: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn E_ACELP_innovative_codebook(
        exc: *mut f32,
        T0: ::std::os::raw::c_int,
        T0_frac: ::std::os::raw::c_int,
        T0_res: ::std::os::raw::c_int,
        pitch_gain: f32,
        tilt_code: f32,
        mode: ::std::os::raw::c_int,
        pre_emphasis: ::std::os::raw::c_int,
        pitch_sharpening: ::std::os::raw::c_int,
        phase_scrambling: ::std::os::raw::c_int,
        formant_enh: ::std::os::raw::c_int,
        formant_tilt: ::std::os::raw::c_int,
        formant_enh_num: f32,
        formant_enh_den: f32,
        i_subfr: ::std::os::raw::c_short,
        Aq: *const f32,
        h1: *mut f32,
        xn: *mut f32,
        cn: *mut f32,
        y1: *mut f32,
        y2: *mut f32,
        acelpautoc: ::std::os::raw::c_int,
        pt_indice: *mut *mut ::std::os::raw::c_int,
        code: *mut f32,
        L_frame: ::std::os::raw::c_short,
        last_L_frame: ::std::os::raw::c_short,
        total_brate: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn E_ACELP_code43bit(
        code: *const f32,
        ps: *mut ::std::os::raw::c_ulong,
        p: *mut ::std::os::raw::c_int,
        idxs: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn fcb_pulse_track_joint(
        idxs: *mut ::std::os::raw::c_ushort,
        wordcnt: ::std::os::raw::c_int,
        index_n: *mut ::std::os::raw::c_ulong,
        pulse_num: *mut ::std::os::raw::c_int,
        track_num: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn D_ACELP_indexing(
        code: *mut Float32,
        config: PulseConfig,
        num_tracks: ::std::os::raw::c_int,
        prm: *mut ::std::os::raw::c_int,
        BER_detect: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn D_ACELP_decode_43bit(
        idxs: *mut ::std::os::raw::c_ushort,
        code: *mut f32,
        pulsestrack: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fcb_pulse_track_joint_decode(
        idxs: *mut ::std::os::raw::c_ushort,
        wordcnt: ::std::os::raw::c_int,
        index_n: *mut ::std::os::raw::c_ulong,
        pulse_num: *mut ::std::os::raw::c_int,
        track_num: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lag_wind(
        r: *mut f32,
        m: ::std::os::raw::c_short,
        sr: ::std::os::raw::c_int,
        strength: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn adapt_lag_wind(
        r: *mut f32,
        m: ::std::os::raw::c_int,
        Top: ::std::os::raw::c_int,
        Tnc: f32,
        sr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn hp20(signal: *mut Float32, lg: Word32, mem: *mut Float32, fs: Word32);
}
extern "C" {
    pub fn ham_cos_window(fh: *mut f32, n1: ::std::os::raw::c_int, n2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn correlation_shift(totalNoise: f32) -> f32;
}
extern "C" {
    pub fn init_coder_ace_plus(st: *mut Encoder_State);
}
extern "C" {
    pub fn core_coder_reconfig(st: *mut Encoder_State);
}
extern "C" {
    pub fn core_coder_mode_switch(
        st: *mut Encoder_State,
        bandwidth_in: ::std::os::raw::c_int,
        bitrate: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn enc_acelp_tcx_main(
        new_samples: *const f32,
        st: *mut Encoder_State,
        coder_type: ::std::os::raw::c_short,
        pitch: *const ::std::os::raw::c_short,
        voicing: *const f32,
        Aw: *mut f32,
        lsp_new: *const f32,
        lsp_mid: *const f32,
        hFdCngEnc: HANDLE_FD_CNG_ENC,
        bwe_exc_extended: *mut f32,
        voice_factors: *mut f32,
        pitch_buf: *mut f32,
        vad_hover_flag: ::std::os::raw::c_short,
        vad_flag_dtx: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn pitch_pred_linear_fit(
        nbLostCmpt: ::std::os::raw::c_short,
        last_good: ::std::os::raw::c_short,
        old_pitch_buf: *mut f32,
        old_fpitch: *mut f32,
        T0_out: *mut f32,
        pit_min: ::std::os::raw::c_int,
        pit_max: ::std::os::raw::c_int,
        mem_pitch_gain: *mut f32,
        limitation: ::std::os::raw::c_int,
        plc_use_future_lag: ::std::os::raw::c_short,
        extrapolationFailed: *mut ::std::os::raw::c_short,
        nb_subfr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_subframe_pitch(
        nSubframes: ::std::os::raw::c_int,
        pitchStart: f32,
        pitchEnd: f32,
        pitchBuf: *mut f32,
    );
}
extern "C" {
    pub fn core_encode_openloop(
        st: *mut Encoder_State,
        coder_type: ::std::os::raw::c_short,
        pitch: *const ::std::os::raw::c_short,
        voicing: *const f32,
        Aw: *const f32,
        lsp_new: *const f32,
        lsp_mid: *const f32,
        pitch_buf: *mut f32,
        voice_factors: *mut f32,
        bwe_exc: *mut f32,
        vad_hover_flag: ::std::os::raw::c_short,
        vad_flag_dtx: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn core_acelp_tcx20_switching(
        st: *mut Encoder_State,
        vad_flag: ::std::os::raw::c_short,
        sp_aud_decision0: ::std::os::raw::c_short,
        non_staX: f32,
        pitch: *mut ::std::os::raw::c_short,
        pitch_fr: *mut f32,
        voicing_fr: *mut f32,
        currTempFlatness: f32,
        lsp_mid: *const f32,
        stab_fac: f32,
    );
}
extern "C" {
    pub fn core_encode_twodiv(
        new_samples: *const f32,
        st: *mut Encoder_State,
        coder_type: ::std::os::raw::c_short,
        pitch: *const ::std::os::raw::c_short,
        voicing: *const f32,
        Aw: *mut f32,
    );
}
extern "C" {
    pub fn core_encode_update(st: *mut Encoder_State);
}
extern "C" {
    pub fn core_encode_update_cng(
        st: *mut Encoder_State,
        timeDomainBuffer: *mut f32,
        A: *mut f32,
        Aw: *const f32,
    );
}
extern "C" {
    pub fn core_signal_analysis_high_bitrate(
        new_samples: *const f32,
        T_op: *const ::std::os::raw::c_short,
        voicing: *const f32,
        pitch_12k8: *const ::std::os::raw::c_short,
        lsp: *mut f32,
        lsp_mid: *mut f32,
        st: *mut Encoder_State,
        pTnsSize: *mut ::std::os::raw::c_int,
        pTnsBits: *mut ::std::os::raw::c_int,
        param_core: *mut ::std::os::raw::c_int,
        ltpBits: *mut ::std::os::raw::c_int,
        L_frame: ::std::os::raw::c_int,
        L_frameTCX: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_gain(x: *mut f32, y: *mut f32, n: ::std::os::raw::c_int, en_y: *mut f32) -> f32;
}
extern "C" {
    pub fn encode_acelp_gains(
        code: *mut f32,
        gains_mode: ::std::os::raw::c_int,
        mean_ener_code: f32,
        clip_gain: ::std::os::raw::c_short,
        g_corr: *mut ACELP_CbkCorr,
        gain_pit: *mut f32,
        gain_code: *mut f32,
        pt_indice: *mut *mut ::std::os::raw::c_int,
        past_gcode: *mut f32,
        gain_inov: *mut f32,
        L_subfr: ::std::os::raw::c_int,
        code2: *mut f32,
        gain_code2: *mut f32,
        noisy_speech_flag: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn Mode2_gain_enc_mless(
        code: *const f32,
        lcode: ::std::os::raw::c_int,
        gain_pit: *mut f32,
        gain_code: *mut f32,
        coeff: *mut ACELP_CbkCorr,
        mean_ener: f32,
        clip_gain: ::std::os::raw::c_short,
        past_gcode: *mut f32,
        gain_inov: *mut f32,
        coder_type: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn decode_acelp_gains(
        code: *mut f32,
        gains_mode: ::std::os::raw::c_int,
        mean_ener_code: f32,
        gain_pit: *mut f32,
        gain_code: *mut f32,
        pt_indice: *mut *mut ::std::os::raw::c_int,
        past_gpit: *mut f32,
        past_gcode: *mut f32,
        gain_inov: *mut f32,
        L_subfr: ::std::os::raw::c_int,
        code2: *mut f32,
        gain_code2: *mut f32,
    );
}
extern "C" {
    pub fn Mode2_pit_encode(
        coder_type: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        pt_indice: *mut *mut ::std::os::raw::c_int,
        exc: *mut f32,
        T_op: *const ::std::os::raw::c_short,
        T0_min: *mut ::std::os::raw::c_int,
        T0_min_frac: *mut ::std::os::raw::c_int,
        T0_max: *mut ::std::os::raw::c_int,
        T0_max_frac: *mut ::std::os::raw::c_int,
        T0: *mut ::std::os::raw::c_int,
        T0_frac: *mut ::std::os::raw::c_int,
        T0_res: *mut ::std::os::raw::c_int,
        h1: *mut f32,
        xn: *mut f32,
        pit_min: ::std::os::raw::c_int,
        pit_fr1: ::std::os::raw::c_int,
        pit_fr1b: ::std::os::raw::c_int,
        pit_fr2: ::std::os::raw::c_int,
        pit_max: ::std::os::raw::c_int,
        pit_res_max: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn limit_T0_voiced(
        nbits: ::std::os::raw::c_int,
        res: ::std::os::raw::c_int,
        T0: ::std::os::raw::c_int,
        T0_frac: ::std::os::raw::c_int,
        T0_res: ::std::os::raw::c_int,
        T0_min: *mut ::std::os::raw::c_int,
        T0_min_frac: *mut ::std::os::raw::c_int,
        T0_max: *mut ::std::os::raw::c_int,
        T0_max_frac: *mut ::std::os::raw::c_int,
        pit_min: ::std::os::raw::c_int,
        pit_max: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Mode2_abs_pit_enc(
        T0: ::std::os::raw::c_short,
        T0_frac: ::std::os::raw::c_int,
        pt_indice: *mut *mut ::std::os::raw::c_int,
        pit_min: ::std::os::raw::c_short,
        pit_fr1: ::std::os::raw::c_short,
        pit_fr2: ::std::os::raw::c_short,
        pit_res_max: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn Mode2_delta_pit_enc(
        T0: ::std::os::raw::c_short,
        T0_frac: ::std::os::raw::c_int,
        T0_res: ::std::os::raw::c_int,
        T0_min: ::std::os::raw::c_short,
        T0_min_frac: ::std::os::raw::c_short,
        pt_indice: *mut *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Mode2_pit_decode(
        coder_type: ::std::os::raw::c_short,
        i_subfr: ::std::os::raw::c_short,
        L_subfr: ::std::os::raw::c_int,
        pt_indice: *mut *mut ::std::os::raw::c_int,
        T0: *mut ::std::os::raw::c_int,
        T0_frac: *mut ::std::os::raw::c_int,
        T0_res: *mut ::std::os::raw::c_int,
        T0_min: *mut ::std::os::raw::c_int,
        T0_min_frac: *mut ::std::os::raw::c_int,
        T0_max: *mut ::std::os::raw::c_int,
        T0_max_frac: *mut ::std::os::raw::c_int,
        pit_min: ::std::os::raw::c_int,
        pit_fr1: ::std::os::raw::c_int,
        pit_fr1b: ::std::os::raw::c_int,
        pit_fr2: ::std::os::raw::c_int,
        pit_max: ::std::os::raw::c_int,
        pit_res_max: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn Mode2_abs_pit_dec(
        T0: *mut ::std::os::raw::c_int,
        T0_frac: *mut ::std::os::raw::c_int,
        T0_res: *mut ::std::os::raw::c_int,
        pt_indice: *mut *mut ::std::os::raw::c_int,
        pit_min: ::std::os::raw::c_int,
        pit_fr1: ::std::os::raw::c_int,
        pit_fr2: ::std::os::raw::c_int,
        pit_res_max: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Mode2_delta_pit_dec(
        T0: *mut ::std::os::raw::c_int,
        T0_frac: *mut ::std::os::raw::c_int,
        T0_res: ::std::os::raw::c_int,
        T0_min: *mut ::std::os::raw::c_int,
        T0_min_frac: *mut ::std::os::raw::c_int,
        pt_indice: *mut *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn formant_post_filt(
        pfstat: *mut PFSTAT,
        synth_in: *mut f32,
        Aq: *const f32,
        synth_out: *mut f32,
        L_frame: ::std::os::raw::c_short,
        L_subfr: ::std::os::raw::c_short,
        lp_noise: f32,
        rate: ::std::os::raw::c_long,
        off_flag: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn qlpc_avq(
        lsp: *const f32,
        lspmid: *const f32,
        lsf_q: *mut f32,
        lsfmid_q: *mut f32,
        index: *mut ::std::os::raw::c_int,
        nb_indices: *mut ::std::os::raw::c_int,
        nbbits: *mut ::std::os::raw::c_int,
        core: ::std::os::raw::c_int,
        sr_core: f32,
    );
}
extern "C" {
    pub fn encode_lpc_avq(
        st: *mut Encoder_State,
        numlpc: ::std::os::raw::c_int,
        param_lpc: *mut ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlpc_avq(
        index: *mut ::std::os::raw::c_int,
        LSF_Q: *mut f32,
        numlpc: ::std::os::raw::c_int,
        sr_core: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn decode_lpc_avq(
        st: *mut Decoder_State,
        numlpc: ::std::os::raw::c_int,
        param_lpc: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vlpc_1st_cod(
        lsf: *const f32,
        lsfq: *mut f32,
        sr_core: f32,
        w: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vlpc_2st_cod(
        lsf: *const f32,
        lsfq: *mut f32,
        indx: *mut ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        sr_core: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vlpc_2st_dec(
        lsfq: *mut f32,
        indx: *mut ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        sr_core: f32,
    );
}
extern "C" {
    pub fn lsf_weight_2st(lsfq: *const f32, w: *mut f32, mode: ::std::os::raw::c_int, sr_core: f32);
}
extern "C" {
    pub fn mdct_window_sine(window: *mut f32, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mdct_window_aldo(window1: *mut f32, window2: *mut f32, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn AVQ_cod_lpc(
        nvec: *const f32,
        nvecq: *mut ::std::os::raw::c_int,
        indx: *mut ::std::os::raw::c_int,
        Nsv: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn AVQ_dec_lpc(
        indx: *const ::std::os::raw::c_int,
        nvecq: *mut ::std::os::raw::c_int,
        Nsv: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn vlpc_1st_dec(index: ::std::os::raw::c_int, lsfq: *mut f32, sr_core: f32);
}
extern "C" {
    pub fn WindowSignal(
        tcx_cfg: *const TCX_config,
        offset: ::std::os::raw::c_int,
        left_overlap_mode: ::std::os::raw::c_short,
        right_overlap_mode: ::std::os::raw::c_short,
        left_overlap_length: *mut ::std::os::raw::c_int,
        right_overlap_length: *mut ::std::os::raw::c_int,
        in_: *const f32,
        L_frame: *mut ::std::os::raw::c_int,
        out: *mut f32,
        fullband: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn HBAutocorrelation(
        tcx_cfg: *mut TCX_config,
        left_mode: ::std::os::raw::c_int,
        right_mode: ::std::os::raw::c_int,
        speech: *mut f32,
        L_frame_glob: ::std::os::raw::c_int,
        r: *mut f32,
        m: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TNSAnalysis(
        tcx_cfg: *mut TCX_config,
        L_frame: ::std::os::raw::c_int,
        L_spec: ::std::os::raw::c_int,
        tcxMode: ::std::os::raw::c_short,
        isAfterACELP: ::std::os::raw::c_int,
        spectrum: *mut f32,
        pTnsData: *mut STnsData,
        pfUseTns: *mut ::std::os::raw::c_int,
        predictionGain: *mut f32,
    );
}
extern "C" {
    pub fn ShapeSpectrum(
        tcx_cfg: *mut TCX_config,
        A: *mut f32,
        gainlpc: *mut f32,
        L_frame_glob: ::std::os::raw::c_int,
        L_spec: ::std::os::raw::c_int,
        spectrum: *mut f32,
        fUseTns: ::std::os::raw::c_int,
        st: *mut Encoder_State,
    );
}
extern "C" {
    pub fn QuantizeSpectrum(
        tcx_cfg: *mut TCX_config,
        A: *mut f32,
        Aqind: *mut Word16,
        gainlpc: *mut f32,
        synth: *mut f32,
        L_frame_glob: ::std::os::raw::c_int,
        L_frameTCX_glob: ::std::os::raw::c_int,
        L_spec: ::std::os::raw::c_int,
        nb_bits: ::std::os::raw::c_int,
        tcxonly: ::std::os::raw::c_int,
        spectrum: *mut f32,
        pTnsData: *mut STnsData,
        fUseTns: ::std::os::raw::c_int,
        tnsSize: ::std::os::raw::c_int,
        LPDmem: *mut LPD_state,
        prm: *mut ::std::os::raw::c_int,
        frame_cnt: ::std::os::raw::c_int,
        st: *mut Encoder_State,
        hm_cfg: *mut CONTEXT_HM_CONFIG,
    );
}
extern "C" {
    pub fn get_next_coeff_mapped(
        ii: *mut ::std::os::raw::c_int,
        pp: *mut ::std::os::raw::c_int,
        idx: *mut ::std::os::raw::c_int,
        hm_cfg: *mut CONTEXT_HM_CONFIG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_next_coeff_unmapped(
        ii: *mut ::std::os::raw::c_int,
        idx: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn update_mixed_context(
        ctx: ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ACcontextMapping_encode2_no_mem_s17_LC(
        st: *mut Encoder_State,
        x: *mut ::std::os::raw::c_int,
        nt: ::std::os::raw::c_int,
        lastnz: ::std::os::raw::c_int,
        nbbits: ::std::os::raw::c_int,
        resQMaxBits: ::std::os::raw::c_int,
        hm_cfg: *mut CONTEXT_HM_CONFIG,
    );
}
extern "C" {
    pub fn ACcontextMapping_decode2_no_mem_s17_LC(
        st: *mut Decoder_State,
        x: *mut ::std::os::raw::c_int,
        nt: ::std::os::raw::c_long,
        nbbits: ::std::os::raw::c_int,
        resQMaxBits: ::std::os::raw::c_int,
        hm_cfg: *mut CONTEXT_HM_CONFIG,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ACcontextMapping_encode2_estimate_no_mem_s17_LC(
        x: *const ::std::os::raw::c_int,
        nt: ::std::os::raw::c_int,
        lastnz: *mut ::std::os::raw::c_int,
        nEncoded: *mut ::std::os::raw::c_int,
        target: ::std::os::raw::c_int,
        stop: *mut ::std::os::raw::c_int,
        hm_cfg: *mut CONTEXT_HM_CONFIG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcx_windowing_analysis(
        signal: *const f32,
        L_frame: ::std::os::raw::c_int,
        left_overlap: ::std::os::raw::c_int,
        left_win: *const f32,
        right_overlap: ::std::os::raw::c_int,
        right_win: *const f32,
        output: *mut f32,
    );
}
extern "C" {
    pub fn tcx_windowing_synthesis_current_frame(
        signal: *mut f32,
        window: *mut f32,
        window_half: *mut f32,
        window_min: *mut f32,
        window_length: ::std::os::raw::c_int,
        window_half_length: ::std::os::raw::c_int,
        window_min_length: ::std::os::raw::c_int,
        left_rect: ::std::os::raw::c_int,
        left_mode: ::std::os::raw::c_int,
        acelp_zir: *mut f32,
        old_syn: *mut f32,
        syn_overl: *mut f32,
        A_zir: *mut f32,
        window_trans: *mut f32,
        acelp_zir_len: ::std::os::raw::c_int,
        acelp_mem_len: ::std::os::raw::c_int,
        last_core_bfi: ::std::os::raw::c_int,
        last_is_cng: ::std::os::raw::c_int,
        fullbandScale: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tcx_windowing_synthesis_past_frame(
        signal: *mut f32,
        window: *mut f32,
        window_half: *mut f32,
        window_min: *mut f32,
        window_length: ::std::os::raw::c_int,
        window_half_length: ::std::os::raw::c_int,
        window_min_length: ::std::os::raw::c_int,
        right_mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ProcessIGF(
        hInstance: IGF_ENC_INSTANCE_HANDLE,
        st: *mut Encoder_State,
        pMDCTSpectrum: *mut f32,
        pPowerSpectrum: *mut f32,
        isTCX20: ::std::os::raw::c_int,
        isTNSActive: ::std::os::raw::c_int,
        isTransition: ::std::os::raw::c_int,
        frameno: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn AnalyzePowerSpectrum(
        st: *mut Encoder_State,
        L_frame: ::std::os::raw::c_int,
        L_frameTCX: ::std::os::raw::c_int,
        left_overlap: ::std::os::raw::c_int,
        right_overlap: ::std::os::raw::c_int,
        mdctSpectrum: *const f32,
        signal: *const f32,
        powerSpec: *mut f32,
    );
}
extern "C" {
    pub fn lpc2mdct(lpcCoeffs: *mut f32, lpcOrder: ::std::os::raw::c_int, mdct_gains: *mut f32);
}
extern "C" {
    pub fn mdct_preShaping(x: *mut f32, lg: ::std::os::raw::c_int, gains: *const f32);
}
extern "C" {
    pub fn mdct_noiseShaping(x: *mut f32, lg: ::std::os::raw::c_int, gains: *const f32);
}
extern "C" {
    pub fn mdct_noiseShaping_interp(x: *mut f32, lg: ::std::os::raw::c_int, gains: *const f32);
}
extern "C" {
    pub fn AdaptLowFreqEmph(
        x: *mut f32,
        xq: *mut ::std::os::raw::c_int,
        invGain: f32,
        tcx_lpc_shaped_ari: ::std::os::raw::c_short,
        lpcGains: *const f32,
        lg: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn PsychAdaptLowFreqEmph(x: *mut f32, lpcGains: *const f32);
}
extern "C" {
    pub fn PsychAdaptLowFreqDeemph(x: *mut f32, lpcGains: *const f32, lf_deemph_factors: *mut f32);
}
extern "C" {
    pub fn AdaptLowFreqDeemph(
        x: *mut f32,
        tcx_lpc_shaped_ari: ::std::os::raw::c_short,
        lpcGains: *const f32,
        lg: ::std::os::raw::c_int,
        lf_deemph_factors: *mut f32,
    );
}
extern "C" {
    pub fn SQ_gain(x: *mut f32, nbitsSQ: ::std::os::raw::c_int, lg: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn tcx_scalar_quantization(
        x: *mut f32,
        xq: *mut ::std::os::raw::c_int,
        L_frame: ::std::os::raw::c_int,
        gain: f32,
        offset: f32,
        memQuantZeros: *mut ::std::os::raw::c_int,
        alfe_flag: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tcx_scalar_quantization_rateloop(
        x: *mut f32,
        xq: *mut ::std::os::raw::c_int,
        L_frame: ::std::os::raw::c_int,
        gain: *mut f32,
        offset: f32,
        memQuantZeros: *mut ::std::os::raw::c_int,
        lastnz_out: *mut ::std::os::raw::c_int,
        target: ::std::os::raw::c_int,
        nEncoded: *mut ::std::os::raw::c_int,
        stop: *mut ::std::os::raw::c_int,
        sqBits_in_noStop: ::std::os::raw::c_int,
        sqBits_in: ::std::os::raw::c_int,
        tcxRateLoopOpt: ::std::os::raw::c_int,
        tcxonly: ::std::os::raw::c_int,
        hm_cfg: *mut CONTEXT_HM_CONFIG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuantizeGain(
        n: ::std::os::raw::c_int,
        pGain: *mut f32,
        pQuantizedGain: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tcx_noise_factor(
        x_orig: *mut f32,
        sqQ: *mut f32,
        iFirstLine: ::std::os::raw::c_int,
        lowpassLine: ::std::os::raw::c_int,
        nMinHoleSize: ::std::os::raw::c_int,
        L_frame: ::std::os::raw::c_int,
        gain_tcx: f32,
        tiltCompFactor: f32,
        fac_ns: *mut f32,
        quantized_fac_ns: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tcx_noise_filling(
        Q: *mut f32,
        noiseFillSeed: ::std::os::raw::c_int,
        iFirstLine: ::std::os::raw::c_int,
        lowpassLine: ::std::os::raw::c_int,
        nTransWidth: ::std::os::raw::c_int,
        L_frame: ::std::os::raw::c_int,
        tiltCompFactor: f32,
        fac_ns: f32,
        infoTCXNoise: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn tcx_encoder_memory_update(
        wsig: *const f32,
        xn_buf: *mut f32,
        L_frame_glob: ::std::os::raw::c_int,
        Ai: *const f32,
        A: *mut f32,
        preemph: f32,
        LPDmem: *mut LPD_state,
        st: *mut Encoder_State,
        m: ::std::os::raw::c_int,
        synth: *mut f32,
    );
}
extern "C" {
    pub fn tcx_decoder_memory_update(
        xn_buf: *mut f32,
        synth: *mut f32,
        L_frame_glob: ::std::os::raw::c_int,
        A: *mut f32,
        st: *mut Decoder_State,
        syn: *mut f32,
    );
}
extern "C" {
    pub fn tcx_ari_res_Q_spec(
        x_orig: *const f32,
        signs: *const ::std::os::raw::c_int,
        x_Q: *mut f32,
        L_frame: ::std::os::raw::c_int,
        gain: f32,
        prm: *mut ::std::os::raw::c_int,
        target_bits: ::std::os::raw::c_int,
        bits: ::std::os::raw::c_int,
        deadzone: f32,
        x_fac: *const f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcx_ari_res_invQ_spec(
        x_Q: *mut f32,
        L_frame: ::std::os::raw::c_int,
        prm: *const ::std::os::raw::c_int,
        target_bits: ::std::os::raw::c_int,
        bits: ::std::os::raw::c_int,
        deadzone: f32,
        x_fac: *const f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcx_res_Q_gain(
        sqGain: f32,
        gain_tcx: *mut f32,
        prm: *mut ::std::os::raw::c_int,
        sqTargetBits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcx_res_Q_spec(
        x_orig: *mut f32,
        x_Q: *mut f32,
        L_frame: ::std::os::raw::c_int,
        sqGain: f32,
        prm: *mut ::std::os::raw::c_int,
        sqTargetBits: ::std::os::raw::c_int,
        bits: ::std::os::raw::c_int,
        sq_round: f32,
        lf_deemph_factors: *const f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcx_res_invQ_gain(
        gain_tcx: *mut f32,
        prm: *const ::std::os::raw::c_int,
        resQBits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcx_res_invQ_spec(
        x: *mut f32,
        L_frame: ::std::os::raw::c_int,
        prm: *const ::std::os::raw::c_int,
        resQBits: ::std::os::raw::c_int,
        bits: ::std::os::raw::c_int,
        sq_round: f32,
        lf_deemph_factors: *const f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn InitTnsConfigs(
        nSampleRate: ::std::os::raw::c_int,
        L_frame: ::std::os::raw::c_int,
        tnsConfig: *mut [STnsConfig; 2usize],
        igfStopFreq: ::std::os::raw::c_int,
        bitrate: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SetTnsConfig(
        tcx_cfg: *mut TCX_config,
        isTCX20: ::std::os::raw::c_int,
        isAfterACELP: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ari_copy_states(source: *mut Tastat, dest: *mut Tastat);
}
extern "C" {
    pub fn mul_sbc_14bits(
        r: ::std::os::raw::c_long,
        c: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ari_start_encoding_14bits(s: *mut Tastat);
}
extern "C" {
    pub fn ari_encode_14bits(
        ptr: *mut ::std::os::raw::c_short,
        bp: ::std::os::raw::c_long,
        s: *mut Tastat,
        symbol: ::std::os::raw::c_long,
        cum_freq: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ari_encode_14bits_ext(
        ptr: *mut ::std::os::raw::c_int,
        bp: ::std::os::raw::c_long,
        s: *mut Tastat,
        symbol: ::std::os::raw::c_long,
        cum_freq: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ari_done_encoding_14bits(
        ptr: *mut ::std::os::raw::c_int,
        bp: ::std::os::raw::c_long,
        s: *mut Tastat,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ari_encode_check_budget_14bits(
        bp: ::std::os::raw::c_long,
        s: *mut Tastat,
        nb_bits: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ari_start_decoding_14bits(st: *mut Decoder_State, s: *mut Tastat);
}
extern "C" {
    pub fn ari_start_decoding_14bits_prm(
        ptr: *const ::std::os::raw::c_int,
        bp: ::std::os::raw::c_long,
        s: *mut Tastat,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ari_decode_14bits_s17_ext(
        st: *mut Decoder_State,
        res: *mut ::std::os::raw::c_int,
        s: *mut Tastat,
        cum_freq: *const ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn ari_decode_14bits_s27_ext(
        st: *mut Decoder_State,
        res: *mut ::std::os::raw::c_int,
        s: *mut Tastat,
        cum_freq: *const ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn ari_decode_14bits_bit_ext(
        st: *mut Decoder_State,
        res: *mut ::std::os::raw::c_int,
        s: *mut Tastat,
    );
}
extern "C" {
    pub fn expfp(x: Word16, x_e: Word16) -> Word16;
}
extern "C" {
    pub fn powfp_odd2(base: Word16, exp: Word16, pout1: *mut Word16, pout2: *mut Word16);
}
extern "C" {
    pub fn tcx_arith_scale_envelope(
        L_spec_core: Word16,
        L_frame: Word16,
        env: *mut Word32,
        target_bits: Word16,
        low_complexity: Word16,
        s_env: *mut Word16,
        s_env_e: *mut Word16,
    );
}
extern "C" {
    pub fn tcx_arith_render_envelope(
        A_ind: *const Word16,
        L_frame: Word16,
        L_spec: Word16,
        preemph_fac: Word16,
        gamma_w: Word16,
        gamma_uw: Word16,
        env: *mut Word32,
    );
}
extern "C" {
    pub fn ari_encode_14bits_range(
        ptr: *mut ::std::os::raw::c_int,
        bp: ::std::os::raw::c_long,
        bits: ::std::os::raw::c_long,
        s: *mut Tastat,
        cum_freq_low: ::std::os::raw::c_ushort,
        cum_freq_high: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ari_encode_14bits_sign(
        ptr: *mut ::std::os::raw::c_int,
        bp: ::std::os::raw::c_long,
        bits: ::std::os::raw::c_long,
        s: *mut Tastat,
        sign: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ari_done_cbr_encoding_14bits(
        ptr: *mut ::std::os::raw::c_int,
        bp: ::std::os::raw::c_long,
        bits: ::std::os::raw::c_long,
        s: *mut Tastat,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ari_decode_14bits_pow(
        ptr: *const ::std::os::raw::c_int,
        bp: ::std::os::raw::c_long,
        bits: ::std::os::raw::c_long,
        res: *mut ::std::os::raw::c_int,
        s: *mut Tastat,
        base: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ari_decode_14bits_sign(
        ptr: *const ::std::os::raw::c_int,
        bp: ::std::os::raw::c_long,
        bits: ::std::os::raw::c_long,
        res: *mut ::std::os::raw::c_int,
        s: *mut Tastat,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tcx_arith_encode_envelope(
        spectrum: *mut f32,
        signs: *mut ::std::os::raw::c_int,
        L_frame: ::std::os::raw::c_int,
        L_frame_orig: ::std::os::raw::c_int,
        st: *mut Encoder_State,
        A_ind: *const Word16,
        target_bits: ::std::os::raw::c_int,
        prm: *mut ::std::os::raw::c_int,
        use_hm: ::std::os::raw::c_int,
        prm_hm: *mut ::std::os::raw::c_int,
        tcxltp_pitch: ::std::os::raw::c_short,
        arith_bits: *mut ::std::os::raw::c_int,
        signaling_bits: *mut ::std::os::raw::c_int,
        low_complexity: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tcx_arith_decode_envelope(
        q_spectrum: *mut f32,
        L_frame: ::std::os::raw::c_int,
        L_frame_orig: ::std::os::raw::c_int,
        st: *mut Decoder_State,
        coder_type: ::std::os::raw::c_short,
        A_ind: *const Word16,
        tcxltp_gain: f32,
        target_bits: ::std::os::raw::c_int,
        prm: *const ::std::os::raw::c_int,
        use_hm: ::std::os::raw::c_int,
        prm_hm: *const ::std::os::raw::c_int,
        tcxltp_pitch: ::std::os::raw::c_short,
        arith_bits: *mut ::std::os::raw::c_int,
        signaling_bits: *mut ::std::os::raw::c_int,
        low_complexity: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn UnmapIndex(
        PeriodicityIndex: ::std::os::raw::c_int,
        Bandwidth: ::std::os::raw::c_int,
        LtpPitchLag: ::std::os::raw::c_short,
        SmallerLags: ::std::os::raw::c_int,
        FractionalResolution: *mut ::std::os::raw::c_int,
        Lag: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SearchPeriodicityIndex(
        Mdct: *const f32,
        UnfilteredMdct: *const f32,
        NumCoeffs: ::std::os::raw::c_int,
        TargetBits: ::std::os::raw::c_int,
        LtpPitchLag: ::std::os::raw::c_short,
        LtpGain: f32,
        RelativeScore: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ConfigureContextHm(
        NumCoeffs: ::std::os::raw::c_int,
        TargetBits: ::std::os::raw::c_int,
        PeriodicityIndex: ::std::os::raw::c_int,
        LtpPitchLag: ::std::os::raw::c_short,
        hm_cfg: *mut CONTEXT_HM_CONFIG,
    );
}
extern "C" {
    pub fn EncodeIndex(
        Bandwidth: ::std::os::raw::c_int,
        PeriodicityIndex: ::std::os::raw::c_int,
        st: *mut Encoder_State,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CountIndexBits(
        Bandwidth: ::std::os::raw::c_int,
        PeriodicityIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DecodeIndex(
        st: *mut Decoder_State,
        Bandwidth: ::std::os::raw::c_int,
        PeriodicityIndex: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcx_hm_render(
        lag: ::std::os::raw::c_int,
        fract_res: ::std::os::raw::c_int,
        LtpGain: f32,
        p: *mut Word16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcx_hm_modify_envelope(
        gain: Word16,
        lag: ::std::os::raw::c_int,
        fract_res: ::std::os::raw::c_int,
        p: *mut Word16,
        env: *mut Word32,
        L_frame: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tcx_hm_analyse(
        abs_spectrum: *const f32,
        L_frame: ::std::os::raw::c_int,
        env: *mut Word32,
        targetBits: ::std::os::raw::c_int,
        coder_type: ::std::os::raw::c_int,
        prm_hm: *mut ::std::os::raw::c_int,
        LtpPitchLag: ::std::os::raw::c_short,
        LtpGain: f32,
        hm_bits: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tcx_hm_decode(
        L_frame: ::std::os::raw::c_int,
        env: *mut Word32,
        targetBits: ::std::os::raw::c_int,
        coder_type: ::std::os::raw::c_int,
        prm_hm: *const ::std::os::raw::c_int,
        LtpPitchLag: ::std::os::raw::c_short,
        LtpGain: f32,
        hm_bits: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn coder_tcx(
        n: ::std::os::raw::c_int,
        tcx_cfg: *mut TCX_config,
        A: *mut f32,
        Aqind: *mut Word16,
        synth: *mut f32,
        L_frame_glob: ::std::os::raw::c_int,
        L_frameTCX_glob: ::std::os::raw::c_int,
        L_spec: ::std::os::raw::c_int,
        nb_bits: ::std::os::raw::c_int,
        tcxonly: ::std::os::raw::c_int,
        spectrum: *mut f32,
        LPDmem: *mut LPD_state,
        prm: *mut ::std::os::raw::c_int,
        st: *mut Encoder_State,
        hm_cfg: *mut CONTEXT_HM_CONFIG,
    );
}
extern "C" {
    pub fn coder_tcx_post(
        st: *mut Encoder_State,
        LPDmem: *mut LPD_state,
        tcx_cfg: *mut TCX_config,
        synth: *mut f32,
        A: *mut f32,
        Ai: *const f32,
        wsig: *mut f32,
    );
}
extern "C" {
    pub fn decoder_tcx(
        tcx_cfg: *mut TCX_config,
        prm: *mut ::std::os::raw::c_int,
        A: *mut f32,
        Aind: *mut Word16,
        L_frame: ::std::os::raw::c_int,
        L_frameTCX: ::std::os::raw::c_int,
        L_spec: ::std::os::raw::c_int,
        synth: *mut f32,
        synthFB: *mut f32,
        st: *mut Decoder_State,
        coder_type: ::std::os::raw::c_short,
        bfi: ::std::os::raw::c_int,
        frame_cnt: ::std::os::raw::c_int,
        stab_fac: f32,
    );
}
extern "C" {
    pub fn decoder_tcx_post(
        st: *mut Decoder_State,
        synth: *mut f32,
        synthFB: *mut f32,
        A: *mut f32,
        bfi: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn coder_acelp(
        acelp_cfg: *mut ACELP_config,
        coder_type: ::std::os::raw::c_short,
        A: *const f32,
        Aq: *const f32,
        speech: *const f32,
        synth: *mut f32,
        LPDmem: *mut LPD_state,
        voicing: *const f32,
        T_op: *const ::std::os::raw::c_short,
        prm: *mut ::std::os::raw::c_int,
        stab_fac: f32,
        st: *mut Encoder_State,
        hPlc_Ext: HANDLE_PLC_ENC_EVS,
        target_bits: ::std::os::raw::c_short,
        gain_pitch_buf: *mut f32,
        gain_code_buf: *mut f32,
        pitch_buf: *mut f32,
        voice_factors: *mut f32,
        bwe_exc: *mut f32,
    );
}
extern "C" {
    pub fn coder_acelp_rf(
        target_bits: ::std::os::raw::c_short,
        speech: *const f32,
        coder_type: ::std::os::raw::c_short,
        rf_frame_type: ::std::os::raw::c_short,
        A: *const f32,
        Aq: *const f32,
        voicing: *const f32,
        T_op: *const ::std::os::raw::c_short,
        stab_fac: f32,
        st: *mut Encoder_State,
        acelp_cfg: *mut ACELP_config,
        exc_rf: *mut f32,
        syn_rf: *mut f32,
    );
}
extern "C" {
    pub fn decoder_acelp(
        st: *mut Decoder_State,
        coder_type: ::std::os::raw::c_short,
        prm: *mut ::std::os::raw::c_int,
        A: *const f32,
        acelp_cfg: ACELP_config,
        synth: *mut f32,
        pT: *mut ::std::os::raw::c_int,
        pgainT: *mut f32,
        stab_fac: f32,
        pitch_buffer: *mut f32,
        voice_factors: *mut f32,
        LSF_Q_prediction: ::std::os::raw::c_short,
        bwe_exc: *mut f32,
    );
}
extern "C" {
    pub fn enc_prm(
        coder_type: ::std::os::raw::c_short,
        param: *mut ::std::os::raw::c_int,
        param_lpc: *mut ::std::os::raw::c_int,
        st: *mut Encoder_State,
        L_Frame: ::std::os::raw::c_short,
        hm_cfg: *mut CONTEXT_HM_CONFIG,
        bits_param_lpc: *mut ::std::os::raw::c_short,
        no_param_lpc: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn enc_prm_rf(
        st: *mut Encoder_State,
        rf_frame_type: ::std::os::raw::c_short,
        fec_offset: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn dec_prm(
        coder_type: *mut ::std::os::raw::c_short,
        param: *mut ::std::os::raw::c_int,
        param_lpc: *mut ::std::os::raw::c_int,
        total_nbbits: *mut Word16,
        st: *mut Decoder_State,
        L_frame: ::std::os::raw::c_int,
        bitsRead: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn dec_prm_core(st: *mut Decoder_State);
}
extern "C" {
    pub fn gauss_L2(
        h: *const f32,
        code: *mut f32,
        y2: *mut f32,
        y11: *mut f32,
        gain: *mut f32,
        g_corr: *mut f32,
        gain_pit: f32,
        tilt_code: f32,
        Aq: *const f32,
        formant_enh_num: f32,
        seed_acelp: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn gaus_L2_dec(
        code: *mut f32,
        tilt_code: f32,
        A: *const f32,
        formant_enh_num: f32,
        seed_acelp: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn predict_signal(
        excI: *const f32,
        excO: *mut f32,
        T0: ::std::os::raw::c_short,
        frac: ::std::os::raw::c_short,
        frac_max: ::std::os::raw::c_short,
        L_subfr: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn tcx_ltp_encode(
        tcxltp_on: ::std::os::raw::c_int,
        tcxOnly: ::std::os::raw::c_int,
        tcxMode: ::std::os::raw::c_int,
        L_frame: ::std::os::raw::c_int,
        L_subfr: ::std::os::raw::c_int,
        speech: *mut f32,
        speech_ltp: *mut f32,
        wsp: *mut f32,
        Top: ::std::os::raw::c_int,
        ltp_param: *mut ::std::os::raw::c_int,
        ltp_bits: *mut ::std::os::raw::c_int,
        pitch_int: *mut ::std::os::raw::c_int,
        pitch_fr: *mut ::std::os::raw::c_int,
        gain: *mut f32,
        pitch_int_past: *mut ::std::os::raw::c_int,
        pitch_fr_past: *mut ::std::os::raw::c_int,
        gain_past: *mut f32,
        norm_corr_past: *mut f32,
        last_core: ::std::os::raw::c_int,
        pitmin: ::std::os::raw::c_int,
        pitfr1: ::std::os::raw::c_int,
        pitfr2: ::std::os::raw::c_int,
        pitmax: ::std::os::raw::c_int,
        pitres: ::std::os::raw::c_int,
        pTransientDetection: *const TransientDetection,
        SideInfoOnly: ::std::os::raw::c_int,
        A: *mut f32,
        lpcorder: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tcx_ltp_post(
        tcxltp_on: ::std::os::raw::c_int,
        core: ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_int,
        L_frame_core: ::std::os::raw::c_int,
        delay: ::std::os::raw::c_int,
        sig: *mut f32,
        tcx_buf: *mut f32,
        tcx_buf_len: ::std::os::raw::c_short,
        bfi: ::std::os::raw::c_int,
        pitch_int: ::std::os::raw::c_int,
        pitch_fr: ::std::os::raw::c_int,
        gain: f32,
        pitch_int_past: *mut ::std::os::raw::c_int,
        pitch_fr_past: *mut ::std::os::raw::c_int,
        gain_past: *mut f32,
        filtIdx_past: *mut ::std::os::raw::c_int,
        pitres: ::std::os::raw::c_int,
        pitres_past: *mut ::std::os::raw::c_int,
        damping: f32,
        SideInfoOnly: ::std::os::raw::c_int,
        mem_in: *mut f32,
        mem_out: *mut f32,
        bitrate: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tcx_ltp_decode_params(
        ltp_param: *mut ::std::os::raw::c_int,
        pitch_int: *mut ::std::os::raw::c_int,
        pitch_fr: *mut ::std::os::raw::c_int,
        gain: *mut f32,
        pitmin: ::std::os::raw::c_int,
        pitfr1: ::std::os::raw::c_int,
        pitfr2: ::std::os::raw::c_int,
        pitmax: ::std::os::raw::c_int,
        pitres: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn enc_lsf_tcxlpc(
        indices: *mut *mut ::std::os::raw::c_int,
        st: *mut Encoder_State,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msvq_enc(
        cb: *const *const f32,
        dims: *const ::std::os::raw::c_int,
        offs: *const ::std::os::raw::c_int,
        u: *mut f32,
        levels: *const ::std::os::raw::c_int,
        maxC: ::std::os::raw::c_int,
        stages: ::std::os::raw::c_int,
        w: *mut f32,
        N: ::std::os::raw::c_int,
        maxN: ::std::os::raw::c_int,
        Idx: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn msvq_dec(
        cb: *const *const f32,
        dims: *const ::std::os::raw::c_int,
        offs: *const ::std::os::raw::c_int,
        stages: ::std::os::raw::c_int,
        N: ::std::os::raw::c_int,
        maxN: ::std::os::raw::c_int,
        Idx: *const ::std::os::raw::c_int,
        uq: *mut f32,
        uq_ind: *mut Word16,
    );
}
extern "C" {
    pub fn PulseResynchronization(
        src_exc: *const f32,
        dst_exc: *mut f32,
        nFrameLength: ::std::os::raw::c_int,
        nSubframes: ::std::os::raw::c_int,
        pitchStart: f32,
        pitchEnd: f32,
    );
}
extern "C" {
    pub fn con_acelp(
        A: *mut f32,
        coder_type: ::std::os::raw::c_int,
        synth: *mut f32,
        pT: *mut ::std::os::raw::c_int,
        pgainT: *mut f32,
        stab_fac: f32,
        st: *mut Decoder_State,
        pitch_buffer: *mut f32,
        voice_factors: *mut f32,
        bwe_exc: *mut f32,
    );
}
extern "C" {
    pub fn con_tcx(st: *mut Decoder_State, synth: *mut f32);
}
extern "C" {
    pub fn tcxlpc_get_cdk(coder_type: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lsf_msvq_ma_encprm(
        st: *mut Encoder_State,
        param_lpc: *mut ::std::os::raw::c_int,
        core: ::std::os::raw::c_int,
        acelp_mode: ::std::os::raw::c_int,
        acelp_midLpc: ::std::os::raw::c_int,
        bits_param_lpc: *mut ::std::os::raw::c_short,
        no_indices: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lsf_msvq_ma_decprm(
        st: *mut Decoder_State,
        param_lpc: *mut ::std::os::raw::c_int,
        core: ::std::os::raw::c_int,
        acelp_mode: ::std::os::raw::c_int,
        acelp_midLpc: ::std::os::raw::c_int,
        narrowBand: ::std::os::raw::c_int,
        sr_core: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dec_lsf_tcxlpc(
        st: *mut Decoder_State,
        indices: *mut *mut ::std::os::raw::c_int,
        narrowband: ::std::os::raw::c_int,
        cdk: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn D_lsf_tcxlpc(
        indices: *const ::std::os::raw::c_int,
        lsf_q: *mut f32,
        lsp_q_ind: *mut Word16,
        narrowband: ::std::os::raw::c_int,
        cdk: ::std::os::raw::c_int,
        mem_MA: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lsf_update_memory(
        narrowband: ::std::os::raw::c_int,
        qlsf: *const f32,
        old_mem_MA: *mut f32,
        mem_MA: *mut f32,
    );
}
extern "C" {
    pub fn Q_lsf_tcxlpc(
        lsf: *mut f32,
        lsf_q: *mut f32,
        lsp_q_ind: *mut Word16,
        indices: *mut ::std::os::raw::c_int,
        narrowband: ::std::os::raw::c_int,
        cdk: ::std::os::raw::c_int,
        mem_MA: *mut f32,
        coder_type: ::std::os::raw::c_int,
        Bin_Ener: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn E_LPC_lsp_unweight(
        lsp_w: *mut f32,
        lsp_uw: *mut f32,
        lsf_uw: *mut f32,
        inv_gamma: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lsf_ind_is_active(
        lsf_q_ind: *const Word16,
        means: *const f32,
        bandwidth: ::std::os::raw::c_int,
        cdk: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn midlsf_enc(
        qlsf0: *mut f32,
        qlsf1: *mut f32,
        lsf: *const f32,
        idx: *mut ::std::os::raw::c_short,
        N: ::std::os::raw::c_int,
        Bin_Ener: *mut f32,
        narrowBand: ::std::os::raw::c_int,
        sr_core: ::std::os::raw::c_int,
        coder_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn midlsf_dec(
        qlsf0: *mut f32,
        qlsf1: *mut f32,
        idx: ::std::os::raw::c_short,
        qlsf: *mut f32,
        N: ::std::os::raw::c_int,
        coder_type: ::std::os::raw::c_int,
        mid_lsf_int: *mut ::std::os::raw::c_short,
        prev_bfi: ::std::os::raw::c_short,
        safety_net: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn lsf_end_enc(
        st: *mut Encoder_State,
        lsf: *const f32,
        qlsf: *mut f32,
        mem_AR: *mut f32,
        mem_MA: *mut f32,
        nBits: ::std::os::raw::c_short,
        coder_type_org: ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
        Bin_Ener: *mut f32,
        int_fs: f32,
        core_brate: ::std::os::raw::c_long,
        streaklimit: *mut f32,
        pstreaklen: *mut ::std::os::raw::c_short,
        force_sf: ::std::os::raw::c_short,
        rf_flag: ::std::os::raw::c_short,
        mode2_flag: ::std::os::raw::c_short,
        lpc_param: *mut ::std::os::raw::c_int,
        no_stages: *mut ::std::os::raw::c_short,
        bits_param_lpc: *mut ::std::os::raw::c_short,
        coder_type_raw: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn lsf_end_dec(
        st: *mut Decoder_State,
        coder_type_org: ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
        nBits: ::std::os::raw::c_short,
        qlsf: *mut f32,
        mem_AR: *mut f32,
        mem_MA: *mut f32,
        int_fs: f32,
        core_brate: ::std::os::raw::c_long,
        p_offset_scale1: *mut ::std::os::raw::c_uint,
        p_offset_scale2: *mut ::std::os::raw::c_uint,
        p_offset_scale1_p: *mut ::std::os::raw::c_uint,
        p_offset_scale2_p: *mut ::std::os::raw::c_uint,
        p_no_scales: *mut ::std::os::raw::c_short,
        p_no_scales_p: *mut ::std::os::raw::c_short,
        safety_net: *mut ::std::os::raw::c_short,
        lpc_param: *mut ::std::os::raw::c_int,
        LSF_Q_prediction: *mut ::std::os::raw::c_short,
        nb_indices: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn find_pred_mode(
        coder_type: ::std::os::raw::c_short,
        bwidth: ::std::os::raw::c_short,
        int_fs: f32,
        p_mode_lvq: *mut ::std::os::raw::c_short,
        p_mode_lvq_p: *mut ::std::os::raw::c_short,
        core_brate: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn lpc_quantization(
        st: *mut Encoder_State,
        core: ::std::os::raw::c_int,
        lpcQuantization: ::std::os::raw::c_int,
        lsf_old: *mut f32,
        lsp: *const f32,
        lspmid: *const f32,
        lsp_q: *mut f32,
        lsf_q: *mut f32,
        lspmid_q: *mut f32,
        mem_MA: *mut f32,
        mem_AR: *mut f32,
        narrowBand: ::std::os::raw::c_int,
        coder_type: ::std::os::raw::c_short,
        acelp_midLpc: ::std::os::raw::c_int,
        param_lpc: *mut ::std::os::raw::c_int,
        nbits_lpc: *mut ::std::os::raw::c_int,
        seed_acelp: *mut ::std::os::raw::c_short,
        sr_core: ::std::os::raw::c_int,
        Bin_Ener: *mut f32,
        Bin_Ener_old: *mut f32,
        bits_param_lpc: *mut ::std::os::raw::c_short,
        no_param_lpc: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn lpc_unquantize(
        st: *mut Decoder_State,
        lsfold: *mut f32,
        lspold: *mut f32,
        lsf: *mut f32,
        lsp: *mut f32,
        lpcQuantization: ::std::os::raw::c_int,
        param_lpc: *mut ::std::os::raw::c_int,
        numlpc: ::std::os::raw::c_int,
        core: ::std::os::raw::c_int,
        mem_MA: *mut f32,
        lspmid: *mut f32,
        lsfmid: *mut f32,
        coder_type: ::std::os::raw::c_short,
        acelp_midLpc: ::std::os::raw::c_int,
        narrow_band: ::std::os::raw::c_int,
        seed_acelp: *mut ::std::os::raw::c_short,
        sr_core: ::std::os::raw::c_int,
        mid_lsf_int: *mut ::std::os::raw::c_short,
        prev_bfi: ::std::os::raw::c_short,
        LSF_Q_prediction: *mut ::std::os::raw::c_short,
        safety_net: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn dlpc_bfi(
        L_frame: ::std::os::raw::c_int,
        lsf_q: *mut f32,
        lsfold: *const f32,
        last_good: ::std::os::raw::c_short,
        nbLostCmpt: ::std::os::raw::c_short,
        mem_MA: *mut f32,
        mem_AR: *mut f32,
        stab_fac: *mut f32,
        lsf_adaptive_mean: *mut f32,
        numlpc: ::std::os::raw::c_int,
        lsf_cng: *mut f32,
        plcBackgroundNoiseUpdated: ::std::os::raw::c_int,
        lsf_q_cng: *mut f32,
        old_lsf_q_cng: *mut f32,
        lsfBase: *const f32,
    );
}
extern "C" {
    pub fn decode_lpc_stoch(
        ptr: *mut ::std::os::raw::c_short,
        numlpc: ::std::os::raw::c_int,
        param_lpc: *mut ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        lpc_quant_type: ::std::os::raw::c_int,
        isf_model: *mut ::std::os::raw::c_short,
        isf_end_nbits: *mut ::std::os::raw::c_int,
        isf_mid_nbits: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lsfi_enc(
        qisf0: *mut f32,
        qisf1: *mut f32,
        isf: *mut f32,
        idx: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn lsfi_dec(qisf0: *mut f32, qisf1: *mut f32, idx: ::std::os::raw::c_short, qisf: *mut f32);
}
extern "C" {
    pub fn lsf_dec_bfi(
        codec_mode: ::std::os::raw::c_short,
        lsf: *mut f32,
        lsfold: *const f32,
        lsf_adaptive_mean: *mut f32,
        lsfBase: *const f32,
        mem_MA: *mut f32,
        mem_AR: *mut f32,
        stab_fac: f32,
        last_coder_type: ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
        last_good: ::std::os::raw::c_short,
        nbLostCmpt: ::std::os::raw::c_short,
        plcBackgroundNoiseUpdated: ::std::os::raw::c_int,
        lsf_q_cng: *mut f32,
        lsf_cng: *mut f32,
        old_lsf_q_cng: *mut f32,
        Last_GSC_pit_band_idx: ::std::os::raw::c_short,
        Opt_AMR_WB: ::std::os::raw::c_short,
        MODE1_bwidth: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn PlcGetlsfBase(
        lpcQuantization: ::std::os::raw::c_int,
        narrowBand: ::std::os::raw::c_int,
        sr_core: ::std::os::raw::c_int,
    ) -> *const f32;
}
extern "C" {
    pub fn Unified_weighting(
        Bin_Ener_128: *mut f32,
        lsf: *const f32,
        w: *mut f32,
        narrowBand: ::std::os::raw::c_short,
        unvoiced: ::std::os::raw::c_short,
        sr_core: ::std::os::raw::c_short,
        order: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vad_init(st: *mut T_CldfbVadState) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn vad_proc(
        realValues: *mut [f32; 60usize],
        imagValues: *mut [f32; 60usize],
        sb_power: *mut f32,
        numBands: ::std::os::raw::c_int,
        vad_st: *mut T_CldfbVadState,
        cldfb_addition: *mut ::std::os::raw::c_short,
        vada_flag: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn subband_FFT(Sr: *mut [f32; 60usize], Si: *mut [f32; 60usize], spec_amp: *mut f32);
}
extern "C" {
    pub fn update_decision(
        st: *mut T_CldfbVadState,
        snr: f32,
        tsnr: f32,
        frame_energy: f32,
        high_eng: f32,
        vad_flag: ::std::os::raw::c_int,
        music_backgound_f: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn frame_spec_dif_cor_rate(
        spec_amp: *mut f32,
        pre_spec_low_dif: *mut f32,
        f_tonality_rate: *mut f32,
    );
}
extern "C" {
    pub fn ltd_stable(
        frames_power: *mut f32,
        ltd_stable_rate: *mut f32,
        frame_energy: f32,
        frameloop: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SNR_calc(
        frame_sb_energy: *mut f32,
        sb_bg_energy: *mut f32,
        t_bg_energy: f32,
        snr: *mut f32,
        tsnr: *mut f32,
        frame_energy: f32,
        bandwidth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn background_update(
        st: *mut T_CldfbVadState,
        frame_energy: f32,
        update_flag: ::std::os::raw::c_int,
        music_backgound_f: ::std::os::raw::c_int,
        snr: f32,
    );
}
extern "C" {
    pub fn bg_music_decision(
        st: *mut T_CldfbVadState,
        music_backgound_f: *mut ::std::os::raw::c_int,
        frame_energy: f32,
    );
}
extern "C" {
    pub fn est_energy(
        sb_power: *mut f32,
        frame_sb_energy: *mut f32,
        p_frame_energy: *mut f32,
        p_frame_energy2: *mut f32,
        p_high_energy: *mut f32,
        bw: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn spec_center(spec_power: *mut f32, sp_center: *mut f32, bandwidth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn spec_flatness(spec_amp: *mut f32, smooth_spec_amp: *mut f32, sSFM: *mut f32);
}
extern "C" {
    pub fn vad_decision(
        st: *mut T_CldfbVadState,
        snr: f32,
        tsnr: f32,
        snr_flux: f32,
        lt_snr: f32,
        lt_snr_org: f32,
        lf_snr: f32,
        frame_energy: f32,
        music_backgound_f: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn comvad_decision(
        st: *mut T_CldfbVadState,
        snr: f32,
        tsnr: f32,
        snr_flux: f32,
        lt_snr: f32,
        lt_snr_org: f32,
        lf_snr: f32,
        frame_energy: f32,
        music_backgound_f: ::std::os::raw::c_int,
        cldfb_addition: *mut ::std::os::raw::c_short,
        vada_flag: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn calc_snr_flux(tsnr: f32, pre_snr: *mut f32, snr_flux: *mut f32);
}
extern "C" {
    pub fn calc_lt_snr(
        lt_snr_org: *mut f32,
        lt_snr: *mut f32,
        fg_energy: f32,
        fg_energy_count: ::std::os::raw::c_int,
        bg_energy: f32,
        bg_energy_count: ::std::os::raw::c_int,
        bw_index: ::std::os::raw::c_int,
        lt_noise_sp_center0: f32,
    );
}
extern "C" {
    pub fn calc_lf_snr(
        lf_snr_smooth: *mut f32,
        lf_snr: *mut f32,
        l_speech_snr: f32,
        l_speech_snr_count: ::std::os::raw::c_int,
        l_silence_snr: f32,
        l_silence_snr_count: ::std::os::raw::c_int,
        fg_energy_count: ::std::os::raw::c_int,
        bg_energy_count: ::std::os::raw::c_int,
        bw_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn construct_snr_thresh(
        sp_center: *mut f32,
        snr_flux: f32,
        lt_snr: f32,
        lf_snr: f32,
        continuous_speech_num: ::std::os::raw::c_int,
        continuous_noise_num: ::std::os::raw::c_int,
        fg_energy_est_start: ::std::os::raw::c_int,
        bw_index: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn createFdCngCom(hFdCngCom: *mut HANDLE_FD_CNG_COM);
}
extern "C" {
    pub fn deleteFdCngCom(hFdCngCom: *mut HANDLE_FD_CNG_COM);
}
extern "C" {
    pub fn initFdCngCom(hs: HANDLE_FD_CNG_COM, scale: f32);
}
extern "C" {
    pub fn initPartitions(
        part_in: *const ::std::os::raw::c_int,
        npart_in: ::std::os::raw::c_int,
        startBand: ::std::os::raw::c_int,
        stopBand: ::std::os::raw::c_int,
        part_out: *mut ::std::os::raw::c_int,
        npart_out: *mut ::std::os::raw::c_int,
        midband: *mut ::std::os::raw::c_int,
        psize: *mut f32,
        psize_inv: *mut f32,
        stopBandFR: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn minimum_statistics(
        len: ::std::os::raw::c_int,
        lenFFT: ::std::os::raw::c_int,
        psize: *mut f32,
        msPeriodog: *mut f32,
        msNoiseFloor: *mut f32,
        msNoiseEst: *mut f32,
        msAlpha: *mut f32,
        msPsd: *mut f32,
        msPsdFirstMoment: *mut f32,
        msPsdSecondMoment: *mut f32,
        msMinBuf: *mut f32,
        msBminWin: *mut f32,
        msBminSubWin: *mut f32,
        msCurrentMin: *mut f32,
        msCurrentMinOut: *mut f32,
        msCurrentMinSubWindow: *mut f32,
        msLocalMinFlag: *mut ::std::os::raw::c_int,
        msNewMinFlag: *mut ::std::os::raw::c_int,
        msPeriodogBuf: *mut f32,
        msPeriodogBufPtr: *mut ::std::os::raw::c_int,
        st: HANDLE_FD_CNG_COM,
    );
}
extern "C" {
    pub fn generate_comfort_noise_enc(stcod: *mut Encoder_State);
}
extern "C" {
    pub fn generate_comfort_noise_dec(
        bufferReal: *mut *mut f32,
        bufferImag: *mut *mut f32,
        stdec: *mut Decoder_State,
    );
}
extern "C" {
    pub fn generate_comfort_noise_dec_hf(
        bufferReal: *mut *mut f32,
        bufferImag: *mut *mut f32,
        stdec: *mut Decoder_State,
    );
}
extern "C" {
    pub fn generate_masking_noise(
        timeDomainBuffer: *mut f32,
        st: HANDLE_FD_CNG_COM,
        length: ::std::os::raw::c_short,
        core: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn generate_masking_noise_update_seed(st: HANDLE_FD_CNG_COM);
}
extern "C" {
    pub fn generate_masking_noise_mdct(mdctBuffer: *mut f32, st: HANDLE_FD_CNG_COM);
}
extern "C" {
    pub fn apply_scale(
        scale: *mut f32,
        bandwidth: ::std::os::raw::c_int,
        bitrate: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn compress_range(in_: *mut f32, out: *mut f32, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn expand_range(in_: *mut f32, out: *mut f32, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn bandcombinepow(
        bandpow: *mut f32,
        nband: ::std::os::raw::c_int,
        part: *mut ::std::os::raw::c_int,
        npart: ::std::os::raw::c_int,
        psize_inv: *mut f32,
        partpow: *mut f32,
    );
}
extern "C" {
    pub fn scalebands(
        partpow: *mut f32,
        part: *mut ::std::os::raw::c_int,
        npart: ::std::os::raw::c_int,
        midband: *mut ::std::os::raw::c_int,
        nFFTpart: ::std::os::raw::c_int,
        nband: ::std::os::raw::c_int,
        bandpow: *mut f32,
        flag_fft_en: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn getmidbands(
        part: *mut ::std::os::raw::c_int,
        npart: ::std::os::raw::c_int,
        midband: *mut ::std::os::raw::c_int,
        psize: *mut f32,
        psize_inv: *mut f32,
    );
}
extern "C" {
    pub fn AnalysisSTFT(timeDomainInput: *const f32, fftBuffer: *mut f32, st: HANDLE_FD_CNG_COM);
}
extern "C" {
    pub fn SynthesisSTFT(
        fftBuffer: *mut f32,
        timeDomainOutput: *mut f32,
        olapBuffer: *mut f32,
        olapWin: *const f32,
        tcx_transition: ::std::os::raw::c_int,
        st: HANDLE_FD_CNG_COM,
    );
}
extern "C" {
    pub fn rand_gauss(x: *mut f32, seed: *mut ::std::os::raw::c_short);
}
extern "C" {
    pub fn lpc_from_spectrum(
        powspec: *mut f32,
        start: ::std::os::raw::c_int,
        stop: ::std::os::raw::c_int,
        fftlen: ::std::os::raw::c_int,
        fftSineTab: *const f32,
        A: *mut f32,
        preemph_fac: f32,
    );
}
extern "C" {
    pub fn createFdCngDec(hFdCngDec: *mut HANDLE_FD_CNG_DEC);
}
extern "C" {
    pub fn deleteFdCngDec(hFdCngDec: *mut HANDLE_FD_CNG_DEC);
}
extern "C" {
    pub fn initFdCngDec(hs: HANDLE_FD_CNG_DEC, scale: f32);
}
extern "C" {
    pub fn configureFdCngDec(
        hs: HANDLE_FD_CNG_DEC,
        bandwidth: ::std::os::raw::c_short,
        bitrate: ::std::os::raw::c_int,
        L_frame: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn configure_noise_estimation_dec(st: HANDLE_FD_CNG_DEC);
}
extern "C" {
    pub fn ApplyFdCng(
        timeDomainInput: *mut f32,
        realBuffer: *mut *mut f32,
        imagBuffer: *mut *mut f32,
        st: HANDLE_FD_CNG_DEC,
        m_frame_type: ::std::os::raw::c_uchar,
        stdec: *mut Decoder_State,
        concealWholeFrame: ::std::os::raw::c_int,
        is_music: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn perform_noise_estimation_dec(timeDomainInput: *const f32, st: HANDLE_FD_CNG_DEC);
}
extern "C" {
    pub fn FdCng_decodeSID(st: *mut Decoder_State);
}
extern "C" {
    pub fn FdCng_exc(
        hs: HANDLE_FD_CNG_COM,
        CNG_mode: *mut ::std::os::raw::c_short,
        L_frame: ::std::os::raw::c_short,
        lsp_old: *mut f32,
        first_CNG: ::std::os::raw::c_short,
        lsp_CNG: *mut f32,
        Aq: *mut f32,
        lsp_new: *mut f32,
        lsf_new: *mut f32,
        exc: *mut f32,
        exc2: *mut f32,
        bwe_exc: *mut f32,
    );
}
extern "C" {
    pub fn noisy_speech_detection(
        vad: ::std::os::raw::c_short,
        ftimeInPtr: *const f32,
        frameSize: ::std::os::raw::c_int,
        msNoiseEst: *const f32,
        psize: *const f32,
        nFFTpart: ::std::os::raw::c_int,
        lp_noise: *mut f32,
        lp_speech: *mut f32,
        flag_noisy_speech: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn createFdCngEnc(hFdCngEnc: *mut HANDLE_FD_CNG_ENC);
}
extern "C" {
    pub fn deleteFdCngEnc(hFdCngEnc: *mut HANDLE_FD_CNG_ENC);
}
extern "C" {
    pub fn configureFdCngEnc(
        hs: HANDLE_FD_CNG_ENC,
        bandwidth: ::std::os::raw::c_short,
        bitrate: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn initFdCngEnc(hs: HANDLE_FD_CNG_ENC, input_Fs: ::std::os::raw::c_int, scale: f32);
}
extern "C" {
    pub fn resetFdCngEnc(st: *mut Encoder_State);
}
extern "C" {
    pub fn perform_noise_estimation_enc(
        band_energies: *mut f32,
        enerBuffer: *mut f32,
        st: HANDLE_FD_CNG_ENC,
    );
}
extern "C" {
    pub fn AdjustFirstSID(
        npart: ::std::os::raw::c_int,
        msPeriodog: *mut f32,
        energy_ho: *mut f32,
        msNoiseEst: *mut f32,
        msNoiseEst_old: *mut f32,
        active_frame_counter: *mut ::std::os::raw::c_short,
        stcod: *mut Encoder_State,
    );
}
extern "C" {
    pub fn FdCng_encodeSID(st: HANDLE_FD_CNG_ENC, corest: *mut Encoder_State, preemph_fac: f32);
}
extern "C" {
    pub fn GetParameters(
        paramsBitMap: *const ParamsBitMap,
        nParams: ::std::os::raw::c_int,
        pParameter: *const ::std::os::raw::c_void,
        pStream: *mut *mut ::std::os::raw::c_int,
        pnSize: *mut ::std::os::raw::c_int,
        pnBits: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SetParameters(
        paramsBitMap: *const ParamsBitMap,
        nParams: ::std::os::raw::c_int,
        pParameter: *mut ::std::os::raw::c_void,
        pStream: *mut *const ::std::os::raw::c_int,
        pnSize: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WriteToBitstream(
        paramsBitMap: *const ParamsBitMap,
        nParams: ::std::os::raw::c_int,
        pStream: *mut *const ::std::os::raw::c_int,
        pnSize: *mut ::std::os::raw::c_int,
        st: *mut Encoder_State,
        pnBits: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ReadFromBitstream(
        paramsBitMap: *const ParamsBitMap,
        nArrayLength: ::std::os::raw::c_int,
        st: *mut Decoder_State,
        pStream: *mut *mut ::std::os::raw::c_int,
        pnSize: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GetTnsFilterOrder(
        p: *const ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn SetTnsFilterOrder(
        p: *mut ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GetNumOfTnsFilters(
        p: *const ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn SetNumOfTnsFilters(
        p: *mut ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GetTnsEnabled(
        p: *const ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn SetTnsEnabled(
        p: *mut ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GetTnsEnabledSingleFilter(
        p: *const ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn SetTnsEnabledSingleFilter(
        p: *mut ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GetTnsFilterCoeff(
        p: *const ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn SetTnsFilterCoeff(
        p: *mut ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GetSWBTCX10TnsFilterCoeffBits(
        value: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EncodeSWBTCX10TnsFilterCoeff(
        value: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DecodeSWBTCX10TnsFilterCoeff(
        st: *mut Decoder_State,
        index: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetSWBTCX20TnsFilterCoeffBits(
        value: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EncodeSWBTCX20TnsFilterCoeff(
        value: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DecodeSWBTCX20TnsFilterCoeff(
        st: *mut Decoder_State,
        index: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetWBTCX20TnsFilterCoeffBits(
        value: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EncodeWBTCX20TnsFilterCoeff(
        value: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DecodeWBTCX20TnsFilterCoeff(
        st: *mut Decoder_State,
        index: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetTnsFilterOrderBitsSWBTCX10(
        value: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EncodeTnsFilterOrderSWBTCX10(
        value: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DecodeTnsFilterOrderSWBTCX10(
        st: *mut Decoder_State,
        index: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetTnsFilterOrderBitsSWBTCX20(
        value: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EncodeTnsFilterOrderSWBTCX20(
        value: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DecodeTnsFilterOrderSWBTCX20(
        st: *mut Decoder_State,
        index: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetTnsFilterOrderBits(
        value: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EncodeTnsFilterOrder(
        value: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DecodeTnsFilterOrder(
        st: *mut Decoder_State,
        index: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ResetTnsData(pTnsData: *mut STnsData);
}
extern "C" {
    pub fn ClearTnsFilterCoefficients(pTnsFilter: *mut STnsFilter);
}
extern "C" {
    pub fn InitTnsConfiguration(
        nSampleRate: ::std::os::raw::c_int,
        frameLength: ::std::os::raw::c_int,
        pTnsConfig: *mut STnsConfig,
        igfStopFreq: ::std::os::raw::c_int,
        bitrate: ::std::os::raw::c_int,
    ) -> TNS_ERROR;
}
extern "C" {
    pub fn DetectTnsFilt(
        pTnsConfig: *const STnsConfig,
        pSpectrum: *const f32,
        pTnsData: *mut STnsData,
        predictionGain: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ApplyTnsFilter(
        pTnsConfig: *const STnsConfig,
        pTnsData: *const STnsData,
        spectrum: *mut f32,
        fIsAnalysis: ::std::os::raw::c_int,
    ) -> TNS_ERROR;
}
extern "C" {
    pub fn ITF_Detect(
        pSpectrum: *const f32,
        startLine: ::std::os::raw::c_short,
        stopLine: ::std::os::raw::c_short,
        maxOrder: ::std::os::raw::c_int,
        A: *mut f32,
        predictionGain: *mut f32,
        curr_order: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ITF_Apply(
        spectrum: *mut f32,
        startLine: ::std::os::raw::c_short,
        stopLine: ::std::os::raw::c_short,
        A: *const f32,
        curr_order: ::std::os::raw::c_int,
    ) -> TNS_ERROR;
}
extern "C" {
    pub fn EncodeTnsData(
        pTnsConfig: *const STnsConfig,
        pTnsData: *const STnsData,
        stream: *mut ::std::os::raw::c_int,
        pnSize: *mut ::std::os::raw::c_int,
        pnBits: *mut ::std::os::raw::c_int,
    ) -> TNS_ERROR;
}
extern "C" {
    pub fn DecodeTnsData(
        pTnsConfig: *const STnsConfig,
        stream: *const ::std::os::raw::c_int,
        pnSize: *mut ::std::os::raw::c_int,
        pTnsData: *mut STnsData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WriteTnsData(
        pTnsConfig: *const STnsConfig,
        stream: *const ::std::os::raw::c_int,
        pnSize: *mut ::std::os::raw::c_int,
        st: *mut Encoder_State,
        pnBits: *mut ::std::os::raw::c_int,
    ) -> TNS_ERROR;
}
extern "C" {
    pub fn ReadTnsData(
        pTnsConfig: *const STnsConfig,
        st: *mut Decoder_State,
        pnBits: *mut ::std::os::raw::c_int,
        stream: *mut ::std::os::raw::c_int,
        pnSize: *mut ::std::os::raw::c_int,
    ) -> TNS_ERROR;
}
extern "C" {
    pub fn cldfbAnalysis(
        timeIn: *const f32,
        realBuffer: *mut *mut f32,
        imagBuffer: *mut *mut f32,
        samplesToProcess: ::std::os::raw::c_int,
        h_cldfb: HANDLE_CLDFB_FILTER_BANK,
    );
}
extern "C" {
    pub fn cldfbSynthesis(
        realBuffer: *mut *mut f32,
        imagBuffer: *mut *mut f32,
        timeOut: *mut f32,
        samplesToProcess: ::std::os::raw::c_int,
        h_cldfb: HANDLE_CLDFB_FILTER_BANK,
    );
}
extern "C" {
    pub fn analysisCldfbEncoder(
        st: *mut Encoder_State,
        timeIn: *const f32,
        samplesToProcess: ::std::os::raw::c_int,
        realBuffer: *mut [f32; 60usize],
        imagBuffer: *mut [f32; 60usize],
        ppBuf_Ener: *mut f32,
    );
}
extern "C" {
    pub fn openCldfb(
        h_cldfb: *mut HANDLE_CLDFB_FILTER_BANK,
        type_: CLDFB_TYPE,
        samplerate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resampleCldfb(hs: HANDLE_CLDFB_FILTER_BANK, newSamplerate: ::std::os::raw::c_int);
}
extern "C" {
    pub fn cldfb_save_memory(hs: HANDLE_CLDFB_FILTER_BANK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cldfb_restore_memory(hs: HANDLE_CLDFB_FILTER_BANK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cldfb_reset_memory(hs: HANDLE_CLDFB_FILTER_BANK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deleteCldfb(h_cldfb: *mut HANDLE_CLDFB_FILTER_BANK);
}
extern "C" {
    pub fn fft_cldfb(data: *mut f32, size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn BITS_ALLOC_init_config_acelp(
        bit_rate: ::std::os::raw::c_int,
        narrowBand: ::std::os::raw::c_int,
        nb_subfr: ::std::os::raw::c_int,
        acelp_cfg: *mut ACELP_config,
    );
}
extern "C" {
    pub fn BITS_ALLOC_config_acelp(
        bits_frame: ::std::os::raw::c_int,
        coder_type: ::std::os::raw::c_short,
        acelp_cfg: *mut ACELP_config,
        narrowband: ::std::os::raw::c_short,
        nb_subfr: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn FEC_clas_estim(
        syn: *const f32,
        pitch: *const f32,
        L_frame: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
        codec_mode: ::std::os::raw::c_short,
        mem_syn_clas_estim: *mut f32,
        clas: *mut ::std::os::raw::c_short,
        lp_speech: *mut f32,
        bitrate: ::std::os::raw::c_long,
        Opt_AMR_WB: ::std::os::raw::c_short,
        decision_hyst: *mut ::std::os::raw::c_short,
        locattack: *mut ::std::os::raw::c_short,
        UV_cnt: *mut ::std::os::raw::c_short,
        LT_UV_cnt: *mut f32,
        Last_ener: *mut f32,
        amr_io_class: *mut ::std::os::raw::c_short,
        lt_diff_etot: *mut f32,
        class_para: *mut f32,
        LTP_Gain: f32,
        narrowBand: ::std::os::raw::c_int,
        mode: SIGNAL_CLASSIFIER_MODE,
        bfi: ::std::os::raw::c_int,
        preemph_fac: f32,
        tcxonly: ::std::os::raw::c_int,
        last_core_brate: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn InitTransientDetection(
        nFrameLength: ::std::os::raw::c_int,
        nTCXDelay: ::std::os::raw::c_int,
        pTransientDetection: *mut TransientDetection,
    );
}
extern "C" {
    pub fn RunTransientDetection(
        input: *const f32,
        nSamplesAvailable: ::std::os::raw::c_int,
        pTransientDetection: *mut TransientDetection,
    );
}
extern "C" {
    pub fn GetTCXAvgTemporalFlatnessMeasure(
        pTransientDetection: *const TransientDetection,
        nCurrentSubblocks: ::std::os::raw::c_int,
        nPrevSubblocks: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn GetTCXMaxenergyChange(
        pTransientDetection: *const TransientDetection,
        isTCX10: ::std::os::raw::c_int,
        nCurrentSubblocks: ::std::os::raw::c_int,
        nPrevSubblocks: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn SetTCXModeInfo(
        st: *mut Encoder_State,
        pTransientDetection: *const TransientDetection,
        tcxModeOverlap: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn TCX_MDCT(
        x: *const f32,
        y: *mut f32,
        l: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCX_MDST(
        x: *const f32,
        y: *mut f32,
        l: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCX_MDCT_Inverse(
        x: *mut f32,
        y: *mut f32,
        l: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn post_decoder(
        st: *mut Decoder_State,
        coder_type: ::std::os::raw::c_short,
        synth_buf: *mut f32,
        pit_gain: *const f32,
        pitch: *const ::std::os::raw::c_int,
        signal_out: *mut f32,
        bpf_noise_buf: *mut f32,
    );
}
extern "C" {
    pub fn bass_pf_enc(
        orig: *const f32,
        syn: *const f32,
        pitch_buf: *const f32,
        gainT_sf: *const f32,
        l_frame: ::std::os::raw::c_short,
        l_subfr_in: ::std::os::raw::c_short,
        mem_bpf: *mut f32,
        mem_error_bpf: *mut f32,
        gain_factor_param: *mut ::std::os::raw::c_int,
        mode: ::std::os::raw::c_short,
        mem_deemph_err: *mut f32,
        lp_ener: *mut f32,
    ) -> f32;
}
extern "C" {
    pub fn cldfb_synth_set_bandsToZero(
        st: *mut Decoder_State,
        rAnalysis: *mut *mut f32,
        iAnalysis: *mut *mut f32,
        nTimeSlots: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn longadd(
        a: *mut ::std::os::raw::c_ushort,
        b: *mut ::std::os::raw::c_ushort,
        lena: ::std::os::raw::c_int,
        lenb: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn longshiftright(
        a: *mut ::std::os::raw::c_ushort,
        b: ::std::os::raw::c_int,
        d: *mut ::std::os::raw::c_ushort,
        lena: ::std::os::raw::c_int,
        lend: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn longshiftleft(
        a: *mut ::std::os::raw::c_ushort,
        b: ::std::os::raw::c_int,
        d: *mut ::std::os::raw::c_ushort,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn open_decoder_LPD(
        st: *mut Decoder_State,
        bit_rate: ::std::os::raw::c_int,
        bandwidth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn update_decoder_LPD_cng(
        st: *mut Decoder_State,
        coder_type: ::std::os::raw::c_short,
        timeDomainBuffer: *mut f32,
        A: *mut f32,
        bpf_noise_buf: *mut f32,
    );
}
extern "C" {
    pub fn reconfig_decoder_LPD(
        st: *mut Decoder_State,
        bits_frame: ::std::os::raw::c_int,
        bandwidth: ::std::os::raw::c_int,
        bitrate: ::std::os::raw::c_int,
        L_frame_old: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mode_switch_decoder_LPD(
        st: *mut Decoder_State,
        bandwidth_in: ::std::os::raw::c_int,
        bitrate: ::std::os::raw::c_int,
        frame_size_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dec_acelp_tcx_frame(
        st: *mut Decoder_State,
        coder_type: *mut ::std::os::raw::c_short,
        concealWholeFrame: *mut ::std::os::raw::c_short,
        output: *mut f32,
        bpf_noise_buf: *mut f32,
        pcmbufFB: *mut f32,
        bwe_exc_extended: *mut f32,
        voice_factors: *mut f32,
        pitch_buf: *mut f32,
    );
}
extern "C" {
    pub fn decoder_LPD(
        signal_out: *mut f32,
        signal_outFB: *mut f32,
        total_nbbits: *mut ::std::os::raw::c_short,
        st: *mut Decoder_State,
        bpf_noise_buf: *mut f32,
        bfi: ::std::os::raw::c_short,
        bitsRead: *mut ::std::os::raw::c_short,
        coder_type: *mut ::std::os::raw::c_short,
        param: *mut ::std::os::raw::c_int,
        pitch_buf: *mut f32,
        voice_factors: *mut f32,
        ptr_bwe_exc: *mut f32,
    );
}
extern "C" {
    pub fn tcxGetNoiseFillingTilt(
        A: *mut f32,
        L_frame: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        noiseTiltFactor: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcxFormantEnhancement(
        xn_buf: *mut f32,
        gainlpc: *mut f32,
        spectrum: *mut f32,
        L_frame: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tcxInvertWindowGrouping(
        tcx_cfg: *mut TCX_config,
        xn_buf: *mut f32,
        spectrum: *mut f32,
        L_frame: ::std::os::raw::c_int,
        fUseTns: ::std::os::raw::c_int,
        last_core: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
        frame_cnt: ::std::os::raw::c_int,
        bfi: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lerp(
        f: *mut f32,
        f_out: *mut f32,
        bufferNewSize: ::std::os::raw::c_int,
        bufferOldSize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn coderLookAheadInnovation(
        A: *const f32,
        pT: *mut ::std::os::raw::c_int,
        hPlc_Ext: HANDLE_PLC_ENC_EVS,
        speechLookAhead: *mut f32,
        old_exc: *mut f32,
        L_subfr: ::std::os::raw::c_int,
        L_frame: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn encoderSideLossSimulation(
        st: *mut Encoder_State,
        hPlc_Ext: HANDLE_PLC_ENC_EVS,
        isf_q: *mut f32,
        stab_fac: f32,
        calcOnlyISF: ::std::os::raw::c_int,
        L_frame: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn enc_prm_side_Info(hPlc_Ext: HANDLE_PLC_ENC_EVS, st: *mut Encoder_State);
}
extern "C" {
    pub fn GplcTcxEncSetup(st: *mut Encoder_State, hPlc_Ext: HANDLE_PLC_ENC_EVS);
}
extern "C" {
    pub fn encSideSpecPowDiffuseDetector(
        isf_ref: *mut f32,
        isf_con: *mut f32,
        sr_core: ::std::os::raw::c_int,
        prev_isf4_mean: *mut f32,
        sw: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn updateSpecPowDiffuseIdx(
        st: *mut Encoder_State,
        gain_pitch_buf: *const f32,
        gain_code_buf: *const f32,
    );
}
extern "C" {
    pub fn getLookAheadResSig(
        speechLookAhead: *mut f32,
        A: *const f32,
        res: *mut f32,
        L_frame: ::std::os::raw::c_int,
        L_subfr: ::std::os::raw::c_int,
        m: ::std::os::raw::c_int,
        numSubFrame: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn updatelsfForConcealment(decState: HANDLE_PLC_ENC_EVS, lsf: *mut f32);
}
extern "C" {
    pub fn getConcealedLP(
        memDecState: HANDLE_PLC_ENC_EVS,
        AqCon: *mut f32,
        xsfBase: *const f32,
        sr_core: f32,
        last_good: ::std::os::raw::c_int,
        L_frame: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn getConcealedlsf(
        memDecState: HANDLE_PLC_ENC_EVS,
        lsfBase: *const f32,
        L_frame: ::std::os::raw::c_int,
        last_good: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn RecLpcSpecPowDiffuseLc(
        ispq: *mut f32,
        isp_old: *mut f32,
        isfq: *mut f32,
        st: *mut Decoder_State,
        reset_q: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn modify_lsf(
        lsf: *mut f32,
        n: ::std::os::raw::c_short,
        sr_core: ::std::os::raw::c_int,
        reset_q: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn open_PLC_ENC_EVS(hPlcExt: HANDLE_PLC_ENC_EVS, sampleRate: ::std::os::raw::c_int);
}
extern "C" {
    pub fn gPLC_encInfo(
        self_: HANDLE_PLC_ENC_EVS,
        brate: ::std::os::raw::c_int,
        bwidth: ::std::os::raw::c_int,
        last_clas: ::std::os::raw::c_short,
        coder_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn resetTecDec(hTecDec: HANDLE_TEC_DEC);
}
extern "C" {
    pub fn updateTecBuf(
        pCldfbRealSrc: *mut *mut f32,
        pCldfbImagSrc: *mut *mut f32,
        pCldfbRealTgt: *mut *mut f32,
        pCldfbImagTgt: *mut *mut f32,
        noCols: ::std::os::raw::c_int,
        lowSubband: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn calcGainTemp_TBE(
        pCldfbRealSrc: *mut *mut f32,
        pCldfbImagSrc: *mut *mut f32,
        loBuffer: *mut f32,
        startPos: ::std::os::raw::c_int,
        stopPos: ::std::os::raw::c_int,
        lowSubband: ::std::os::raw::c_int,
        pGainTemp: *mut f32,
        code: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn procTecTfa_TBE(
        hb_synth: *mut f32,
        gain: *mut f32,
        flat_flag: ::std::os::raw::c_short,
        last_core: ::std::os::raw::c_short,
        L_subfr: ::std::os::raw::c_int,
        code: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn resetTecEnc(hTecEnc: HANDLE_TEC_ENC, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn calcHiEnvLoBuff(
        noCols: ::std::os::raw::c_int,
        pFreqBandTable: *const ::std::os::raw::c_int,
        nSfb: ::std::os::raw::c_int,
        pYBuf: *mut *mut f32,
        loBuf: *mut f32,
        hiTempEnv: *mut f32,
    );
}
extern "C" {
    pub fn calcLoEnvCheckCorrHiLo(
        noCols: ::std::os::raw::c_int,
        pFreqBandTable: *const ::std::os::raw::c_int,
        loBuf: *mut f32,
        loTempEnv: *mut f32,
        loTempEnv_ns: *mut f32,
        hiTempEnv: *mut f32,
        corr_flag: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tfaCalcEnv(shb_speech: *const f32, enr: *mut f32);
}
extern "C" {
    pub fn tfaEnc_TBE(
        enr: *mut f32,
        last_core: ::std::os::raw::c_short,
        voicing: *mut f32,
        pitch_buf: *mut f32,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn tecEnc_TBE(
        corrFlag: *mut ::std::os::raw::c_int,
        voicing: *const f32,
        coder_type: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn set_TEC_TFA_code(
        corrFlag: ::std::os::raw::c_short,
        tec_flag: *mut ::std::os::raw::c_short,
        tfa_flag: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn Damping_fact(
        coder_type: ::std::os::raw::c_short,
        nbLostCmpt: ::std::os::raw::c_int,
        last_good: ::std::os::raw::c_short,
        stab_fac: f32,
        lp_gainp: *mut f32,
        core: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn fer_energy(
        L_frame: ::std::os::raw::c_int,
        clas: ::std::os::raw::c_short,
        synth: *const f32,
        pitch: f32,
        enr: *mut f32,
        useOffset: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn getLevelSynDeemph(
        h1Init: *const f32,
        A: *const f32,
        lenLpcExc: ::std::os::raw::c_int,
        preemph_fac: f32,
        numLoops: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn genPlcFiltBWAdap(
        sr_core: ::std::os::raw::c_int,
        lpFiltAdapt: *mut f32,
        type_: ::std::os::raw::c_int,
        alpha: f32,
    );
}
extern "C" {
    pub fn highPassFiltering(
        last_good: ::std::os::raw::c_short,
        L_buffer: ::std::os::raw::c_int,
        exc2: *mut f32,
        hp_filt: *const f32,
        l_fir_fer: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GetPLCModeDecision(st: *mut Decoder_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addBassPostFilter(
        harm_timeIn: *const f32,
        samplesToProcess: ::std::os::raw::c_int,
        rAnalysis: *mut *mut f32,
        iAnalysis: *mut *mut f32,
        cldfb: HANDLE_CLDFB_FILTER_BANK,
    );
}
extern "C" {
    pub fn TonalMDCTConceal_Init(
        self_: TonalMDCTConcealPtr,
        samplesPerBlock: ::std::os::raw::c_uint,
        nSamplesCore: ::std::os::raw::c_uint,
        nScaleFactors: ::std::os::raw::c_uint,
        tcx_cfg: *mut TCX_config,
    ) -> TONALMDCTCONCEAL_ERROR;
}
extern "C" {
    pub fn TonalMDCTConceal_SaveFreqSignal(
        self_: TonalMDCTConcealPtr,
        mdctSpectrum: *const f32,
        numSamples: ::std::os::raw::c_uint,
        nNewSamplesCore: ::std::os::raw::c_uint,
        scaleFactors: *const f32,
    ) -> TONALMDCTCONCEAL_ERROR;
}
extern "C" {
    pub fn TonalMDCTConceal_UpdateState(
        self_: TonalMDCTConcealPtr,
        numSamples: ::std::os::raw::c_int,
        pitchLag: f32,
        badBlock: ::std::os::raw::c_int,
        tonalConcealmentActive: ::std::os::raw::c_int,
    ) -> TONALMDCTCONCEAL_ERROR;
}
extern "C" {
    pub fn TonalMDCTConceal_SaveTimeSignal(
        self_: TonalMDCTConcealPtr,
        timeSignal: *mut f32,
        numSamples: ::std::os::raw::c_uint,
    ) -> TONALMDCTCONCEAL_ERROR;
}
extern "C" {
    pub fn TonalMDCTConceal_Detect(
        self_: TonalMDCTConcealPtr,
        pitchLag: f32,
        umIndices: *mut ::std::os::raw::c_int,
    ) -> TONALMDCTCONCEAL_ERROR;
}
extern "C" {
    pub fn TonalMDCTConceal_Apply(
        self_: TonalMDCTConcealPtr,
        mdctSpectrum: *mut f32,
    ) -> TONALMDCTCONCEAL_ERROR;
}
extern "C" {
    pub fn TonalMDCTConceal_InsertNoise(
        self_: TonalMDCTConcealPtr,
        mdctSpectrum: *mut f32,
        tonalConcealmentActive: ::std::os::raw::c_int,
        pSeed: *mut ::std::os::raw::c_short,
        tiltCompFactor: f32,
        crossfadeGain: f32,
        crossOverFreq: ::std::os::raw::c_int,
    ) -> TONALMDCTCONCEAL_ERROR;
}
extern "C" {
    pub fn DetectTonalComponents(
        indexOfTonalPeak: *mut ::std::os::raw::c_ushort,
        lowerIndex: *mut ::std::os::raw::c_ushort,
        upperIndex: *mut ::std::os::raw::c_ushort,
        pNumIndexes: *mut ::std::os::raw::c_uint,
        lastPitchLag: f32,
        currentPitchLag: f32,
        lastMDCTSpectrum: *const f32,
        scaleFactors: *const f32,
        secondLastPowerSpectrum: *const f32,
        nSamples: ::std::os::raw::c_uint,
        nSamplesCore: ::std::os::raw::c_uint,
        floorPowerSpectrum: f32,
    );
}
extern "C" {
    pub fn RefineTonalComponents(
        indexOfTonalPeak: *mut ::std::os::raw::c_ushort,
        lowerIndex: *mut ::std::os::raw::c_ushort,
        upperIndex: *mut ::std::os::raw::c_ushort,
        phaseDiff: *mut f32,
        phases: *mut f32,
        pNumIndexes: *mut ::std::os::raw::c_uint,
        lastPitchLag: f32,
        currentPitchLag: f32,
        lastMDCTSpectrum: *const f32,
        scaleFactors: *const f32,
        secondLastPowerSpectrum: *const f32,
        nSamples: ::std::os::raw::c_uint,
        nSamplesCore: ::std::os::raw::c_uint,
        floorPowerSpectrum: f32,
    );
}
extern "C" {
    pub fn concealment_init(N: ::std::os::raw::c_int, _plcInfo: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn concealment_decode(
        pre_transient: ::std::os::raw::c_int,
        invkoef: *mut f32,
        _plcInfo: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn concealment_update(
        bfi: ::std::os::raw::c_int,
        core: ::std::os::raw::c_int,
        harmonic: ::std::os::raw::c_int,
        invkoef: *mut f32,
        _plcInfo: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn concealment_update2(
        outx_new: *mut f32,
        _plcInfo: *mut ::std::os::raw::c_void,
        FrameSize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn concealment_signal_tuning(
        bfi: ::std::os::raw::c_int,
        curr_mode: ::std::os::raw::c_int,
        outx_new: *mut f32,
        _plcInfo: *mut ::std::os::raw::c_void,
        nbLostCmpt: ::std::os::raw::c_int,
        pre_bfi: ::std::os::raw::c_int,
        OverlapBuf: *mut f32,
        past_core_mode: ::std::os::raw::c_int,
        outdata2: *mut f32,
        st: *mut Decoder_State,
    );
}
extern "C" {
    pub fn waveform_adj2(
        overlapbuf: *mut f32,
        outx_new: *mut f32,
        data_noise: *mut f32,
        outx_new_n1: *mut f32,
        nsapp_gain: *mut f32,
        nsapp_gain_n: *mut f32,
        recovery_gain: *mut f32,
        step_concealgain: f32,
        pitch: ::std::os::raw::c_int,
        Framesize: ::std::os::raw::c_int,
        delay: ::std::os::raw::c_int,
        bfi_cnt: ::std::os::raw::c_int,
        bfi: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SFM_Cal(fcoef: *const f32, n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn set_state(
        state: *mut ::std::os::raw::c_int,
        num: ::std::os::raw::c_int,
        N: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Shellsort_float(in_: *mut f32, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn RFFTN(
        afftData: *mut f32,
        trigPtr: *const f32,
        len: ::std::os::raw::c_int,
        isign: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DoFFT(re2: *mut f32, im2: *mut f32, length: ::std::os::raw::c_short);
}
extern "C" {
    pub fn getTcxonly(bitrate: ::std::os::raw::c_int) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn getTnsAllowed(
        bitrate: ::std::os::raw::c_int,
        igf: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn getCtxHm(
        bitrate: ::std::os::raw::c_int,
        rf_flag: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn getResq(bitrate: ::std::os::raw::c_int) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn getRestrictedMode(
        bitrate: ::std::os::raw::c_int,
        Opt_AMR_WB: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn getMdctWindowLength(fscale: f32) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn sr2fscale(sr: ::std::os::raw::c_int) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn getCoreSamplerateMode2(
        bitrate: ::std::os::raw::c_int,
        bandwidth: ::std::os::raw::c_int,
        rf_mode: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getTcxBandwidth(bandwidth: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn getIgfPresent(
        bitrate: ::std::os::raw::c_int,
        bandwidth: ::std::os::raw::c_int,
        rf_mode: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn getCnaPresent(
        bitrate: ::std::os::raw::c_int,
        bandwidth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn getTcxLtp(sr_core: ::std::os::raw::c_int) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn initPitchLagParameters(
        sr_core: ::std::os::raw::c_int,
        pit_min: *mut ::std::os::raw::c_int,
        pit_fr1: *mut ::std::os::raw::c_int,
        pit_fr1b: *mut ::std::os::raw::c_int,
        pit_fr2: *mut ::std::os::raw::c_int,
        pit_max: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn attenuateNbSpectrum(L_frame: ::std::os::raw::c_int, spectrum: *mut f32);
}
extern "C" {
    pub fn SetModeIndex(
        st: *mut Encoder_State,
        total_brate: ::std::os::raw::c_long,
        bwidth: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn getNumTcxCodedLines(bwidth: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn getTcxLpcShapedAri(
        total_brate: ::std::os::raw::c_int,
        bwidth: ::std::os::raw::c_short,
        rf_mode: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn IGFEncApplyMono(
        hInstance: IGF_ENC_INSTANCE_HANDLE,
        igfGridIdx: ::std::os::raw::c_int,
        st: *mut Encoder_State,
        pMDCTSpectrum: *mut f32,
        pPowerSpectrum: *mut f32,
        isTCX20: ::std::os::raw::c_int,
        isTNSActive: ::std::os::raw::c_int,
        last_core_acelp: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn IGFEncConcatenateBitstream(
        hInstance: IGF_ENC_INSTANCE_HANDLE,
        bsBits: ::std::os::raw::c_short,
        next_ind: *mut ::std::os::raw::c_short,
        nb_bits: *mut ::std::os::raw::c_short,
        ind_list: *mut Indice,
    );
}
extern "C" {
    pub fn IGFEncResetTCX10BitCounter(hInstance: IGF_ENC_INSTANCE_HANDLE);
}
extern "C" {
    pub fn IGFEncSetMode(
        hInstance: IGF_ENC_INSTANCE_HANDLE,
        bitRate: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        f_mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn IGFEncWriteBitstream(
        hInstance: IGF_ENC_INSTANCE_HANDLE,
        st: *mut ::std::os::raw::c_void,
        pBitOffset: *mut ::std::os::raw::c_int,
        igfGridIdx: ::std::os::raw::c_int,
        isIndepFlag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IGFEncWriteConcatenatedBitstream(
        hInstance: IGF_ENC_INSTANCE_HANDLE,
        st: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IGFDecApplyMono(
        hInstance: IGF_DEC_INSTANCE_HANDLE,
        spectrum: *mut f32,
        igfGridIdx: ::std::os::raw::c_int,
        bfi: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn IGFDecCopyLPCFlatSpectrum(
        hInstance: IGF_DEC_INSTANCE_HANDLE,
        pSpectrumFlat: *const f32,
        igfGridIdx: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn IGFDecReadData(
        hInstance: IGF_DEC_INSTANCE_HANDLE,
        st: *mut Decoder_State,
        igfGridIdx: ::std::os::raw::c_int,
        isIndepFrame: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn IGFDecReadLevel(
        hInstance: IGF_DEC_INSTANCE_HANDLE,
        st: *mut Decoder_State,
        igfGridIdx: ::std::os::raw::c_int,
        isIndepFrame: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IGFDecRestoreTCX10SubFrameData(
        hInstance: IGF_DEC_INSTANCE_HANDLE,
        subFrameIdx: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn IGFDecSetMode(
        hInstance: IGF_DEC_INSTANCE_HANDLE,
        bitRate: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        defaultStartLine: ::std::os::raw::c_int,
        defaultStopLine: ::std::os::raw::c_int,
        rf_mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn IGFDecStoreTCX10SubFrameData(
        hInstance: IGF_DEC_INSTANCE_HANDLE,
        subFrameIdx: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn IGFDecUpdateInfo(hInstance: IGF_DEC_INSTANCE_HANDLE, igfGridIdx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn IGFCommonFuncsIGFConfiguration(
        bitRate: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        hIGFInfo: H_IGF_INFO,
        rf_mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IGFCommonFuncsIGFGetCFTables(
        bitRate: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        rf_mode: ::std::os::raw::c_int,
        cf_se00: *mut *const ::std::os::raw::c_ushort,
        cf_se01: *mut *const ::std::os::raw::c_ushort,
        cf_off_se01: *mut ::std::os::raw::c_short,
        cf_se02: *mut *const ::std::os::raw::c_ushort,
        cf_off_se02: *mut *const ::std::os::raw::c_short,
        cf_se10: *mut *const ::std::os::raw::c_ushort,
        cf_off_se10: *mut ::std::os::raw::c_short,
        cf_se11: *mut *const ::std::os::raw::c_ushort,
        cf_off_se11: *mut *const ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IGFCommonFuncsWriteSerialBit(
        st: *mut ::std::os::raw::c_void,
        pBitOffset: *mut ::std::os::raw::c_int,
        bit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn IGFSCFEncoderOpen(
        hPublicData: IGFSCFENC_INSTANCE_HANDLE,
        scfCountLongBlock: ::std::os::raw::c_int,
        bitRate: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        rf_mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn IGFSCFEncoderReset(hPublicData: IGFSCFENC_INSTANCE_HANDLE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IGFSCFEncoderEncode(
        hPublicData: IGFSCFENC_INSTANCE_HANDLE,
        st: *mut Encoder_State,
        bitCount: ::std::os::raw::c_int,
        sfe: *mut ::std::os::raw::c_int,
        indepFlag: ::std::os::raw::c_int,
        doRealEncoding: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IGFSCFEncoderSaveContextState(hPublicData: IGFSCFENC_INSTANCE_HANDLE);
}
extern "C" {
    pub fn IGFSCFEncoderRestoreContextState(hPublicData: IGFSCFENC_INSTANCE_HANDLE);
}
extern "C" {
    pub fn IGFSCFDecoderOpen(
        hPublicData: IGFSCFDEC_INSTANCE_HANDLE,
        scfCountLongBlock: ::std::os::raw::c_int,
        bitRate: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        rf_mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn IGFSCFDecoderReset(hPublicData: IGFSCFDEC_INSTANCE_HANDLE);
}
extern "C" {
    pub fn IGFSCFDecoderDecode(
        hPublicData: IGFSCFDEC_INSTANCE_HANDLE,
        st: *mut Decoder_State,
        sfe: *mut ::std::os::raw::c_int,
        indepFlag: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tbe_celp_exc_offset(
        T0: ::std::os::raw::c_short,
        T0_frac: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn blend_subfr2(sigIn1: *mut f32, sigIn2: *mut f32, sigOut: *mut f32);
}
pub const _RTPDUMP_ERROR_RTPDUMP_NO_ERROR: _RTPDUMP_ERROR = 0;
pub const _RTPDUMP_ERROR_RTPDUMP_MEMORY_ERROR: _RTPDUMP_ERROR = 1;
pub const _RTPDUMP_ERROR_RTPDUMP_WRONG_PARAMS: _RTPDUMP_ERROR = 2;
pub const _RTPDUMP_ERROR_RTPDUMP_INIT_ERROR: _RTPDUMP_ERROR = 3;
pub const _RTPDUMP_ERROR_RTPDUMP_WRITE_ERROR: _RTPDUMP_ERROR = 4;
pub const _RTPDUMP_ERROR_RTPDUMP_READ_ERROR: _RTPDUMP_ERROR = 5;
pub const _RTPDUMP_ERROR_RTPDUMP_FILE_NOT_FOUND: _RTPDUMP_ERROR = 6;
pub const _RTPDUMP_ERROR_RTPDUMP_NOT_IMPLEMENTED: _RTPDUMP_ERROR = 16;
pub const _RTPDUMP_ERROR_RTPDUMP_NOT_INITIALIZED: _RTPDUMP_ERROR = 256;
pub const _RTPDUMP_ERROR_RTPDUMP_READ_ENDOFFILE: _RTPDUMP_ERROR = 257;
pub const _RTPDUMP_ERROR_RTPDUMP_UNKNOWN_ERROR: _RTPDUMP_ERROR = 4096;
pub type _RTPDUMP_ERROR = ::std::os::raw::c_uint;
pub use self::_RTPDUMP_ERROR as RTPDUMP_ERROR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTPDUMP {
    _unused: [u8; 0],
}
pub type RTPDUMP_HANDLE = *mut RTPDUMP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTPDUMP_RTPPACKET {
    pub v_p_x_xx: ::std::os::raw::c_uchar,
    pub payloadTypeId: ::std::os::raw::c_uchar,
    pub sequenceNumber: ::std::os::raw::c_ushort,
    pub timeStamp: ::std::os::raw::c_uint,
    pub ssrc: ::std::os::raw::c_uint,
    pub data: [::std::os::raw::c_char; 1512usize],
    pub headerSize: ::std::os::raw::c_ushort,
    pub payloadSize: ::std::os::raw::c_ushort,
}
impl Default for RTPDUMP_RTPPACKET {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn RTPDUMP_OpenForReading(
        phRTPDUMP: *mut RTPDUMP_HANDLE,
        filename: *const ::std::os::raw::c_char,
    ) -> RTPDUMP_ERROR;
}
extern "C" {
    pub fn RTPDUMP_OpenWithFileToRead(
        phRTPDUMP: *mut RTPDUMP_HANDLE,
        file: *mut FILE,
    ) -> RTPDUMP_ERROR;
}
extern "C" {
    pub fn RTPDUMP_OpenForWriting(
        phRTPDUMP: *mut RTPDUMP_HANDLE,
        filename: *const ::std::os::raw::c_char,
    ) -> RTPDUMP_ERROR;
}
extern "C" {
    pub fn RTPDUMP_ReadPacket(
        hRTPDUMP: RTPDUMP_HANDLE,
        packet: *mut RTPDUMP_RTPPACKET,
        timeoffset_ms: *mut u32,
    ) -> RTPDUMP_ERROR;
}
extern "C" {
    pub fn RTPDUMP_WritePacket(
        hRTPDUMP: RTPDUMP_HANDLE,
        packet: *const RTPDUMP_RTPPACKET,
        timeoffset_ms: u32,
    ) -> RTPDUMP_ERROR;
}
extern "C" {
    pub fn RTPDUMP_Close(phRTPDUMP: *mut RTPDUMP_HANDLE, closeFile: ::std::os::raw::c_short);
}
extern "C" {
    pub fn RTPDUMP_SetDefaultRtpPacketHeader(packet: *mut RTPDUMP_RTPPACKET);
}
extern "C" {
    pub fn RTPDUMP_ParseRTPHeader(packet: *mut RTPDUMP_RTPPACKET);
}
extern "C" {
    pub static AMRWB_IOmode2rate: [i32; 16usize];
}
extern "C" {
    pub static PRIMARYmode2rate: [i32; 16usize];
}
extern "C" {
    pub static evsPayloadProtectedSizes: [u16; 22usize];
}
extern "C" {
    pub static evsPayloadProtectedSizes_isAMRWB_IOmode: [bool; 22usize];
}
extern "C" {
    pub static evsPayloadProtectedSizes_frameTypeIndex: [u16; 22usize];
}
extern "C" {
    pub fn evsPayload_unpackFrame(
        hf_only: bool,
        payload: *const ::std::os::raw::c_char,
        payloadSizeBytes: u16,
        frameIndex: u16,
        isAMRWB_IOmode: *mut bool,
        frameFollowing: *mut bool,
        frameTypeIndex: *mut u16,
        qBit: *mut bool,
        framePtr: *mut *mut ::std::os::raw::c_uchar,
        frameSizeBits: *mut u16,
    ) -> bool;
}
extern "C" {
    pub fn evsPayload_getFrameTypeFromSize(
        frameSizeBits: i16,
        isAMRWB_IOmode: *mut bool,
        frameTypeIndex: *mut u16,
    ) -> bool;
}
extern "C" {
    pub fn evsHeaderFullPayload_unpackFrame(
        payload: *const ::std::os::raw::c_char,
        payloadSizeBytes: u16,
        frameIndex: u16,
        isAMRWB_IOmode: *mut bool,
        frameFollowing: *mut bool,
        frameTypeIndex: *mut u16,
        qBit: *mut bool,
        frame: *mut *mut ::std::os::raw::c_uchar,
        frameSizeBits: *mut u16,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EVS_RTPDUMP_DEPACKER {
    pub rtpdump: RTPDUMP_HANDLE,
    pub hf_only: bool,
    pub rtpPacket: RTPDUMP_RTPPACKET,
    pub timeoffset_ms: u32,
    pub frameIndex: u16,
    pub frameFollowing: bool,
}
impl Default for EVS_RTPDUMP_DEPACKER {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const EVS_RTPDUMP_DEPACKER_ERROR_EVS_RTPDUMP_DEPACKER_NO_ERROR: EVS_RTPDUMP_DEPACKER_ERROR = 0;
pub const EVS_RTPDUMP_DEPACKER_ERROR_EVS_RTPDUMP_DEPACKER_EOF: EVS_RTPDUMP_DEPACKER_ERROR = -1;
pub const EVS_RTPDUMP_DEPACKER_ERROR_EVS_RTPDUMP_DEPACKER_RTPDUMP_ERROR:
    EVS_RTPDUMP_DEPACKER_ERROR = 1;
pub const EVS_RTPDUMP_DEPACKER_ERROR_EVS_RTPDUMP_DEPACKER_PAYLOAD_ERROR:
    EVS_RTPDUMP_DEPACKER_ERROR = 2;
pub type EVS_RTPDUMP_DEPACKER_ERROR = ::std::os::raw::c_int;
extern "C" {
    pub fn EVS_RTPDUMP_DEPACKER_open(
        self_: *mut EVS_RTPDUMP_DEPACKER,
        file: *mut FILE,
        hf_only: bool,
    ) -> EVS_RTPDUMP_DEPACKER_ERROR;
}
extern "C" {
    pub fn EVS_RTPDUMP_DEPACKER_readNextFrame(
        self_: *mut EVS_RTPDUMP_DEPACKER,
        rtpSequenceNumber: *mut u16,
        rtpTimeStamp: *mut u32,
        rcvTime_ms: *mut u32,
        isAMRWB_IOmode: *mut bool,
        frameTypeIndex: *mut u16,
        qBit: *mut bool,
        frame: *mut *mut ::std::os::raw::c_uchar,
        frameSizeBits: *mut u16,
    ) -> EVS_RTPDUMP_DEPACKER_ERROR;
}
extern "C" {
    pub fn EVS_RTPDUMP_DEPACKER_close(self_: *mut EVS_RTPDUMP_DEPACKER);
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
pub type __uint128_t = u128;
